{"task_id": "HumanEval/0", "requirement": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"", "entry_point": "has_close_elements", "canonical_solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n", "input_output_examples": "[[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3]], [[False], [True]]]", "starter_code": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3], [[1.0, 1.1, 1.2, 1.3], 0.15], [[10.0, 20.0, 30.0], 5.0], [[0.0, 0.0, 0.0], 0.0], [[1.5, 2.5, 3.5], 1.0], [[-1.0, -2.0, -3.0], 1.5], [[1.0], 0.5], [[1.0, 2.0], 0.0], [[1.0, 2.0, 3.0, 4.0, 5.0], 0.1]]", "qwen2.5-coder-32b-instruct": "[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3], [[1.0, 1.05, 1.1, 1.2], 0.1], [[1.0, 2.0, 3.0, 4.0, 5.0], 1.0], [[10.0, 10.01, 10.02, 10.03], 0.015], [[5.5, 5.6, 5.7, 5.8], 0.09], [[0.1, 0.2, 0.3, 0.4, 0.5], 0.1], [[], 0.1], [[1.0], 0.1], [[1.0, 1.0, 1.0], 0.0]]", "gpt-4o-mini": "[[[1.0, 1.5, 2.0], 0.6], [[1.0, 1.7, 2.5], 0.6], [[3.1, 3.14, 3.2], 0.05], [[5.0, 5.5, 6.0], 0.3], [[2.0, 3.0, 4.0], 1.0], [[1.0, 2.0, 3.0, 1.5], 0.55], [[5.5, 5.5], 0.0], [[1.0, 1.0], 0.001], [[], 0.5], [[1.0], 0.5]]"}}
{"task_id": "HumanEval/1", "requirement": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"", "entry_point": "separate_paren_groups", "canonical_solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n", "input_output_examples": "[[['( ) (( )) (( )( ))']], [[['()', '(())', '(()())']]]]", "starter_code": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['()'], ['(())'], ['()(())'], ['( ) (( )) (( )( ))'], ['((())) (()) ()'], ['   (  )   ((  ))  (( )( ))   '], ['()()()'], ['((())())'], ['()((())())'], ['( ( ) ) ( ( ( ) ) )']]", "qwen2.5-coder-32b-instruct": "[['( ) (( )) (( )( ))'], ['()()()'], ['((()))'], ['(()())(())()'], ['(())()(())'], [' '], ['()'], ['(( )( ))'], ['((( )))'], ['()(()(()))'], ['(())((()))']]", "gpt-4o-mini": "[['(a)(b)(c)'], ['(abc)(def)(ghi)'], ['(nested (inside))(and)(separate)'], ['( ) ( )'], ['(a (b c))(d e)'], ['(((a))) (b)'], ['(ab(cd))(ef(gh))'], ['(())(())'], ['()'], ['']]"}}
{"task_id": "HumanEval/2", "requirement": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"", "entry_point": "truncate_number", "canonical_solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n\n\n    return number - int(number)\n\n", "input_output_examples": "[[[3.5]], [[0.5]]]", "starter_code": "def truncate_number(number: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[3.5], [0.999], [123.456], [1.0], [0.0], [100.001], [1e-06], [999.999]]", "qwen2.5-coder-32b-instruct": "[[3.5], [0.99], [5.0], [123.456], [0.0], [1.0], [999.999]]", "gpt-4o-mini": "[[5.75], [3.14], [2.0], [0.999], [10.5], [20.75], [100.2], [0.0], [1.1], [7.625], [9999.9999], [100000.0]]"}}
{"task_id": "HumanEval/3", "requirement": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"", "entry_point": "below_zero", "canonical_solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n", "input_output_examples": "[[[[1, 2, 3]], [[1, 2, -4, 5]]], [[False], [True]]]", "starter_code": "from typing import List\ndef below_zero(operations: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[1, 2, -4, 5]], [[]], [[0, 0, 0]], [[-1]], [[10, -20, 10]], [[100, -50, -51]], [[-100, 50, 50]], [[100, -200, 100]], [[100, -100]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[1, 2, -4, 5]], [[0, 0, 0]], [[-1]], [[1, -1, -1]], [[100, -50, -60]], [[10, -10, 1]], [[]], [[1, 2, 3, -7, 1]]]", "gpt-4o-mini": "[[[100, -50, -30]], [[200, -250]], [[0, 0, 0]], [[-100, 50, 30]], [[10, -5, -10]], [[0, -1, 1]], [[-1, -1, -1]], [[100, 200, -300]], [[50, -25, -30, 20, 10, -30]]]"}}
{"task_id": "HumanEval/4", "requirement": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"", "entry_point": "mean_absolute_deviation", "canonical_solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0]]], [[1.0]]]", "starter_code": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[1.0, 2.0, 3.0, 4.0]], [[0.0, 0.0, 0.0, 0.0]], [[5.0]], [[-1.0, 1.0, -2.0, 2.0]], [[10.5, 20.3, 30.7, 40.1]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[1.0, 2.0, 3.0, 4.0]], [[5.0, 5.0, 5.0, 5.0]], [[1.5, 2.5, 3.5]], [[10.0]], [[]], [[0.0, 0.0, 0.0, 0.0]], [[1.0, -1.0, 2.0, -2.0]], [[1000000.0, 1000001.0, 999999.0]]]", "gpt-4o-mini": "[[[1.0, 2.0, 3.0, 4.0, 5.0]], [[10.0, 20.0, 30.0]], [[5.0]], [[1.0, 2.0, 3.0, 4.0, 5.0, -5.0, 0.0]], [[100.0, 200.0, 300.0, 400.0]], [[0.0, 0.0, 0.0]], [[2.5, 3.5, 4.5, 5.5]], [[1.0, -1.0, 1.0, -1.0]], [[-1.0, -2.0, -3.0]], [[0.0]]]"}}
{"task_id": "HumanEval/5", "requirement": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers' \"\"\"", "entry_point": "intersperse", "canonical_solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n", "input_output_examples": "[[[[], 4], [[1, 2, 3], 4]], [[[]], [[1, 4, 2, 4, 3]]]]", "starter_code": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4], 0], [[], 5], [[10], -1], [[7, 8, 9, 10, 11], 99], [[1, 1, 1, 1], 2], [[-1, -2, -3], -4], [[100, 200, 300, 400, 500], 0], [[0, 0, 0, 0], 0]]", "qwen2.5-coder-32b-instruct": "[[[], 4], [[1, 2, 3], 4], [[5], 0], [[1, 1, 1], 1], [[7, 8, 9, 10], -1], [[10, 20, 30], 0]]", "gpt-4o-mini": "[[[1, 2, 3, 4], 0], [[5, 10], 7], [[], 1], [[10, 20, 30], -1], [[100], 50], [[1, 2], 3], [[0, 0, 0], 9], [[21, 22, 23, 24, 25], 99], [[-1, -2, -3], 0], [[10, 20, 30, 40, 50], 99]]"}}
{"task_id": "HumanEval/6", "requirement": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    \"\"\"", "entry_point": "parse_nested_parens", "canonical_solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n", "input_output_examples": "[[['(()()) ((())) () ((())()())']], [[[2, 3, 1, 3]]]]", "starter_code": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[['(()()) ((())) () ((())()())'], ['()'], ['(())'], ['((()))'], ['(()()())'], ['() () ()'], ['((())) (()())'], ['(((())))'], ['((())) () (()()())'], ['((())())'], [''], [' (()) '], ['(()())((()))']]", "qwen2.5-coder-32b-instruct": "[['(()()) ((())) () ((())()())'], ['() (()) (()(()))'], ['((())) (()) ()'], ['((( )))'], ['()'], ['(())'], ['(()(()))'], ['() () ()'], ['(((()))) (((()))) ()'], ['((())())'], ['(()(())((())))'], ['((()))((()))'], ['((())(())(()))'], ['']]", "gpt-4o-mini": "[['()'], ['(())'], ['() ()'], ['((())) ((()))'], ['((()())) ((())())'], ['() (()) (()()) ((())) (((())))'], ['((((((((())))))))) ((()))'], ['((()()()())) ((())(())) (()((())))'], ['no parentheses here'], ['(() (()) (()) ())']]"}}
{"task_id": "HumanEval/7", "requirement": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"", "entry_point": "filter_by_substring", "canonical_solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n\n    return list(filter(lambda s: substring in s, strings))\n\n", "input_output_examples": "[[[[], 'a'], [['abc', 'bacd', 'cde', 'array'], 'a']], [[[]], [['abc', 'bacd', 'array']]]]", "starter_code": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[], 'a'], [['abc', 'bacd', 'cde', 'array'], 'a'], [['hello', 'world', 'python'], 'o'], [['data', 'science', 'machine', 'learning'], 'ing'], [['apple', 'banana', 'cherry'], 'z'], [['', ' ', 'empty', 'string'], ''], [['case', 'sensitive', 'TEST'], 'se'], [['123', '456', '789'], '1'], [['special!', 'chars@', '#test'], '!'], [['unicode', '文字', '漢字'], '文']]", "qwen2.5-coder-32b-instruct": "[[[], 'a'], [['abc', 'bacd', 'cde', 'array'], 'a'], [['hello', 'world', 'python'], 'o'], [['hello', 'world', 'python'], ''], [['hello', 'world', 'python'], 'xyz'], [['123', '234', '345'], '3'], [['apple', 'banana', 'cherry'], 'a'], [['apple', 'banana', 'cherry'], 'A'], [[''], 'a'], [[''], '']]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry'], 'an'], [['apple', 'banana', 'cherry'], 'a'], [['apple', 'banana', 'cherry'], 'z'], [['apple', 'banana', 'cherry'], 'ch'], [['apple', 'banana', 'cherry'], ''], [[], 'a'], [['apple', 'banana', 'cherry'], 'APPLE'], [['apple', 'apple pie', 'banana', 'apricot'], 'app'], [['single'], 'single'], [['apple', 'banana', 'cherry'], 'c']]"}}
{"task_id": "HumanEval/8", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"", "entry_point": "sum_product", "canonical_solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n", "input_output_examples": "[[[[]], [[1, 2, 3, 4]]], [[(0, 1)], [(10, 24)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4]], [[]], [[0]], [[1]], [[-1, -2, -3, -4]], [[0, 1, 2, 3]], [[10, -10]], [[2, 2, 2, 2]], [[1000000, 2000000]], [[-1, 0, 1]]]", "qwen2.5-coder-32b-instruct": "[[[]], [[1, 2, 3, 4]], [[0, 0, 0]], [[5]], [[-1, -2, -3]], [[1, -1, 1, -1]], [[100, 200, 300]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[0, 0, 0]], [[5]], [[-5]], [[]], [[10, -10]], [[1, 0, 1]], [[100, 200, 300]], [[1, 2, 3, -4, 5]]]"}}
{"task_id": "HumanEval/9", "requirement": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"", "entry_point": "rolling_max", "canonical_solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n", "input_output_examples": "[[[[1, 2, 3, 2, 3, 4, 2]]], [[[1, 2, 3, 3, 3, 4, 4]]]]", "starter_code": "from typing import List\ndef rolling_max(numbers: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 2, 3, 4, 2]], [[5, 4, 3, 2, 1]], [[1, 1, 1, 1, 1]], [[10]], [[]], [[-1, -2, -3, -2, -1]], [[0, 0, 0, 0, 0]], [[1, 3, 2, 5, 4, 7, 6]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 2, 3, 4, 2]], [[5, 3, 1, 2, 4]], [[7, 7, 7, 7]], [[10]], [[]], [[3, 2, 1]], [[1, 3, 2, 5, 4, 6, 5]]]", "gpt-4o-mini": "[[[1, 3, 2, 5, 4]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[10, 4, 3, 2, 5]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0]], [[7]], [[]], [[5, 1, 2, 1, 7, 3, 5]]]"}}
{"task_id": "HumanEval/10", "requirement": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "entry_point": "make_palindrome", "canonical_solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n", "input_output_examples": "[[[''], ['cat'], ['cata']], [[''], ['catac'], ['catac']]]", "starter_code": "def make_palindrome(string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[''], ['a'], ['ab'], ['aa'], ['abc'], ['aba'], ['abac'], ['abba'], ['race'], ['racecar'], ['noon'], ['noone'], ['level'], ['levl'], ['madam'], ['madame']]", "qwen2.5-coder-32b-instruct": "[[''], ['cat'], ['cata'], ['race'], ['madam'], ['a'], ['ab'], ['abc'], ['abcd'], ['abcba'], ['noon'], ['level'], ['deified'], ['rotor'], ['redder'], ['repaper'], ['reviled'], ['deed'], ['peep'], ['kayak'], ['wow'], ['stats'], ['rotor'], ['redder'], ['repaper'], ['reviled'], ['aabb'], ['aabba'], ['aabbaa'], ['aabbaab']]", "gpt-4o-mini": "[['race'], ['racecar'], ['abc'], ['a'], [''], ['ab'], ['abca'], ['abccba'], ['abcdefgh'], ['aabb']]"}}
{"task_id": "HumanEval/11", "requirement": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"", "entry_point": "string_xor", "canonical_solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n", "input_output_examples": "[[['010', '110']], [['100']]]", "starter_code": "def string_xor(a: str, b: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['010', '110'], ['0000', '0000'], ['1111', '1111'], ['101010', '010101'], ['1', '0'], ['0', '1'], ['', ''], ['101', '11'], ['1111111111', '0000000000'], ['10101', '01010']]", "qwen2.5-coder-32b-instruct": "[['010', '110'], ['111', '000'], ['1010', '1010'], ['0000', '0000'], ['1', '0'], ['0', '1'], ['1111', '1010'], ['', '']]", "gpt-4o-mini": "[['1100', '1010'], ['1111', '0000'], ['0000', '0000'], ['101010', '010101'], ['11110000', '10101010'], ['0011', '1100'], ['111', '000'], ['', ''], ['1', '0'], ['0', '1']]"}}
{"task_id": "HumanEval/12", "requirement": "from typing import List\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"", "entry_point": "longest", "canonical_solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n", "input_output_examples": "[[[[]], [['a', 'b', 'c']], [['a', 'bb', 'ccc']]], [[None], ['a'], ['ccc']]]", "starter_code": "from typing import List\ndef longest(strings: List[str]) -> Optional[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[]], [['a', 'b', 'c']], [['a', 'bb', 'ccc']], [['apple', 'banana', 'kiwi']], [['short', 'longest', 'medium']], [['', 'not empty', 'longest string']], [['equal', 'equal', 'equal']], [['a', 'aa', 'aaa', 'aaaa', 'aaaaa']], [['single']]]", "qwen2.5-coder-32b-instruct": "[[[]], [['a', 'b', 'c']], [['a', 'bb', 'ccc']], [['abc', 'de', 'fgh']], [['same', 'size', 'test']], [['one', 'two', 'three', 'four']], [['longestword', 'short', 'tiny']], [['equal', 'equal', 'equal']], [['single']]]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry', 'date']], [['short', 'longer', 'longest']], [['one', 'two', 'three', 'four']], [['a', 'ab', 'abc', 'abcd']], [['single']], [[]], [['', 'non-empty', '']], [['same', 'same', 'same']], [['longest', 'same', 'longest']], [['abcdefg', 'ab', 'abc', 'ab']]]"}}
{"task_id": "HumanEval/13", "requirement": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"", "entry_point": "greatest_common_divisor", "canonical_solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n", "input_output_examples": "[[[3, 5], [25, 15]], [[1], [5]]]", "starter_code": "def greatest_common_divisor(a: int, b: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[3, 5], [25, 15], [0, 5], [5, 0], [0, 0], [-4, 6], [6, -4], [-6, -4], [1, 1], [1, 0], [0, 1], [17, 17], [12, 36], [36, 12], [10, 101]]", "qwen2.5-coder-32b-instruct": "[[3, 5], [25, 15], [100, 25], [7, 13], [48, 18], [0, 5], [5, 0], [0, 0], [-48, 18], [48, -18], [-48, -18]]", "gpt-4o-mini": "[[10, 5], [100, 25], [54, 24], [0, 5], [5, 0], [0, 0], [-10, -5], [15, 5], [8, 12], [13, 17]]"}}
{"task_id": "HumanEval/14", "requirement": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \"\"\"", "entry_point": "all_prefixes", "canonical_solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n\n    return [string[:(i + 1)] for i in range(len(string))]\n\n", "input_output_examples": "[[['abc']], [[['a', 'ab', 'abc']]]]", "starter_code": "from typing import List\ndef all_prefixes(string: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['a'], ['ab'], ['abc'], ['abcd'], [''], ['12345'], ['hello'], ['!@#$'], ['a b c'], ['   '], ['longstringwithnospaces']]", "qwen2.5-coder-32b-instruct": "[['abc'], ['a'], [''], ['hello world'], ['12345'], ['AaBbCc']]", "gpt-4o-mini": "[[''], ['a'], ['abc'], ['abcd'], ['hello'], ['a long string'], ['123456'], ['singleword']]"}}
{"task_id": "HumanEval/15", "requirement": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"", "entry_point": "string_sequence", "canonical_solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n\n\n    return \" \".join(map(str, range(n + 1)))\n\n", "input_output_examples": "[[[0], [5]], [['0'], ['0 1 2 3 4 5']]]", "starter_code": "def string_sequence(n: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[0], [5], [1], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [5], [1], [10], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [5], [10], [100], [-1], [1000], [2.5]]"}}
{"task_id": "HumanEval/16", "requirement": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"", "entry_point": "count_distinct_characters", "canonical_solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n\n    return len(set(string.lower()))\n\n", "input_output_examples": "[[['xyzXYZ'], ['Jerry']], [[3], [4]]]", "starter_code": "def count_distinct_characters(string: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['xyzXYZ'], ['Jerry'], ['aabbcc'], ['AaA'], [''], ['1234567890'], ['!@#$%^&*()'], ['Hello, World!'], ['CASEsensitive'], ['   ']]", "qwen2.5-coder-32b-instruct": "[['xyzXYZ'], ['Jerry'], ['Hello, World!'], ['1234567890'], ['AaBbCc123'], [''], [' '], ['!!!@@@###$$$'], ['aAaAaAaAaA']]", "gpt-4o-mini": "[['hello'], ['abcdef'], ['aabbbcccc'], ['Hello World'], [''], ['123456abc!@#'], ['aA'], ['AbcdefGhijKLMnop']]"}}
{"task_id": "HumanEval/17", "requirement": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    \"\"\"", "entry_point": "parse_music", "canonical_solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n", "input_output_examples": "[[['o o| .| o| o| .| .| .| .| o o']], [[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]]", "starter_code": "from typing import List\ndef parse_music(music_string: str) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[['o o| .| o| o| .| .| .| .| o o'], ['o| .| o'], ['.| .| .| .| .|'], ['o'], ['o|'], ['.|'], [''], ['o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o'], ['o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o'], ['o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o']]", "qwen2.5-coder-32b-instruct": "[['o o| .| o| o| .| .| .| .| o o'], ['o'], ['o|'], ['.|'], ['o o o o'], ['o| o| o| o|'], ['.| .| .| .|'], ['o o| .|'], ['o| .| o'], ['o| o| .| .| o o| o| .|'], ['.'], ['o|.'], ['o| o|o'], ['o||'], ['o|o|'], ['o o o| .| o| .| o| o| .| .| o o o'], ['o| o| o| o| o| o| o| o|'], ['o o o o o o o o'], ['o| .| o| .| o| .| o| .|'], ['o o| .| o| o| .| .| .| .| o o o| .| o| o| .| .| .| .| o o'], ['o| o| o| o| o| o| o| o| o| o| o| o|'], ['o o o o o o o o o o o o'], ['o| .| o| .| o| .| o| .| o| .| o| .|'], ['o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|'], ['o o o o o o o o o o o o o o o o o o o o'], ['o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .| o| .|'], ['']]", "gpt-4o-mini": "[['o'], ['o|'], ['.|'], ['o o o o'], ['o| o| .|'], ['o o| .| o o|'], [''], ['....|o|o|o|'], ['o|o|o|o|'], ['......o|']]"}}
{"task_id": "HumanEval/18", "requirement": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"", "entry_point": "how_many_times", "canonical_solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n", "input_output_examples": "[[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa']], [[0], [3], [3]]]", "starter_code": "def how_many_times(string: str, substring: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa'], ['abcabcabc', 'abc'], ['ababababab', 'aba'], ['hello world', 'o'], ['hello world', 'hello'], ['hello world', 'world'], ['hello world', 'x'], ['hello world', ''], ['hello', 'hello'], ['hello', 'helloo'], ['hello', 'h'], ['hello', 'o'], ['hello', 'lo'], ['hello', 'x'], ['hello', '']]", "qwen2.5-coder-32b-instruct": "[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa'], ['abcabcabc', 'abc'], ['abcabcabc', 'abcd'], ['aaaaa', 'aaa'], ['abababab', 'aba'], ['', ''], ['a', ''], ['abc', 'abc'], ['abc', 'd']]", "gpt-4o-mini": "[['abababab', 'ab'], ['abcabcabc', 'abc'], ['hellohello', 'lo'], ['aaaaa', 'aa'], ['', 'a'], ['hello', ''], ['abc', 'xyz'], ['ababababa', 'aba'], ['nonoverlap', 'over'], ['a', 'a'], ['abcabcabc', 'ab'], ['xyzxyzxyzxyz', 'xyz']]"}}
{"task_id": "HumanEval/19", "requirement": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \"\"\"", "entry_point": "sort_numbers", "canonical_solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n", "input_output_examples": "[[['three one five']], [['one three five']]]", "starter_code": "def sort_numbers(numbers: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['three one five'], ['nine zero two'], ['seven seven seven'], ['one'], ['nine eight seven six five four three two one zero'], ['zero zero zero'], ['four six two'], ['five five five five'], ['three seven one eight zero'], ['nine nine nine nine nine nine nine nine nine nine']]", "qwen2.5-coder-32b-instruct": "[['three one five'], ['nine eight seven six'], ['zero one two three four five six seven eight nine'], ['four four four'], ['nine zero'], [''], ['five']]", "gpt-4o-mini": "[['three two one'], ['five four zero one'], ['nine eight seven six five four three two one zero'], ['zero zero one one two two three three'], ['four three two one zero five six seven eight nine'], ['five six seven eight nine zero one two three four'], [''], ['zero'], ['one two three four five six seven eight nine'], ['three zero six eight four one seven five two nine']]"}}
{"task_id": "HumanEval/20", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"", "entry_point": "find_closest_elements", "canonical_solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]]], [[(2.0, 2.2)], [(2.0, 2.0)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:", "llm_generated_inputs": {"deepseek-v3": "[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], [[1.5, 3.0, 7.0, 10.0, 15.0, 3.1]], [[0.0, 0.1, 0.2, 0.3, 0.4, 0.5]], [[100.0, 200.0, 150.0, 300.0, 250.0, 200.1]], [[-1.0, -2.0, -3.0, -4.0, -5.0, -2.2]], [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], [[1.0, 1.1, 1.2, 1.3, 1.4, 1.5]], [[0.0, 1000.0, 2000.0, 3000.0, 4000.0, 1000.1]], [[1.0, 1.0, 2.0, 2.0, 3.0, 3.0]]]", "qwen2.5-coder-32b-instruct": "[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], [[0.1, 0.2, 0.3, 0.4, 0.5, 0.15]], [[10.5, 10.4, 10.45, 10.3, 10.2, 10.1]], [[100.0, 99.9, 100.1, 99.8, 100.2, 99.7]], [[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], [[1.0, 2.0]], [[1.0, 1.0001]], [[-1.0, -2.0, -3.0, -4.0, -5.0, -2.2]], [[-1.0, -2.0, -3.0, -4.0, -5.0, -2.0]]]", "gpt-4o-mini": "[[[1.0, 2.0, 3.0, 4.0]], [[5.5, 5.1, 5.3, 5.0]], [[3.1, 3.2, 2.9, 2.8, 3.0]], [[10.1, 10.2, 10.4, 10.3]], [[0.1, 0.2, 0.3, 0.3]], [[1.5, 1.5, 1.5, 1.5]], [[1.0, 1.0, 1.0, 2.0]], [[100.0, 99.9, 98.5, 99.0]], [[-1.0, -2.0, -1.5, -1.1]], [[1000000.0, 1000000.0, 1000000.0, 1000000.0]]]"}}
{"task_id": "HumanEval/21", "requirement": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \"\"\"", "entry_point": "rescale_to_unit", "canonical_solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0, 5.0]]], [[[0.0, 0.25, 0.5, 0.75, 1.0]]]]", "starter_code": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:", "llm_generated_inputs": {"deepseek-v3": "[[[1.0, 2.0, 3.0, 4.0, 5.0]], [[0.0, 0.0, 0.0, 0.0]], [[-1.0, 0.0, 1.0]], [[100.0, 200.0, 300.0]], [[1.0, 1.0, 1.0, 1.0]], [[-5.0, 0.0, 5.0]], [[0.0, 1.0]], [[2.0, 2.0, 2.0, 2.0, 2.0]], [[1.5, 3.5, 6.5, 10.5]], [[-10.0, -5.0, 0.0, 5.0, 10.0]]]", "qwen2.5-coder-32b-instruct": "[[[1.0, 2.0, 3.0, 4.0, 5.0]], [[10.0, 20.0, 30.0, 40.0, 50.0]], [[5.0, 5.0, 5.0, 5.0]], [[0.0, 100.0]], [[-10.0, 0.0, 10.0]], [[100.0, -100.0]], [[0.0, 0.0, 0.0, 1.0]], [[1.0, 0.0]]]", "gpt-4o-mini": "[[[0.0, 1.0]], [[1.0, 2.0]], [[3.0, 4.0, 5.0]], [[-10.0, 0.0, 10.0]], [[5.0, 7.0, 15.0, 30.0]], [[100.0, 200.0, 300.0]], [[1.5, 2.5, 0.5, 3.5]], [[-5.0, -1.0, -3.0]], [[10.0, 10.0, 10.0, 10.0]], [[1.0]], [[]]]"}}
{"task_id": "HumanEval/22", "requirement": "from typing import List\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"", "entry_point": "filter_integers", "canonical_solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n\n    return list(filter(lambda x: type(x) == int, values))\n\n", "input_output_examples": "[[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]]], [[[5]], [[1, 2, 3]]]]", "starter_code": "from typing import List\ndef filter_integers(values: List[Any]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [['a', 'b', 'c', 'd']], [[1, 'a', 2.5, 3, {}]], [[3.14, 5, 10, 'hello', [1, 2, 3]]], [[True, False, 1, 0, 'True', 'False']], [[[]]], [[None, 42, '42', [42], {'key': 42}]], [[-1, 0, 1, -2.5, 2.5]], [[]], [[1, '1', 1.0, '1.0', [1], {'1': 1}]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 'abc', {}, []]], [['a', 3.14, 5]], [[10, 20, 30]], [['string', 3.14, True, None]], [[[], {}, (), set(), 0]], [[1, '1', 2, '2', 3, '3']], [[]], [[None, None, None]], [[1.0, 2.0, 3.0]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[1, 'two', 3.0, 4, None, 5]], [['a', 'b', 'c']], [[3.14, True, 42, 'string', [], {}, 55]], [[None, {}, [], 0, -1, 2.5]], [[10, -10, 0, -2, 2]], [[1, 2, 'three', [4], {5: 5}, (6,), 7.0]], [[True, False, 100, '100', 200.5]], [(1, 2, 3)], [[]]]"}}
{"task_id": "HumanEval/23", "requirement": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    \"\"\"", "entry_point": "strlen", "canonical_solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    return len(string)\n\n", "input_output_examples": "[[[''], ['abc']], [[0], [3]]]", "starter_code": "def strlen(string: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[''], ['abc'], ['hello world'], ['12345'], ['   '], ['\\\\n'], ['\\\\t'], ['🍎'], ['😊😊😊'], ['こんにちは']]", "qwen2.5-coder-32b-instruct": "[[''], ['abc'], [' '], ['a b c'], ['1234567890'], ['!@#$%^&*()'], ['singleword'], ['multiple words here'], ['\\n\\t\\r'], ['😊'], ['😊😊😊']]", "gpt-4o-mini": "[[''], ['a'], ['abc'], ['Hello, World!'], ['     '], ['12345'], ['@#$%^&*()'], ['Lorem ipsum dolor sit amet, consectetur adipiscing elit.']]"}}
{"task_id": "HumanEval/24", "requirement": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"", "entry_point": "largest_divisor", "canonical_solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n", "input_output_examples": "[[[15]], [[5]]]", "starter_code": "def largest_divisor(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[15], [17], [1], [100], [2], [0], [-10]]", "qwen2.5-coder-32b-instruct": "[[15], [100], [37], [1], [2], [0], [-5]]", "gpt-4o-mini": "[[10], [15], [100], [1], [2], [25], [7], [49], [97]]"}}
{"task_id": "HumanEval/25", "requirement": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"", "entry_point": "factorize", "canonical_solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n", "input_output_examples": "[[[8], [25], [70]], [[[2, 2, 2]], [[5, 5]], [[2, 5, 7]]]]", "starter_code": "from typing import List\ndef factorize(n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [8], [25], [70], [13], [100], [0], [-10], [1024], [997]]", "qwen2.5-coder-32b-instruct": "[[8], [25], [70], [1], [0], [-1], [2], [3], [97], [100], [1024], [104729]]", "gpt-4o-mini": "[[1], [2], [15], [28], [100], [97], [36], [45], [0], [-10], [1000000]]"}}
{"task_id": "HumanEval/26", "requirement": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"", "entry_point": "remove_duplicates", "canonical_solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n", "input_output_examples": "[[[[1, 2, 3, 2, 4]]], [[[1, 3, 4]]]]", "starter_code": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 2, 4]], [[5, 5, 5, 5, 5]], [[1, 2, 3, 4, 5]], [[10, 20, 30, 20, 10]], [[]], [[1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], [[7, 8, 9, 7, 8, 9, 10]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 2, 4]], [[5, 5, 5, 5, 5]], [[1, 2, 3, 4, 5]], [[]], [[10, 10, 20, 20, 30, 30, 40]], [[1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]]]", "gpt-4o-mini": "[[[1, 2, 2, 3, 4, 4, 5]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1]], [[5, 5, 4, 3, 3, 2, 1]], [[10, 20, 30, 20, 10]], [[0, -1, -1, 0, 1, 2]], [[]], [[1, 2, 3, 1, 2, 3]]]"}}
{"task_id": "HumanEval/27", "requirement": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"", "entry_point": "flip_case", "canonical_solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n", "input_output_examples": "[[['Hello']], [['hELLO']]]", "starter_code": "def flip_case(string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Hello'], ['hELLO'], ['12345'], ['!@#$%'], ['aBcDeFg'], ['ZxYvU'], [''], ['  aB  cD  '], ['A1b2C3']]", "qwen2.5-coder-32b-instruct": "[['Hello'], ['hELLO'], ['Python3.8'], ['12345'], ['!@#$%^&*()'], ['FLIPcase'], ['flipCASE'], [''], ['a'], ['A']]", "gpt-4o-mini": "[['Hello World!'], ['python TEST'], ['1234 ABcd efgh'], [''], ['Mixed CASE letters'], ['ALLUPPERCASE'], ['all lowercase'], ['!@#$%^&*()'], ['CamelCaseOne']]"}}
{"task_id": "HumanEval/28", "requirement": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    \"\"\"", "entry_point": "concatenate", "canonical_solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n\n    return \"\".join(strings)\n\n", "input_output_examples": "[[[[]], [['a', 'b', 'c']]], [[''], ['abc']]]", "starter_code": "from typing import List\ndef concatenate(strings: List[str]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[[]], [['a', 'b', 'c']], [['hello', 'world']], [['']], [['', ' ', '']], [['python', 'is', 'fun']], [['123', '456', '789']], [['a']], [[' ', ' ', ' ']], [['hello', '', 'world']]]", "qwen2.5-coder-32b-instruct": "[[[]], [['a', 'b', 'c']], [['hello', 'world']], [['single']], [['', 'test']], [['test', '']], [['', '', '']], [['a', '', 'b', '', 'c']]]", "gpt-4o-mini": "[[['hello', 'world']], [['This', 'is', 'a', 'test']], [['concatenate', 'these', 'strings']], [['']], [['single']], [['a', 'b', 'c', '', 'd']], [[' ', 'separated', 'by', 'spaces']], [['line1\\nline2', 'line3']], [['\\t', 'tabbed']], [['😀', '🚀']]]"}}
{"task_id": "HumanEval/29", "requirement": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"", "entry_point": "filter_by_prefix", "canonical_solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n", "input_output_examples": "[[[[], 'a'], [['abc', 'bcd', 'cde', 'array'], 'a']], [[[]], [['abc', 'array']]]]", "starter_code": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[], 'a'], [['abc', 'bcd', 'cde', 'array'], 'a'], [['apple', 'banana', 'apricot', 'avocado'], 'ap'], [['hello', 'world', 'hell', 'heaven'], 'he'], [['python', 'java', 'javascript', 'ruby'], 'py'], [['test', 'testing', 'testcase', 'tester'], 'test'], [['empty', 'strings', 'no', 'match'], 'xyz'], [['case', 'CaSe', 'CASE', 'casE'], 'ca'], [['123', '1234', '12abc', '12'], '12'], [['', 'empty', 'string', ''], '']]", "qwen2.5-coder-32b-instruct": "[[[], 'a'], [['abc', 'bcd', 'cde', 'array'], 'a'], [['apple', 'apricot', 'banana', 'avocado'], 'ap'], [['dog', 'cat', 'camel', 'caterpillar'], 'ca'], [['hello', 'world', 'helium', 'helper'], 'he'], [['test', 'testing', 'tested'], 'te'], [['prefix', 'prelude', 'presentation'], 'pre'], [['one', 'once', 'only'], 'on'], [['start', 'started', 'starting'], 'star'], [[''], ''], [['empty', '', 'none'], ''], [['same', 'same', 'same'], 'sa'], [['unique', 'unicorn', 'unity'], 'uni'], [['filter', 'finder', 'finale'], 'fin'], [['a', 'ab', 'abc'], 'a'], [['xyz', 'xy', 'x'], 'x'], [['no', 'none', 'nobody'], 'no']]", "gpt-4o-mini": "[[['apple', 'banana', 'apricot'], 'ap'], [['car', 'cat', 'dog'], 'ca'], [['hello', 'hey', 'hi'], 'h'], [['one', 'two', 'three', 'four'], 'f'], [['prefix', 'pretext', 'postfix'], 'pre'], [[], 'any'], [['singleitem'], 's'], [['apple', 'banana', 'grape'], 'z'], [['test', 'testing', 'te'], 'te'], [['a', 'b', 'ab'], 'a']]"}}
{"task_id": "HumanEval/30", "requirement": "from typing import List\n\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"", "entry_point": "get_positive", "canonical_solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    return list(filter(lambda x: x > 0, l))\n\n", "input_output_examples": "[[[[-1, 2, -4, 5, 6]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], [[[2, 5, 6]], [[5, 3, 2, 3, 9, 123, 1]]]]", "starter_code": "from typing import List\ndef get_positive(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[-1, 2, -4, 5, 6]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[]], [[0, 0, 0]], [[-1, -2, -3, -4]], [[1, 2, 3, 4]], [[-1, 0, 1]], [[100, -100, 200, -200]]]", "qwen2.5-coder-32b-instruct": "[[[]], [[-1, -2, -3]], [[1, 2, 3]], [[0, -1, 1]], [[-1, 2, -4, 5, 6]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[0, 0, 0]]]", "gpt-4o-mini": "[[[-3, -1, 0, 1, 2, 3]], [[5, 10, -5, -10]], [[-1, -2, -3]], [[0]], [[1, 2, 3, 4, 5]], [[-10, 0, 10]], [[100, 200, 300]], [[-50, 50, 0]], [[]]]"}}
{"task_id": "HumanEval/31", "requirement": "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"", "entry_point": "is_prime", "canonical_solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n", "input_output_examples": "[[[6], [101], [11], [13441], [61], [4], [1]], [[False], [True], [True], [True], [True], [False], [False]]]", "starter_code": "def is_prime(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[2], [3], [4], [5], [11], [13], [17], [19], [23], [29], [1], [0], [-1], [100], [101], [13441], [61], [6]]", "qwen2.5-coder-32b-instruct": "[[6], [101], [11], [13441], [61], [4], [1], [2], [0], [-5], [97], [100]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [15], [17], [19], [20], [29], [-1], [0], [100], [97]]"}}
{"task_id": "HumanEval/32", "requirement": "from typing import List\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "entry_point": "find_zero", "canonical_solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n", "input_output_examples": "[[[[1, 2]], [[-6, 11, -6, 1]]], [[-0.5], [1.0]]]", "starter_code": "from typing import List\ndef find_zero(xs: List[float]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2]], [[-6, 11, -6, 1]], [[0, 0, 1]], [[1, 0, -1]], [[1, -3, 2]], [[1, 0, 0, 0]], [[1, 0, 0, 1]], [[1, -2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2]], [[-6, 11, -6, 1]], [[1, 0, -1]], [[2, -4, 2]], [[1, -3, 3, -1]], [[0, 0, 1]], [[0, 1]], [[1, 0, 0, 0]], [[-1, 0, 0, 1]]]", "gpt-4o-mini": "[[[1.0, -3.0, 2.0]], [[-1.0, 0.0, 1.0]], [[0.0, 0.0, 1.0]], [[1.0, 0.0, -4.0, 0.0]], [[2.0, -4.0, 2.0]], [[0.0, 3.0, 0.0]], [[4.0, 0.0, 1.0, -5.0]], [[1.0, -2.0, 1.0, -1.0]], [[3.0, 4.0, 2.0, 1.0]]]"}}
{"task_id": "HumanEval/33", "requirement": "from typing import List\n\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"", "entry_point": "sort_third", "canonical_solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n", "input_output_examples": "[[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]]], [[[1, 2, 3]], [[2, 6, 3, 4, 8, 9, 5]]]]", "starter_code": "from typing import List\ndef sort_third(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 1, 2, 2, 2, 3, 3, 3]], [[10]], [[]], [[0, 0, 0, 0, 0, 0]], [[7, 3, 5, 1, 9, 2, 4, 8, 6]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]], [[9, 7, 5, 3, 1, 8, 6, 4, 2, 0]], [[10, 20, 30, 40, 50, 60, 70, 80, 90]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[]], [[1]], [[1, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]", "gpt-4o-mini": "[[[3, 1, 4, 2, 5, 0, 9, 6]], [[1, 2, 3, 4, 5, 6]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[0, 0, 0, 0]], [[5, 2, 8, 1, 6]], [[7]], [[1, 2, 3]], [[-1, -2, -3, -4, -5, -6]], [[10, -1, 20, 5, -20, 0, 15]], [[2, 4, 6, 8, 10, 12, 14, 16, 18]]]"}}
{"task_id": "HumanEval/34", "requirement": "from typing import List\n\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"", "entry_point": "unique", "canonical_solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n    return sorted(set(l))\n\n", "input_output_examples": "[[[[5, 3, 5, 2, 3, 3, 9, 0, 123]]], [[[0, 2, 3, 5, 9, 123]]]]", "starter_code": "from typing import List\ndef unique(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[1, 1, 1, 1, 1]], [[]], [[10]], [[7, 3, 7, 3, 7, 3]], [[-1, -2, -1, -2, -3]], [[0, 0, 0, 0]], [[100, 200, 300, 100, 200]], [[42]], [[5, -5, 5, -5, 5]]]", "qwen2.5-coder-32b-instruct": "[[[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[1, 1, 1, 1, 1]], [[]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1]], [[0, 0, 0, 0, 0, 0, 0]], [[100, 200, 300, 200, 100, 300]], [[-1, -2, -3, -1, -2, -3]], [[10, 20, 30, 40, 50]], [[5, 4, 3, 2, 1, 1, 2, 3, 4, 5]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[1, 1, 2, 2, 3, 3]], [[5, 5, 5, 5, 5]], [[-1, 0, 1, 0, -1]], [[10, 20, 10, 30, 20, 40]], [[100, 0, 0, 100, 50]], [[]], [[1.5, 2.5, 1.5, 3.5, 2.5]], [[0, 0, 0, 0]], [[1, 2, 3, 2, 1]]]"}}
{"task_id": "HumanEval/35", "requirement": "from typing import List\n\n\ndef max_element(l: List[int]) -> int:\n    \"\"\"Return maximum element in the list.\n    \"\"\"", "entry_point": "max_element", "canonical_solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n\n    return max(l)\n\n", "input_output_examples": "[[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], [[3], [123]]]", "starter_code": "from typing import List\ndef max_element(l: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[-1, -2, -3, -4]], [[0, 0, 0, 0]], [[100]], [[]], [[-10, 0, 10]], [[1, 3, 3, 2, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[0]], [[-1, -2, -3, -4]], [[100]], [[1, 1, 1, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 5, 5, 5]], [[-1, -5, -3, -2]], [[100, 200, 300, 400]], [[-1, 0, 1]], [[0]], [[]], [[1]], [[3, 1, 4, 2]]]"}}
{"task_id": "HumanEval/36", "requirement": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"", "entry_point": "fizz_buzz", "canonical_solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n", "input_output_examples": "[[[50], [78], [79]], [[0], [2], [3]]]", "starter_code": "def fizz_buzz(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[50], [78], [79], [1], [10], [22], [100], [143]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [10], [50], [77], [78], [79], [100], [143], [1000]]", "gpt-4o-mini": "[[0], [1], [10], [20], [30], [77], [100], [150], [200], [1000]]"}}
{"task_id": "HumanEval/37", "requirement": "from typing import List\n\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"", "entry_point": "sort_even", "canonical_solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n", "input_output_examples": "[[[[1, 2, 3]], [[5, 6, 3, 4]]], [[[1, 2, 3]], [[3, 6, 5, 4]]]]", "starter_code": "from typing import List\ndef sort_even(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[5, 6, 3, 4]], [[]], [[7]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[2, 2, 2, 2]], [[1, 3, 5, 7, 9]], [[0, 1, 0, 1, 0, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[5, 6, 3, 4]], [[10, 15, 2, 20, 11]], [[7]], [[]], [[8, 9]], [[4, 3, 2, 1, 0, -1]], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]]]", "gpt-4o-mini": "[[[4, 3, 5, 2, 1]], [[10, 9, 8, 7, 6]], [[2, 4, 6, 8, 10, 12]], [[-1, -3, 2, 1]], [[1, 3, 5]], [[1]], [[]], [[2, 1, 3, 0, -1]], [[5, 0, 10, 2, 20]]]"}}
{"task_id": "HumanEval/38", "requirement": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_cyclic", "canonical_solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n", "input_output_examples": "[[['abc'], ['abcdef'], ['a'], ['ab'], ['abcde']], [['bca'], ['bcaefd'], ['a'], ['ab'], ['bcaed']]]", "starter_code": "def decode_cyclic(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['abcdef'], ['abcde'], ['a'], [''], ['xyz'], ['123456789'], ['!@#$%^']]", "qwen2.5-coder-32b-instruct": "[['abc'], ['bca'], ['bcadef'], ['bcadefg'], ['bcadefghi'], ['bcadefghij'], ['bcadefghijk'], ['bcadefghijkl'], ['bcadefghijklm'], ['bcadefghijklmn'], ['bcadefghijklmno'], ['bcadefghijklmnop'], ['bcadefghijklmnopq'], ['bcadefghijklmnopqr'], ['bcadefghijklmnopqrs'], ['bcadefghijklmnopqrst'], ['bcadefghijklmnopqrstu'], ['bcadefghijklmnopqrstuv'], ['bcadefghijklmnopqrstuvw'], ['bcadefghijklmnopqrstuvwx'], ['bcadefghijklmnopqrstuvwxy'], ['bcadefghijklmnopqrstuvwxyz'], [''], ['a'], ['ab'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefg'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij'], ['abcdefghijk'], ['abcdefghijkl'], ['abcdefghijklm'], ['abcdefghijklmn'], ['abcdefghijklmnop'], ['abcdefghijklmnopq'], ['abcdefghijklmnopqr'], ['abcdefghijklmnopqrs'], ['abcdefghijklmnopqrst'], ['abcdefghijklmnopqrstu'], ['abcdefghijklmnopqrstuv'], ['abcdefghijklmnopqrstuvw'], ['abcdefghijklmnopqrstuvwx'], ['abcdefghijklmnopqrstuvwxy'], ['abcdefghijklmnopqrstuvwxyz']]", "gpt-4o-mini": "[[''], ['abc'], ['defghi'], ['abcdefghijk'], ['abcdef'], ['xyzabc'], ['hello world'], ['123456789'], ['ab'], ['a']]"}}
{"task_id": "HumanEval/39", "requirement": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"", "entry_point": "prime_fib", "canonical_solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n", "input_output_examples": "[[[1], [2], [3], [4], [5]], [[2], [3], [5], [13], [89]]]", "starter_code": "def prime_fib(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [6], [0], [-1], [10]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [0], [-1], [100]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [10], [15], [20], [25], [30]]"}}
{"task_id": "HumanEval/40", "requirement": "from typing import List\n\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"", "entry_point": "triples_sum_to_zero", "canonical_solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]]], [[False], [True], [False], [True], [False]]]", "starter_code": "from typing import List\ndef triples_sum_to_zero(l: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]], [[-1, 0, 1]], [[0, 0, 0]], [[-1, -2, -3, 6]], [[5, -5, 0, 10]], [[]], [[1, 2, -3, 4, 5, -6, 7]], [[10, -10, 10]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]], [[]], [[0, 0, 0]], [[0, 1, -1]], [[1, -1, 2, -2, 3, -3]], [[10, -10, 5, -5, 3, -3]], [[1, 2, -3, 4, 5, -9]]]", "gpt-4o-mini": "[[[0, 0, 0]], [[1, -1, 0]], [[1, 2, -3]], [[-1, 1, 0, 2, -2]], [[3, -1, -2, 1, 2]], [[1, 2, 3, 4]], [[-1, 0, 1, 2]], [[5, 7, 8]], [[1, 1, 1]], [[0, 1, -1, 2, -2, 3]], [[-4, -1, -1, 0, 1, 2, 4]], [[]], [[1, -1, 2, -2, 3, -3, 0]]]"}}
{"task_id": "HumanEval/41", "requirement": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "entry_point": "car_race_collision", "canonical_solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n\n\n    return n ** 2\n\n", "input_output_examples": "[[[1], [2], [3]], [[1], [4], [9]]]", "starter_code": "def car_race_collision(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [5], [10], [100], [-1], [-5]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [5], [10], [100]]", "gpt-4o-mini": "[[0], [1], [5], [10], [100], [1000], [10000], [100000]]"}}
{"task_id": "HumanEval/42", "requirement": "from typing import List\n\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"", "entry_point": "incr_list", "canonical_solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n\n    return [x + 1 for x in l]\n\n", "input_output_examples": "[[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]]], [[[2, 3, 4]], [[6, 4, 6, 3, 4, 4, 10, 1, 124]]]]", "starter_code": "from typing import List\ndef incr_list(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[]], [[0]], [[-1, -2, -3]], [[10, 20, 30, 40, 50]], [[999, 1000, 1001]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[]], [[0]], [[-1, -2, -3]], [[1000000, 2000000, 3000000]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[0, -1, -2]], [[-5, 0, 5]], [[10, 20, 30, 40]], [[-1, 2, -3, 4]], [[100]], [[]], [[5, 5, 5]], [[1, 2, 3, 4, 5]]]"}}
{"task_id": "HumanEval/43", "requirement": "from typing import List\n\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"", "entry_point": "pairs_sum_to_zero", "canonical_solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]]], [[False], [False], [False], [True], [False]]]", "starter_code": "from typing import List\ndef pairs_sum_to_zero(l: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[]], [[0, 0]], [[-1, 1]], [[-2, 2, 3, -3]], [[10, -10, 5, -5]], [[-1, -2, -3, -4]], [[1, -1, 2, -2, 0]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[]], [[0, 0]], [[10, -10]], [[5, -5, 5]], [[-1, 1, 2, -2, 3, -3]]]", "gpt-4o-mini": "[[[1, -1]], [[3, 4, 2, -4]], [[5, 1, 3, 0, -3]], [[0, 0]], [[-1, -2, -3, 1, 2, 3]], [[10, 5, 0, -5]], [[1, 2, 3]], [[-1, -1, 1]], [[0]], [[]]]"}}
{"task_id": "HumanEval/44", "requirement": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"", "entry_point": "change_base", "canonical_solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n", "input_output_examples": "[[[8, 3], [8, 2], [7, 2]], [['22'], ['1000'], ['111']]]", "starter_code": "def change_base(x: int, base: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[8, 3], [8, 2], [7, 2], [0, 2], [1, 2], [15, 8], [10, 5], [100, 9], [255, 2], [16, 3], [16, 16], [-8, 3], [8, 10], [8, 0], [8, 1]]", "qwen2.5-coder-32b-instruct": "[[8, 3], [8, 2], [7, 2], [0, 2], [1, 9], [9, 9], [10, 5], [15, 4], [255, 8], [100, 3]]", "gpt-4o-mini": "[[10, 2], [255, 8], [5, 5], [9, 3], [0, 2], [1, 2], [15, 6], [20, 4], [3, 2], [7, 1]]"}}
{"task_id": "HumanEval/45", "requirement": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"", "entry_point": "triangle_area", "canonical_solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n\n    return a * h / 2\n\n", "input_output_examples": "[[[5, 3]], [[7.5]]]", "starter_code": "def triangle_area(a: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[5.0, 3.0], [10.0, 5.0], [0.0, 5.0], [5.0, 0.0], [-5.0, 3.0], [5.0, -3.0], [0.0, 0.0], [1.5, 2.5], [100.0, 50.0], [0.001, 0.001]]", "qwen2.5-coder-32b-instruct": "[[5, 3], [0, 10], [10, 0], [0, 0], [1, 1], [10.5, 4.2], [-5, 3], [5, -3], [-5, -3]]", "gpt-4o-mini": "[[3.0, 4.0], [5.0, 10.0], [0.0, 5.0], [5.0, 0.0], [-3.0, 4.0], [3.0, -4.0], [1.5, 2.5], [100.0, 50.0]]"}}
{"task_id": "HumanEval/46", "requirement": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    \"\"\"", "entry_point": "fib4", "canonical_solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n", "input_output_examples": "[[[5], [6], [7]], [[4], [8], [14]]]", "starter_code": "def fib4(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [10], [15], [20]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [15], [20]]"}}
{"task_id": "HumanEval/47", "requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    \"\"\"", "entry_point": "median", "canonical_solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]]], [[3], [15.0]]]", "starter_code": "from typing import List\ndef median(l: List[int]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[1]], [[2, 2]], [[]], [[5, 1, 3, 9, 7]], [[10, 20, 30, 40, 50, 60]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0]], [[100, 200, 300]]]", "qwen2.5-coder-32b-instruct": "[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[1]], [[1, 2]], [[7, 3, 5]], [[1, 2, 3, 4]], [[]], [[5, 5, 5, 5]], [[10]], [[1, 1, 2, 2, 3, 3]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[5, 3, 8, 1]], [[7, 2, 3, 4, 9]], [[4, 2, 1, 3]], [[10, 20, 30, 40, 50]], [[1, 3, 3, 6, 7, 8, 9]], [[2]], [[-3, -1, -2, -5, 0]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]"}}
{"task_id": "HumanEval/48", "requirement": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"", "entry_point": "is_palindrome", "canonical_solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    return text == text[::-1]\n\n", "input_output_examples": "[[[''], ['aba'], ['aaaaa'], ['zbcd']], [[True], [True], [True], [False]]]", "starter_code": "def is_palindrome(text: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[''], ['aba'], ['aaaaa'], ['zbcd'], ['a'], ['racecar'], ['Racecar'], ['12321'], ['123321'], ['A man a plan a canal Panama'], ['Madam, in Eden, I’m Adam.'], ['Was it a car or a cat I saw?']]", "qwen2.5-coder-32b-instruct": "[[''], ['aba'], ['aaaaa'], ['zbcd'], ['A man a plan a canal Panama'], ['No lemon no melon'], ['Was it a car or a cat I saw'], ['Not a palindrome'], ['12321'], ['123456'], ['Able was I ere I saw Elba'], ['Madam In Eden Im Adam'], ['racecar'], ['RaceCar'], [' '], ['a']]", "gpt-4o-mini": "[['racecar'], ['A man a plan a canal Panama'], ['Was it a car or a cat I saw?'], ['12321'], ['No lemon, no melon'], ['python'], [''], ['A'], [' '], ['!@#$%^&*()!'], ['Able was I saw Elba']]"}}
{"task_id": "HumanEval/49", "requirement": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"", "entry_point": "modp", "canonical_solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p\n\n", "input_output_examples": "[[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101]], [[3], [2], [1], [8], [1]]]", "starter_code": "def modp(n: int, p: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101], [1, 2], [10, 13], [15, 17], [20, 23], [0, 1], [1000, 1001]]", "qwen2.5-coder-32b-instruct": "[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101], [1, 2], [2, 2], [5, 3], [10, 1], [-1, 5], [5, -1], [0, 0], [1000, 1009], [123456789, 987654321]]", "gpt-4o-mini": "[[0, 1], [5, 13], [10, 1000], [20, 1024], [15, 123], [7, 2], [3, 7], [1000, 999983], [10, 1], [-1, 5]]"}}
{"task_id": "HumanEval/50", "requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_shift", "canonical_solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n", "input_output_examples": "[[], []]", "starter_code": "def decode_shift(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['fghij'], ['abcde'], ['xyzab'], [''], ['klmno'], ['pqrst'], ['uvwxy'], ['zabcd']]", "qwen2.5-coder-32b-instruct": "[['mjqqt'], ['bmfyf'], ['zruog'], ['ezyjr'], ['jgnnqy'], ['fwxmxn'], ['a'], ['z'], [' '], ['!'], ['abcdefghijklmnopqrstuvwxyz'], ['xyzabc']]", "gpt-4o-mini": "[['bcdef'], ['rsvvb'], ['vwxyz'], ['ABCDE'], ['abcde456!'], [''], ['quux'], ['zzzzzz']]"}}
{"task_id": "HumanEval/51", "requirement": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"", "entry_point": "remove_vowels", "canonical_solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n", "input_output_examples": "[[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd']], [[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd']]]", "starter_code": "def remove_vowels(text: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd'], ['Hello World!'], ['AEIOUaeiou'], ['12345!@#$%'], ['The quick brown fox jumps over the lazy dog.']]", "qwen2.5-coder-32b-instruct": "[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd'], ['AEIOUaeiou'], ['This is a test sentence.'], ['12345'], ['!@#$%^&*()'], ['Vowels'], ['NoVowelsHere']]", "gpt-4o-mini": "[['hello'], ['aeiou'], ['Python Programming'], ['123456789'], [''], ['This is a test sentence.'], ['Uppercase Vowels: A, E, I, O, U'], ['Vowels and Consonants'], ['Some special characters: @#&*']]"}}
{"task_id": "HumanEval/52", "requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"", "entry_point": "below_threshold", "canonical_solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    return all(x < t for x in l)\n\n", "input_output_examples": "[[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5]], [[True], [False]]]", "starter_code": "from typing import List\ndef below_threshold(l: List[int], t: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4], 5], [[10, 20, 30, 40], 50], [[1, 2, 3, 4], 4], [[-1, -2, -3, -4], 0], [[100, 200, 300, 400], 100], [[1, 2, 3, 4], 1], [[], 5], [[5, 5, 5, 5], 5], [[1, 2, 3, 4], 0], [[1, 2, 3, 4], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[0, -1, -5], 0], [[10, 10, 10], 10], [[10, 9, 8, 7], 10], [[], 10], [[5], 6], [[5], 5]]", "gpt-4o-mini": "[[[1, 2, 3], 4], [[4, 5, 6], 4], [[0, -1, -2], 1], [[10, 15, 20], 25], [[], 5], [[5, 6, 7], 5], [[-10, -5, 0], 0], [[1, 2, 3], 3]]"}}
{"task_id": "HumanEval/53", "requirement": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\"\"\"", "entry_point": "add", "canonical_solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n    return x + y\n\n", "input_output_examples": "[[[2, 3], [5, 7]], [[5], [12]]]", "starter_code": "def add(x: int, y: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[2, 3], [5, 7], [0, 0], [-1, 1], [-5, -7], [2147483647, 1], [-2147483648, -1], [0, -2147483648], [2147483647, 2147483647]]", "qwen2.5-coder-32b-instruct": "[[2, 3], [5, 7], [-1, -1], [0, 0], [100, 200], [-50, 50], [2147483647, 0], [-2147483648, 0]]", "gpt-4o-mini": "[[1, 2], [-1, 1], [0, 0], [100, 200], [-50, -50], [2147483647, 0], [-2147483648, -1], [123456789, 987654321]]"}}
{"task_id": "HumanEval/54", "requirement": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"", "entry_point": "same_chars", "canonical_solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\n    return set(s0) == set(s1)\n\n", "input_output_examples": "[[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc']], [[True], [True], [True], [False], [False], [False]]]", "starter_code": "def same_chars(s0: str, s1: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['', ''], ['a', 'a'], ['a', 'b'], ['ab', 'ba'], ['abc', 'abcd'], ['abc', 'ab'], ['abc', 'aabbcc'], ['abc', 'aaabbbccc'], ['abc', 'xyz'], ['123', '321'], ['123', '1234'], ['123', '12'], ['123', '112233'], ['123', '111222333'], ['123', 'xyz']]", "qwen2.5-coder-32b-instruct": "[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['', ''], ['a', 'a'], ['a', 'b'], ['abc', 'cba'], ['abc', 'cbadef'], ['1234', '4321'], ['1234', '43215'], ['!@#$', '$#@!'], ['!@#$', '!@#$%'], ['aabbcc', 'abc'], ['abc', 'aabbcc']]", "gpt-4o-mini": "[['abc', 'abc'], ['abc', 'cba'], ['hello', 'loleh'], ['test', 'sett'], ['aabbcc', 'abcabc'], ['abc', 'abcd'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'A']]"}}
{"task_id": "HumanEval/55", "requirement": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"", "entry_point": "fib", "canonical_solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n", "input_output_examples": "[[[10], [1], [8]], [[55], [1], [21]]]", "starter_code": "def fib(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [5], [10], [20], [-1], [-5]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [10], [15], [20], [30], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [2], [5], [10], [20], [30]]"}}
{"task_id": "HumanEval/56", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "input_output_examples": "[[['<'], ['<>'], ['<<><>>'], ['><<>']], [[False], [True], [True], [False]]]", "starter_code": "def correct_bracketing(brackets: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['><'], ['<<>>'], ['<><><><>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<>>>>>>>>>>><']]", "qwen2.5-coder-32b-instruct": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['<><><><>'], ['<<<<>>>>'], ['><><><><'], ['<<<>>>'], ['<<<><>>>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<><>>>>>>>>>>'], ['<<<<<<<<<<>><>>>>>>>>>'], ['<<<<<<<<<<>>>><>>>>>>>'], ['<<<<<<<<<<>>>>><>>>>>>'], ['<<<<<<<<<<>>>>>><>>>>>'], ['<<<<<<<<<<>>>>>>><>>>>'], ['<<<<<<<<<<>>>>>>>><>>>'], ['<<<<<<<<<<>>>>>>>>><>>'], ['<<<<<<<<<<>>>>>>>>>><>'], ['<<<<<<<<<<>>>>>>>>>>><'], ['<<<<<<<<<<>>>>>>>>>>>>']]", "gpt-4o-mini": "[['<>'], ['<<>>'], ['<><>'], ['<<>><<'], ['<><><>'], ['><'], ['<<<<>>>>'], [''], ['<><<>'], ['<><><><>']]"}}
{"task_id": "HumanEval/57", "requirement": "from typing import List\n\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"", "entry_point": "monotonic", "canonical_solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n", "input_output_examples": "[[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]]], [[True], [False], [True]]]", "starter_code": "from typing import List\ndef monotonic(l: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 1, 1, 1, 1]], [[1, 3, 2, 4, 5]], [[10, 9, 8, 7, 6]], [[1]], [[]], [[1, 2, 2, 3, 4]], [[5, 4, 4, 3, 2]], [[1, 2, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]], [[5, 5, 5, 5]], [[10]], [[]], [[3, 2, 2, 1]], [[1, 1, 2, 3]], [[10, 9, 8, 7, 7, 6]], [[1]], [[1, 3, 2]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 1, 1, 1]], [[1, 2, 2, 3, 4]], [[4, 3, 3, 2, 1]], [[1, 3, 2, 4]], [[-5, -3, 0, 1]], [[1]], [[]], [[1, 2, 3, 2]], [[3, 2, 2, 1]]]"}}
{"task_id": "HumanEval/58", "requirement": "from typing import List\n\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    \"\"\"", "entry_point": "common", "canonical_solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n\n    return sorted(list(set(l1).intersection(set(l2))))\n\n", "input_output_examples": "[[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]]], [[[1, 5, 653]], [[2, 3]]]]", "starter_code": "from typing import List\ndef common(l1: List[int], l2: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 2, 3], [4, 5, 6]], [[1, 1, 1, 1], [1, 1, 1]], [[10, 20, 30], [30, 20, 10]], [[-1, -2, -3], [-3, -2, -1]], [[1, 2, 3, 4, 5], [3, 4, 5, 6, 7]], [[1, 2, 2, 3], [2, 3, 3, 4]]]", "qwen2.5-coder-32b-instruct": "[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[1, 2, 3], [4, 5, 6]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[10, 20, 30], [30, 20, 10]], [[1, 2, 2, 3], [2, 3, 3, 4]]]", "gpt-4o-mini": "[[[1, 2, 3], [2, 3, 4]], [[1, 1, 2, 3], [2, 3, 3, 4]], [[], [1, 2, 3]], [[1, 2, 3], []], [[-1, 0, 1], [0, 1, 1]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[1, 2, 3, 3, 4], [3, 3, 4, 5]], [[10, 20, 30], [30, 40, 50]]]"}}
{"task_id": "HumanEval/59", "requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"", "entry_point": "largest_prime_factor", "canonical_solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n", "input_output_examples": "[[[13195], [2048]], [[29], [2]]]", "starter_code": "def largest_prime_factor(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[13195], [2048], [15], [123456], [2], [100]]", "qwen2.5-coder-32b-instruct": "[[13195], [2048], [600851475143], [100], [49], [104743], [221], [987], [4096], [6857]]", "gpt-4o-mini": "[[10], [28], [91], [100], [121], [60], [130], [49], [200], [16], [77], [105], [84], [45], [39]]"}}
{"task_id": "HumanEval/60", "requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"", "entry_point": "sum_to_n", "canonical_solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n\n    return (n + 1) * n // 2\n\n", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "starter_code": "def sum_to_n(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[5], [10], [30], [100], [1], [0], [-5], [10000]]", "qwen2.5-coder-32b-instruct": "[[30], [100], [5], [10], [1], [0], [-5], [-10], [1000]]", "gpt-4o-mini": "[[0], [1], [5], [10], [100], [1000], [-5], [2], [3], [1000]]"}}
{"task_id": "HumanEval/61", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "input_output_examples": "[[['('], ['()'], ['(()())'], [')(()']], [[False], [True], [True], [False]]]", "starter_code": "def correct_bracketing(brackets: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['('], [')'], ['()'], ['(()())'], [')(()'], [''], ['((()))'], ['()()()'], ['(()'], ['())'], ['((()()())'], ['()()()())'], ['(((((())))))'], ['(()()()()()())'], ['(()()(()))']]", "qwen2.5-coder-32b-instruct": "[['('], [')'], ['()'], ['(()())'], [')(()'], ['(())'], ['((()))'], ['(()'], ['())'], [''], ['((((()))))'], ['(()))(()']]", "gpt-4o-mini": "[['()'], ['(())'], ['(()())'], ['()()'], ['(('], [')('], ['())('], ['()(()'], ['(()'], ['()()()()()()']]"}}
{"task_id": "HumanEval/62", "requirement": "from typing import List\n\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"", "entry_point": "derivative", "canonical_solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[1, 2, 3]]], [[[1, 4, 12, 20]], [[2, 6]]]]", "starter_code": "from typing import List\ndef derivative(xs: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[0]], [[7]], [[-3, -2, -1, 0, 1, 2, 3]], [[1, 0, 0, 0, 0, 1]], [[10, 0, 0, 0, 10]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[5]], [[0, 0, 0]], [[10, 0, 0, 3]], [[]], [[0]]]", "gpt-4o-mini": "[[[3, 2, 1]], [[0, 0, 0]], [[1, 0, 3, 0]], [[4]], [[1, -1, 1, -1, 1]], [[5, 3, 0, -1]], [[0]], [[10, 0, 0, 0, 0]], [[-2, 4, -6]], [[1, 2, 3, 4, 5]]]"}}
{"task_id": "HumanEval/63", "requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"", "entry_point": "fibfib", "canonical_solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n", "input_output_examples": "[[[1], [5], [8]], [[0], [4], [24]]]", "starter_code": "def fibfib(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [10], [15], [20]]"}}
{"task_id": "HumanEval/64", "requirement": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"", "entry_point": "vowels_count", "canonical_solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['abcde'], ['ACEDY']], [[2], [3]]]", "starter_code": "def vowels_count(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['abcde'], ['ACEDY'], ['hello'], ['sky'], ['rhythm'], ['aeiou'], ['y'], ['xyz'], ['quickly'], ['PYTHON'], [''], ['a'], ['e'], ['i'], ['o'], ['u'], ['y'], ['Y'], ['AeIoUy'], ['yYy'], ['hello world']]", "qwen2.5-coder-32b-instruct": "[['abcde'], ['ACEDY'], ['rhythm'], ['SYZYGY'], ['aeiou'], ['AEIOUY'], ['bcd'], [''], ['y'], ['Y'], ['quickly'], ['fly'], ['encyclopedia'], ['AeiOuY']]", "gpt-4o-mini": "[['hello'], ['aeiou'], ['sky'], ['Rhythm'], ['Umbrella'], ['xyz'], ['a simple test'], [''], ['banana'], ['pneumonoultramicroscopicsilicovolcanoconiosis'], ['y']]"}}
{"task_id": "HumanEval/65", "requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"", "entry_point": "circular_shift", "canonical_solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n", "input_output_examples": "[[[12, 1], [12, 2]], [['21'], ['12']]]", "starter_code": "def circular_shift(x: int, shift: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[12345, 1], [12345, 3], [12345, 5], [12345, 6], [12345, 0], [987654321, 2], [987654321, 9], [987654321, 10], [100, 1], [100, 2], [100, 3], [100, 4], [0, 1], [0, 0], [123, -1]]", "qwen2.5-coder-32b-instruct": "[[12, 1], [12, 2], [12345, 3], [12345, 5], [12345, 6], [987654321, 9], [987654321, 10], [5, 1], [5, 2], [0, 1], [0, 0]]", "gpt-4o-mini": "[[12345, 2], [98765, 3], [54321, 5], [123, 0], [10, 1], [4567, 4], [1, 10], [1001, 2], [99999, 6], [0, 1]]"}}
{"task_id": "HumanEval/66", "requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"", "entry_point": "digitSum", "canonical_solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n", "input_output_examples": "[[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa']], [[0], [131], [67], [69], [131], [153]]]", "starter_code": "def digitSum(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['1234!@# $'], ['ABCDEFG'], ['XYZxyz'], ['NoNumbersHere']]", "qwen2.5-coder-32b-instruct": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['HELLO'], ['12345'], ['!@#$%'], ['UpperCASE'], ['lowercase'], ['MiXeDcAsE'], ['123abcABC']]", "gpt-4o-mini": "[['A'], ['Hello World'], ['ABCD'], ['abcXYZ'], [''], ['1234'], ['!@# $%^&*()'], ['UpperCaseOnly'], ['Mixed123Characters!']]"}}
{"task_id": "HumanEval/67", "requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \"\"\"", "entry_point": "fruit_distribution", "canonical_solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "starter_code": "def fruit_distribution(s: str, n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['1 apples and 0 oranges', 10], ['0 apples and 5 oranges', 15], ['50 apples and 25 oranges', 100], ['7 apples and 8 oranges', 30]]", "qwen2.5-coder-32b-instruct": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['50 apples and 50 oranges', 150], ['1 apples and 0 oranges', 2], ['0 apples and 1 oranges', 1], ['100 apples and 100 oranges', 300]]", "gpt-4o-mini": "[['10apples5oranges', 20], ['30apples10oranges', 50], ['0apples0oranges', 0], ['15apples-5oranges', 10], ['10apples0oranges', 10], ['0apples10oranges', 10], ['100apples200oranges', 300], ['50apples50oranges', 100], ['1apple1orange', 3]]"}}
{"task_id": "HumanEval/68", "requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "entry_point": "pluck", "canonical_solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n", "input_output_examples": "[[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]]], [[[2, 1]], [[2, 1]], [[]], [[0, 1]]]]", "starter_code": "from typing import List\ndef pluck(arr: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5]], [[2, 4, 6, 8]], [[0, 0, 0]], [[10, 20, 30, 40, 50]], [[7, 9, 11]], [[6, 2, 8, 4]]]", "qwen2.5-coder-32b-instruct": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5, 7]], [[10, 20, 30, 40]], [[8, 8, 8, 8]], [[0]], [[11, 13, 17, 19, 2]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]]", "gpt-4o-mini": "[[[1, 3, 5, 7]], [[10, 5, 2, 7, 4]], [[3, 1, 2, 4, 2, 6]], [[2, 2, 2]], [[1, 3, 2, 4, 2, 6]], [[5, 1, 3]], [[0, 1, 2, 3]], [[2, 4, 6, 8]], [[1, 3, 5]], [[2]], [[]], [[0]], [[5, 10, 15, 20, 10]], [[99, 15, 25]], [[12, 12, 20, 20, 5]]]"}}
{"task_id": "HumanEval/69", "requirement": "from typing import List\n\n\ndef search(lst: List[int]) -> int:\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''", "entry_point": "search", "canonical_solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n", "input_output_examples": "[[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]]], [[2], [3], [-1]]]", "starter_code": "from typing import List\ndef search(lst: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]], [[1, 1, 1, 1]], [[2, 2, 2, 3, 3, 3, 3]], [[7, 7, 7, 7, 7, 7, 7]], [[1, 2, 3, 4, 5]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[1]], [[2, 2]], [[3, 3, 3]], [[4, 4, 4, 4]], [[5, 5, 5, 5, 5]], [[6, 6, 6, 6, 6, 6]], [[7, 7, 7, 7, 7, 7, 7]], [[8, 8, 8, 8, 8, 8, 8, 8]], [[9, 9, 9, 9, 9, 9, 9, 9, 9]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], [[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]], [[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]], [[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]]]", "qwen2.5-coder-32b-instruct": "[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]], [[1, 1, 1, 1, 1]], [[10]], [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5]], [[6, 6, 6, 6, 6, 6]], [[7, 7, 7, 7, 7, 7, 7]], [[8, 8, 8, 8, 8, 8, 8, 8]], [[9, 9, 9, 9, 9, 9, 9, 9, 9]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [[1]], [[2, 2]], [[3, 3, 3]], [[4, 4, 4, 4]], [[5, 5, 5, 5, 5]]]", "gpt-4o-mini": "[[[1, 2, 2, 3, 3, 3]], [[4, 4, 4, 4, 5, 5, 6]], [[1, 1, 2, 2, 3, 3, 3, 3]], [[1, 1, 1, 1, 1, 2, 2, 2, 2, 3]], [[5, 5, 5, 6, 6]], [[7, 7, 7, 7, 8, 8, 8, 8, 8]], [[10, 10, 10, 10, 10, 1, 1, 1, 2]], [[1]], [[10, 20, 30, 40]], [[2, 2, 2, 3, 3, 3, 0]], [[1, 1, 1, 1, 1, 1, 1]], [[100, 100, 1, 1, 1, 1, 1, 1, 1, 1]], [[3, 3, 3, 3, 3, 3, 3]], [[0, 2, 2, 2, 3, 4]], [[5, 5, 6, 6, 6, 6, 6, 7]]]"}}
{"task_id": "HumanEval/70", "requirement": "from typing import List\n\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n", "input_output_examples": "[[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]]], [[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]]]]", "starter_code": "from typing import List\ndef strange_sort_list(lst: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]], [[10]], [[7, 3, 1, 9, 2]], [[2, 2, 2, 2, 2]], [[1, 3, 5, 7, 9, 2, 4, 6, 8]], [[-1, -2, -3, -4]], [[0, 0, 0, 0]], [[100, 1, 10, 1000]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]], [[10, -1, 7, 8]], [[1]], [[3, 1, 2]], [[9, 7, 5, 3, 1]], [[2, 2, 2, 1, 1]]]", "gpt-4o-mini": "[[[1, 3, 2, 4, 5]], [[5, 1, 4, 2, 3]], [[10, -1, 2, 5, 0]], [[7, 8, 5, 4, 3, 2]], [[-2, -3, -1, -5, -4]], [[1]], [[]], [[3, 1, 2, 3, 2]]]"}}
{"task_id": "HumanEval/71", "requirement": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''", "entry_point": "triangle_area", "canonical_solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n", "input_output_examples": "[[[3, 4, 5], [1, 2, 10]], [[6.0], [-1]]]", "starter_code": "def triangle_area(a: float, b: float, c: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[3.0, 4.0, 5.0], [1.0, 2.0, 10.0], [5.0, 5.0, 5.0], [7.0, 24.0, 25.0], [0.0, 0.0, 0.0], [-1.0, 2.0, 3.0], [1.5, 2.5, 3.5], [1.0, 1.0, 2.0], [100.0, 100.0, 100.0]]", "qwen2.5-coder-32b-instruct": "[[3, 4, 5], [1, 2, 10], [5, 5, 5], [0, 0, 0], [10, 10, 20], [7, 24, 25], [8, 15, 17], [1, 1, 1.99], [1, 1, 2], [12, 5, 13]]", "gpt-4o-mini": "[[3.0, 4.0, 5.0], [5.0, 12.0, 13.0], [7.0, 24.0, 25.0], [1.0, 1.0, 1.0], [2.0, 2.0, 3.0], [10.0, 15.0, 25.0], [0.0, 5.0, 5.0], [-1.0, 2.0, 2.0], [3.5, 4.5, 5.5], [2.5, 3.0, 6.0]]"}}
{"task_id": "HumanEval/72", "requirement": "from typing import List\n\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''", "entry_point": "will_it_fly", "canonical_solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    return q == q[::-1] and sum(q) <= w\n\n", "input_output_examples": "[[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5]], [[False], [False], [True], [True]]]", "starter_code": "from typing import List\ndef will_it_fly(q: List[int], w: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 2, 1], 10], [[1, 2, 3, 4, 5], 15], [[5, 5, 5, 5], 20], [[5, 5, 5, 5], 19], [[1, 2, 1], 5], [[1, 2, 1], 3], [[1], 1], [[1], 2], [[1, 2, 2, 1], 6], [[1, 2, 2, 1], 5], [[], 0], [[], 1], [[1, 3, 1], 0]]", "qwen2.5-coder-32b-instruct": "[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5], [[1, 2, 1], 4], [[1, 2, 2, 1], 6], [[1, 2, 2, 1], 5], [[1], 1], [[1, 1], 2], [[1, 1, 1], 3], [[1, 1, 1], 2], [[5, 5, 5, 5, 5], 25], [[5, 5, 5, 5, 5], 24], [[10, 20, 30, 20, 10], 100], [[10, 20, 30, 20, 10], 99], [[1, 2, 3, 4, 5], 15], [[1, 2, 3, 4, 5], 14], [[], 0], [[], 1]]", "gpt-4o-mini": "[[[1, 2, 1], 5], [[3, 2, 3], 8], [[1, 2, 3, 4, 2, 1], 10], [[5, 5, 5], 15], [[1, 2, 3], 6], [[7, 0, 7], 14], [[10, 20, 10, 10], 50], [[1, 2, 3, 4, 5], 15], [[], 0], [[1], 1], [[1, 2, 2, 1], 4], [[3, 3, 4], 7], [[2, 2, 2, 2], 8]]"}}
{"task_id": "HumanEval/73", "requirement": "from typing import List\n\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"", "entry_point": "smallest_change", "canonical_solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n", "input_output_examples": "[[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]]], [[4], [1], [0]]]", "starter_code": "from typing import List\ndef smallest_change(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]], [[1]], [[1, 1]], [[1, 2, 2, 1]], [[1, 2, 3, 4, 5, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 4, 3, 2, 1]], [[1, 2, 1, 2, 1]], [[1, 2, 1, 3, 1]], [[1, 2, 3, 2, 3]], [[1, 2, 3, 4, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[1, 2]], [[1]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 1]], [[1, 2, 2, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[1, 2, 3, 2, 1]], [[1, 2, 2, 1]], [[1, 1, 1, 1]], [[1]], [[1, 2]], [[2, 3, 2, 4, 3, 5]], [[1, 2, 3, 4, 4, 3, 2, 1]]]"}}
{"task_id": "HumanEval/74", "requirement": "from typing import List\n\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''", "entry_point": "total_match", "canonical_solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n", "input_output_examples": "[[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']]], [[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']]]]", "starter_code": "from typing import List\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']], [['a', 'bb', 'ccc'], ['x', 'yy', 'zzz']], [['short'], ['longer', 'strings']], [['equal', 'chars'], ['same', 'length']], [['a'], ['b']], [['python'], ['java', 'c++']]]", "qwen2.5-coder-32b-instruct": "[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']], [['abc'], ['abcd']], [['a', 'b', 'c'], ['d', 'e']], [['same', 'size'], ['twin', 'pair']], [['one', 'two', 'three'], ['four', 'five']], [['short'], ['longer', 'list']]]", "gpt-4o-mini": "[[['apple', 'banana'], ['orange', 'grape']], [['a', 'b', 'c'], ['d', 'e']], [['one', 'two', 'three'], ['four']], [[], ['hello']], [['test', 'case'], ['test']], [['test', 'case'], ['']], [[''], ['']], [['single'], ['single', 'single']]]"}}
{"task_id": "HumanEval/75", "requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    \"\"\"", "entry_point": "is_multiply_prime", "canonical_solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n", "input_output_examples": "[[[30]], [[True]]]", "starter_code": "def is_multiply_prime(a: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[30], [105], [6], [14], [70], [99], [8], [2], [15], [77]]", "qwen2.5-coder-32b-instruct": "[[30], [60], [105], [2], [3], [5], [7], [1], [0], [8], [-5], [100], [77], [10], [42], [70]]", "gpt-4o-mini": "[[30], [6], [15], [1], [2], [8], [28], [87], [99]]"}}
{"task_id": "HumanEval/76", "requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \"\"\"", "entry_point": "is_simple_power", "canonical_solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "starter_code": "def is_simple_power(x: int, n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [16, 2], [27, 3], [64, 4], [0, 2], [1, 1], [9, 3], [10, 3], [100, 10], [81, 9], [256, 2], [1024, 2], [1000, 10], [625, 5], [49, 7]]", "qwen2.5-coder-32b-instruct": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [27, 3], [16, 4], [0, 2], [1, 1], [0, 0], [-8, 2], [8, -2], [9, 3], [1, 0]]", "gpt-4o-mini": "[[16, 2], [27, 3], [81, 3], [64, 4], [1, 5], [0, 2], [-8, -2], [10, 3], [8, 2], [5, 1]]"}}
{"task_id": "HumanEval/77", "requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''", "entry_point": "iscube", "canonical_solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "starter_code": "def iscube(a: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [1000], [-1000], [8], [-8], [125], [-125], [1000000], [-1000000], [123456789], [-123456789]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [125], [-125], [1000], [-1000], [1001], [-1001]]", "gpt-4o-mini": "[[1], [8], [27], [64], [0], [-1], [-8], [-27], [2], [9]]"}}
{"task_id": "HumanEval/78", "requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"", "entry_point": "hex_key", "canonical_solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n", "input_output_examples": "[[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020']], [[1], [2], [4], [6], [2]]]", "starter_code": "def hex_key(num: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], ['2F5A3C'], ['B0B1E'], ['D7A9'], ['0'], ['1'], ['F'], ['']]", "qwen2.5-coder-32b-instruct": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], [''], ['0'], ['1'], ['2'], ['3'], ['5'], ['7'], ['B'], ['D'], ['F'], ['123456789ABCDEF'], ['FFFFFFFF'], ['22222222'], ['33333333'], ['55555555'], ['77777777'], ['BBBBBBBB'], ['DDDDDDDD']]", "gpt-4o-mini": "[[''], ['0123456789ABCDEF'], ['237B5D'], ['AFCDE'], ['22357'], ['123456789'], ['BBCCDD'], ['FFF'], ['2233FF'], ['2A3B5C7D']]"}}
{"task_id": "HumanEval/79", "requirement": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"", "entry_point": "decimal_to_binary", "canonical_solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n", "input_output_examples": "[[[15], [32]], [['db1111db'], ['db100000db']]]", "starter_code": "def decimal_to_binary(decimal: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [15], [32], [255], [1024], [-1], [-15]]", "qwen2.5-coder-32b-instruct": "[[15], [32], [0], [1], [255], [1024], [-1], [1000000]]", "gpt-4o-mini": "[[0], [1], [2], [10], [255], [256], [1024], [-1], [9999]]"}}
{"task_id": "HumanEval/80", "requirement": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"", "entry_point": "is_happy", "canonical_solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n", "input_output_examples": "[[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy']], [[False], [False], [True], [False], [True], [False]]]", "starter_code": "def is_happy(s: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy'], ['abcdef'], ['aabcc'], ['xyzxyz'], ['xxyz'], ['abcabc'], ['aaa'], ['abcde'], ['aabbcc'], ['ababab'], ['xyzxy'], ['abacaba'], ['abcdefgh']]", "qwen2.5-coder-32b-instruct": "[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy'], ['abc'], ['abac'], ['xyz'], ['xyzz'], ['abcdefg'], ['aabbcc'], ['abcabc'], ['ababab'], ['aaaaaa'], ['abcba'], ['abccba']]", "gpt-4o-mini": "[['abc'], ['abcd'], ['aabbcc'], ['xyz'], ['abca'], ['a'], ['aa'], ['aabb'], ['abcdef'], ['abcdefgh']]"}}
{"task_id": "HumanEval/81", "requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"", "entry_point": "numerical_letter_grade", "canonical_solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n", "input_output_examples": "[[[[4.0, 3, 1.7, 2, 3.5]]], [[['A+', 'B', 'C-', 'C', 'A-']]]]", "starter_code": "from typing import List\ndef numerical_letter_grade(grades: List[float]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.5]], [[0.0]], [[4.0, 3.0, 1.7, 2.0, 3.5]], [[0.1, 1.0, 2.3, 3.7, 4.0]], [[0.0, 0.0, 0.0, 0.0, 0.0]], [[1.3, 2.7, 3.3, 4.0, 0.7]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.8]], [[0.5]], [[0.0]], [[3.7]], [[3.3]], [[2.7]], [[2.3]], [[1.7]], [[1.3]], [[0.7]], [[0.1]], [[4.0, 3, 1.7, 2, 3.5]], [[]], [[5.0]], [[-0.1]]]", "gpt-4o-mini": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.8]], [[2.4]], [[2.1]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.5]], [[0.0]], [[3.7, 4.0, 2.5, 1.2]], [[2.0, 0.0]], [[3.3, 3.0, 1.0, 0.7]]]"}}
{"task_id": "HumanEval/82", "requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"", "entry_point": "prime_length", "canonical_solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n", "input_output_examples": "[[['Hello'], ['abcdcba'], ['kittens'], ['orange']], [[True], [True], [True], [False]]]", "starter_code": "def prime_length(string: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], ['aa'], [''], ['abcdefghijklmno'], ['abcdefghijklmnopqrstuvwxyz'], ['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']]", "qwen2.5-coder-32b-instruct": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], [''], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij'], ['abcdefghijk'], ['abcdefghijkl'], ['abcdefghijklm'], ['abcdefghijklmn'], ['abcdefghijklmnop'], ['abcdefghijklmnopq'], ['abcdefghijklmnopqr'], ['abcdefghijklmnopqrst']]", "gpt-4o-mini": "[[''], ['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefghijk'], ['abcdefghijklmno'], ['abcdefghijklmnopqrstuvwxyz']]"}}
{"task_id": "HumanEval/83", "requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "entry_point": "starts_one_ends", "canonical_solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n\n    if n == 1: return 1\n    return 18 * 10 ** (n - 2)\n\n", "input_output_examples": "[[], []]", "starter_code": "def starts_one_ends(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [9], [10], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [9], [10], [20]]", "gpt-4o-mini": "[[1], [10], [100], [5], [6], [7]]"}}
{"task_id": "HumanEval/84", "requirement": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "entry_point": "solve", "canonical_solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n", "input_output_examples": "[[[1000], [150], [147]], [['1'], ['110'], ['1100']]]", "starter_code": "def solve(N: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[1000], [150], [147], [0], [1], [9999], [12345], [10], [101], [10000]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [10], [150], [147], [1000], [9999], [10000]]", "gpt-4o-mini": "[[0], [1], [2], [10], [255], [10000], [9999]]"}}
{"task_id": "HumanEval/85", "requirement": "from typing import List\n\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \"\"\"", "entry_point": "add", "canonical_solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n", "input_output_examples": "[[[[4, 2, 6, 7]]], [[2]]]", "starter_code": "from typing import List\ndef add(lst: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[4, 2, 6, 7]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 16]], [[100, 101, 102, 103, 104]], [[1]], [[2]]]", "qwen2.5-coder-32b-instruct": "[[[4, 2, 6, 7]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[10, 15, 20, 25, 30, 35]], [[0, 0, 0, 0]], [[1, 2]], [[2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "gpt-4o-mini": "[[[2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6]], [[0, 1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8, 10]], [[1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4]], [[7, 8, 9, 10, 11, 12]], [[2]], [[1, 3, 5]], [[10, 20, 30, 40, 50]]]"}}
{"task_id": "HumanEval/86", "requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"", "entry_point": "anti_shuffle", "canonical_solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n", "input_output_examples": "[[['Hi'], ['hello'], ['Hello World!!!']], [['Hi'], ['ehllo'], ['Hello !!!Wdlor']]]", "starter_code": "def anti_shuffle(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Hi'], ['hello'], ['Hello World!!!'], ['a b c d e'], ['123 456 789'], ['!@# $%^ &*('], ['   multiple   spaces   '], [''], ['z y x w v u t s r q p o n m l k j i h g f e d c b a'], ['The quick brown fox jumps over the lazy dog']]", "qwen2.5-coder-32b-instruct": "[['Hi'], ['hello'], ['Hello World!!!'], ['a b c'], ['cba fed'], ['A quick brown fox'], ['123 456'], ['!@# $%^'], ['single'], [' '], ['']]", "gpt-4o-mini": "[['hello world'], ['the quick brown fox'], ['  leading spaces'], ['trailing spaces    '], ['   multiple   spaces   '], [''], ['singleword'], ['a b c d e'], ['!@#$%^&*()'], ['The Quick Brown Fox'], ['123 456 789']]"}}
{"task_id": "HumanEval/87", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"", "entry_point": "get_row", "canonical_solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n", "input_output_examples": "[[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3]], [[[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]], [[]], [[(2, 2)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1], [[[2, 3, 2], [3, 2, 3], [2, 3, 2]], 2], [[[5, 5, 5], [5, 5, 5]], 5], [[[10], [20], [30]], 10], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], [[[1, 2, 3, 4], [4, 3, 2, 1]], 4]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3], [[[7, 8, 9], [7, 8, 9], [7, 8, 9]], 7], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1], [[[1, 2, 3], [3, 2, 1], [2, 3, 1]], 1], [[[1], [], [1, 1]], 1]]", "gpt-4o-mini": "[[[[], []], 1], [[[1, 2, 3], [4, 5, 6]], 5], [[[1, 2], [3, 4, 2], [5]], 2], [[[1, 2, 2], [3, 2], [2]], 2], [[[1], [2], [3]], 4], [[[10, 20], [30, 10, 40, 10], [50, 10]], 10], [[[1, 2, 3], [], [4, 5, 6]], 1], [[[1, 2, 3, 1], [1, 1, 1]], 1]]"}}
{"task_id": "HumanEval/88", "requirement": "from typing import List\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"", "entry_point": "sort_array", "canonical_solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n", "input_output_examples": "[[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]]], [[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]]]]", "starter_code": "from typing import List\ndef sort_array(array: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[0, 0, 0, 0, 0]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[100, 200, 300, 400, 500]]]", "qwen2.5-coder-32b-instruct": "[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[1, 3, 5, 7, 9]], [[10, 8, 6, 4, 2, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[0, 0, 0, 0]], [[1, 1, 1, 1]], [[1, 2]], [[2, 1]]]", "gpt-4o-mini": "[[[5, 3, 8, 1, 2]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[0, 1, 0, 1, 0]], [[10, 20, 30, 40, 50]], [[1]], [[4, 3]], [[-1, 2, 0, 3, -2]], [[-5, -2, 0, 2, 3]], [[7, 0, 9, 4]], [[100, 200, 300, 400]]]"}}
{"task_id": "HumanEval/89", "requirement": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"", "entry_point": "encrypt", "canonical_solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n", "input_output_examples": "[[['hi'], ['asdfghjkl'], ['gf'], ['et']], [['lm'], ['ewhjklnop'], ['kj'], ['ix']]]", "starter_code": "def encrypt(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], ['a'], ['z'], ['abc'], ['xyz'], [''], ['ABCDEF'], ['123'], ['!@#']]", "qwen2.5-coder-32b-instruct": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], ['xyz'], ['abc'], [' '], ['!@#'], ['HelloWorld'], ['Zebra'], ['quickbrownfox'], ['']]", "gpt-4o-mini": "[['abc'], ['xyz'], ['hello'], ['xyz'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['abcdefghijklmnopqrstuvwxyz'], [''], ['A'], ['Za'], ['Hello World!']]"}}
{"task_id": "HumanEval/90", "requirement": "from typing import List\n\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"", "entry_point": "next_smallest", "canonical_solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n", "input_output_examples": "[[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]]], [[2], [2], [None], [None]]]", "starter_code": "from typing import List\ndef next_smallest(lst: List[int]) -> Optional[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[10, 20, 30, 40]], [[5, 5, 5, 5]], [[2, 1]], [[1]], [[0, 0, 0, 0]], [[-1, -2, -3, -4]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[2, 2, 3, 1, 4]], [[10]], [[1, 2, 2, 3, 3, 4, 4]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0, 0]], [[100, 90, 90, 80, 70, 60]]]", "gpt-4o-mini": "[[[3, 1, 2]], [[5, 1, 5, 2, 2]], [[10, 10, 10, 10]], [[-1, -2, -3, -4]], [[7]], [[]], [[5, 5]], [[1, 3, 2, 4, 0]], [[100, 1, 99, 1000]]]"}}
{"task_id": "HumanEval/91", "requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"", "entry_point": "is_bored", "canonical_solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n", "input_output_examples": "[[['Hello world'], ['The sky is blue. The sun is shining. I love this weather']], [[0], [1]]]", "starter_code": "def is_bored(S: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['Hello world'], ['The sky is blue. The sun is shining. I love this weather'], ['I am bored. This is fun!'], ['I think, therefore I am.'], ['I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.'], ['I am happy. I am sad. I am excited. I am tired.'], ['This is a test. I wonder if it works? I hope so!'], ['I'], ['I.'], ['I?'], ['I!'], ['I am the walrus. I am the eggman. I am the walrus.'], ['No boredom here. Just a regular sentence.'], ['I am. I am not. I am. I am not.'], ['I am the one who knocks. I am the danger.'], ['I am. I am. I am. I am. I am. I am. I am. I am.'], ['I am the beginning. I am the end. I am the one who will always be.'], ['I am the alpha and the omega. I am the beginning and the end.'], ['I am the one who is bored. I am the one who is not bored.'], ['I am the one who is bored. I am the one who is not bored. I am the one who is bored.']]", "qwen2.5-coder-32b-instruct": "[['Hello world'], ['The sky is blue. The sun is shining. I love this weather'], ['I am bored. Are you? I certainly am!'], ['I. I! I?'], ['I am here. You are there. They are everywhere.'], ['No sentences start with I here.'], ['I'], [''], ['I am so bored today. I think. I really am!'], ['This is a test. It should return zero.']]", "gpt-4o-mini": "[['I am bored. What should I do?'], ['I love programming! Do you love it too?'], ['I think I will take a break. I am tired.'], ['This is a test sentence.'], ['Are you there? I hope so! I really need to talk.'], ['I. I. I.'], ['I am happy! You are bored?'], [''], ['This is a test without boredom.'], ['I want ice cream!']]"}}
{"task_id": "HumanEval/92", "requirement": "def any_int(x: int, y: int, z: int) -> bool:\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''", "entry_point": "any_int", "canonical_solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n", "input_output_examples": "[[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2]], [[True], [False], [True], [False]]]", "starter_code": "def any_int(x: int, y: int, z: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2], [0, 0, 0], [-1, -2, -3], [100, 50, 50], [1, 2, 3.5], [10, 20, 30], [-5, 5, 0]]", "qwen2.5-coder-32b-instruct": "[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3, -2, 5], [0, 0, 0], [-1, -1, -2], [100, 50, 50], [100, 51, 49], [3, 2, 5], [3, 2, 8], [3.6, -2.2, 2], [3, 2.0, 5], [3, 2, 5.0], [3.0, 2, 5], [3, 2, 5], [1, 2, 3], [3, 1, 2], [2, 3, 1]]", "gpt-4o-mini": "[[1, 2, 3], [2, 3, 5], [10, 5, 5], [0, 0, 0], [-1, -2, -3], [5, 1, 6], [100, 200, 300], [-10, -5, -5], [2, 2, 4], [2, 2, 3]]"}}
{"task_id": "HumanEval/93", "requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"", "entry_point": "encode", "canonical_solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n", "input_output_examples": "[[['test'], ['This is a message']], [['TGST'], ['tHKS KS C MGSSCGG']]]", "starter_code": "def encode(message: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['test'], ['This is a message'], ['HELLO WORLD'], ['aEiOu'], ['bCdFgH'], ['123!@#'], [''], ['AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz']]", "qwen2.5-coder-32b-instruct": "[['test'], ['This is a message'], ['HELLO'], ['world'], ['AEIOU'], ['aeiou'], ['Python'], ['Encode THIS'], ['a'], ['A'], ['']]", "gpt-4o-mini": "[['hello'], ['HELLO'], ['AEIOU'], ['xyz'], ['Python Programming'], ['abc'], ['a b c d e f g h i j k l m n o p q r s t u v w x y z'], ['A quick brown fox jumps over the lazy dog']]"}}
{"task_id": "HumanEval/94", "requirement": "from typing import List\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"", "entry_point": "skjkasdkd", "canonical_solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n", "input_output_examples": "[[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]]], [[10], [25], [13], [11], [3], [7]]]", "starter_code": "from typing import List\ndef skjkasdkd(lst: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[]], [[0, 0, 0, 0, 0]], [[1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2]], [[3, 5, 7, 11, 13]], [[4, 6, 8, 9, 10]], [[100, 200, 300, 400, 500]], [[997, 991, 983, 977, 971]]]", "qwen2.5-coder-32b-instruct": "[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], [[4, 6, 8, 9, 10, 12, 14, 15, 16, 18]], [[29]], [[1]], [[]], [[181]], [[2323]]]", "gpt-4o-mini": "[[[11, 4, 7, 9, 2]], [[15, 3, 29, 12]], [[1, 1, 1]], [[17, 23, 31]], [[4, 6, 8, 10]], [[19, 22, 25, 2]], [[-3, -5, -7]], [[53]], [[0, 1, 2, 3, 4, 5]], [[97, 89, 83, 79]]]"}}
{"task_id": "HumanEval/95", "requirement": "from typing import Dict\n\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"", "entry_point": "check_dict_case", "canonical_solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n", "input_output_examples": "[[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}]], [[True], [False], [False], [False], [True]]]", "starter_code": "from typing import Dict\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{}], [{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}], [{'KEY1': 'value1', 'KEY2': 'value2', 'KEY3': 'value3'}], [{'Key1': 'value1', 'key2': 'value2', 'KEY3': 'value3'}], [{'key': 'value', 1: 'one'}]]", "qwen2.5-coder-32b-instruct": "[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{}], [{'ALLUPPER': 'YES', 'SECOND': 'VALUE'}], [{'alllower': 'yes', 'second': 'value'}], [{'Mixed': 'Case', 'another': 'Key'}], [{'single': 'key'}], [{'SINGLE': 'KEY'}]]", "gpt-4o-mini": "[[{'key1': 1, 'key2': 2}], [{'KEY1': 1, 'KEY2': 2}], [{'key1': 1, 'KEY2': 2}], [{'key': 1, 'another_key': 2}], [{'KEY': 1, 'ANOTHER_KEY': 2}], [{'KEY': 1, 'another_key': 2}], [{}], [{'key1': 1}], [{'KEY1': 1}], [{'key1': 1, 'key2': 2, 'key3': 3}], [{'KEY1': 1, 'KEY2': 2, 'KEY3': 3}]]"}}
{"task_id": "HumanEval/96", "requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"", "entry_point": "count_up_to", "canonical_solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n", "input_output_examples": "[[[5], [11], [0], [20], [1], [18]], [[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]]]]", "starter_code": "from typing import List\ndef count_up_to(n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[5], [11], [0], [20], [1], [18], [2], [3], [7], [100]]", "qwen2.5-coder-32b-instruct": "[[5], [11], [0], [20], [1], [18], [2], [100], [3], [4]]", "gpt-4o-mini": "[[0], [1], [2], [10], [15], [20], [50]]"}}
{"task_id": "HumanEval/97", "requirement": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"", "entry_point": "multiply", "canonical_solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n", "input_output_examples": "[[[148, 412], [19, 28], [2020, 1851], [14, -15]], [[16], [72], [0], [20]]]", "starter_code": "def multiply(a: int, b: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[148, 412], [19, 28], [2020, 1851], [14, -15], [0, 123], [123, 0], [9, 9], [-9, -9], [-123, 456], [100, 100]]", "qwen2.5-coder-32b-instruct": "[[148, 412], [19, 28], [2020, 1851], [14, -15], [-123, -456], [0, 789], [789, 0], [0, 0], [5, 9], [10, 10]]", "gpt-4o-mini": "[[2, 3], [7, 9], [5, 6], [0, 8], [10, 14], [21, 19], [47, 58], [-1, 3], [4, -6], [100, 200], [99, 99], [15, 30]]"}}
{"task_id": "HumanEval/98", "requirement": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"", "entry_point": "count_upper", "canonical_solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['aBCdEf'], ['abcdefg'], ['dBBE']], [[1], [0], [0]]]", "starter_code": "def count_upper(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['aBCdEf'], ['abcdefg'], ['dBBE'], ['AeIoU'], ['aEiOu'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], [''], ['12345'], ['!@#$%^&*()'], ['AaAaAa'], ['BbBbBb'], ['CcCcCc'], ['DdDdDd'], ['EeEeEe']]", "qwen2.5-coder-32b-instruct": "[['aBCdEf'], ['abcdefg'], ['dBBE'], ['AEIOU'], ['aeiou'], ['AeIoU'], [''], ['B'], ['b'], ['AbEcIdOf']]", "gpt-4o-mini": "[['AEIOU'], ['aeiou'], ['AbEcIdOfU'], ['AeiOu'], [''], ['1234AEIOU'], ['A1E2I3O4U'], ['ABCdefGHI']]"}}
{"task_id": "HumanEval/99", "requirement": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero.\n    '''", "entry_point": "closest_integer", "canonical_solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n", "input_output_examples": "[[['10'], ['15.3'], ['14.5'], ['-14.5']], [[10], [15], [15], [-15]]]", "starter_code": "def closest_integer(value: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0'], ['0.4'], ['-0.4'], ['-0.5'], ['0.5'], ['999.999'], ['-999.999'], ['123.456'], ['-123.456'], ['1000000000.000000001'], ['-1000000000.000000001']]", "qwen2.5-coder-32b-instruct": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0'], ['0.5'], ['-0.5'], ['2.4'], ['-2.4'], ['99.9'], ['-99.9'], ['1e3'], ['-1e3'], ['1.23456789'], ['-1.23456789']]", "gpt-4o-mini": "[['3.2'], ['-3.2'], ['5.5'], ['-5.5'], ['0'], ['2.7'], ['-2.7'], ['4.0'], ['-4.0'], ['8.9999'], ['-8.9999'], ['3.5'], ['-3.5'], ['-0.5']]"}}
{"task_id": "HumanEval/100", "requirement": "from typing import List\n\n\ndef make_a_pile(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"", "entry_point": "make_a_pile", "canonical_solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n\n    ans, num = [], n\n    for _ in range(n):\n        ans.append(num)\n        num += 2\n    return ans\n\n", "input_output_examples": "[[[3]], [[[3, 5, 7]]]]", "starter_code": "from typing import List\ndef make_a_pile(n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[3], [4], [1], [10], [0], [-5]]", "qwen2.5-coder-32b-instruct": "[[3], [4], [1], [2], [0], [-5]]", "gpt-4o-mini": "[[1], [2], [3], [5], [10], [15], [20], [100]]"}}
{"task_id": "HumanEval/101", "requirement": "from typing import List\n\n\ndef words_string(s: str) -> List[str]:\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \"\"\"", "entry_point": "words_string", "canonical_solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n", "input_output_examples": "[[['Hi, my name is John'], ['One, two, three, four, five, six']], [[['Hi', 'my', 'name', 'is', 'John']], [['One', 'two', 'three', 'four', 'five', 'six']]]]", "starter_code": "from typing import List\ndef words_string(s: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['Hi, my name is John'], ['One, two, three, four, five, six'], ['apple, banana, cherry'], ['This is a test'], ['SingleWord'], ['   Leading spaces, trailing spaces   '], [',,Multiple,,Commas,,,'], ['   '], [''], ['Mixed   ,  Spaces ,And, Commas']]", "qwen2.5-coder-32b-instruct": "[['Hi, my name is John'], ['One, two, three, four, five, six'], ['Hello,world,this,is,a,test'], ['singleword'], ['   leading and trailing spaces   '], [''], ['multiple,,,commas,,,'], ['spaces    and    multiple    spaces'], ['Mixed,Case,And,Spaces']]", "gpt-4o-mini": "[['apple,banana,cherry'], ['one two three'], ['  leading and trailing spaces  '], ['singleword'], [''], ['word1,word2, word3, word4'], ['a,b,c,d,e'], ['multiple    spaces between'], ['words,with,mixed delimiters  and spaces']]"}}
{"task_id": "HumanEval/102", "requirement": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"", "entry_point": "choose_num", "canonical_solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n", "input_output_examples": "[[[12, 15], [13, 12]], [[14], [-1]]]", "starter_code": "def choose_num(x: int, y: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[12, 15], [13, 12], [10, 10], [11, 11], [1, 3], [2, 2], [100, 105], [99, 101], [0, 0], [0, 1]]", "qwen2.5-coder-32b-instruct": "[[12, 15], [13, 12], [8, 10], [7, 7], [20, 20], [1, 1], [0, 0], [2, 5], [10, 20], [15, 15], [22, 22], [21, 21], [100, 200], [99, 100]]", "gpt-4o-mini": "[[4, 10], [5, 15], [2, 2], [1, 3], [10, 10], [3, 3], [1, 1], [-5, 0], [0, 10], [8, 7]]"}}
{"task_id": "HumanEval/103", "requirement": "from typing import Union\n\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"", "entry_point": "rounded_avg", "canonical_solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n", "input_output_examples": "[[[1, 5], [7, 5], [10, 20], [20, 33]], [['0b11'], [-1], ['0b1111'], ['0b11010']]]", "starter_code": "from typing import Union\ndef rounded_avg(n: int, m: int) -> Union[str, int]:", "llm_generated_inputs": {"deepseek-v3": "[[1, 5], [7, 5], [10, 20], [20, 33], [0, 0], [1, 1], [-1, 1], [100, 200], [999, 1001], [15, 15]]", "qwen2.5-coder-32b-instruct": "[[1, 5], [7, 5], [10, 20], [20, 33], [1, 1], [0, 0], [-1, 5], [5, -1], [100, 200], [999, 1000]]", "gpt-4o-mini": "[[1, 5], [10, 10], [2, 8], [0, 9], [5, 2], [100, 200], [1, 1], [15, 15], [20, 25], [3, 3]]"}}
{"task_id": "HumanEval/104", "requirement": "from typing import List\n\n\ndef unique_digits(x: List[int]) -> List[int]:\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"", "entry_point": "unique_digits", "canonical_solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n", "input_output_examples": "[[[[15, 33, 1422, 1]], [[152, 323, 1422, 10]]], [[[1, 15, 33]], [[]]]]", "starter_code": "from typing import List\ndef unique_digits(x: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[15, 33, 1422, 1]], [[152, 323, 1422, 10]], [[1, 3, 5, 7, 9]], [[22, 44, 66, 88]], [[13579, 2468, 97531, 8642]], [[]], [[111, 1111, 11111]], [[123, 456, 789]], [[2, 4, 6, 8]], [[13, 57, 91, 24]]]", "qwen2.5-coder-32b-instruct": "[[[15, 33, 1422, 1]], [[152, 323, 1422, 10]], [[111, 357, 999, 2468]], [[2, 4, 6, 8]], [[13579, 24680, 97531, 86420]], [[]], [[1111, 2222, 3333, 4444]], [[123456789, 987654321, 135792468]]]", "gpt-4o-mini": "[[[1, 3, 5, 7, 9]], [[12, 34, 56, 78]], [[11, 13, 15, 19, 21]], [[0, 2, 4, 6, 8]], [[5, 7, 9, 11, 13, 15]], [[22, 33, 44, 55]], [[10, 20, 30]], [[119, 30, 111]]]"}}
{"task_id": "HumanEval/105", "requirement": "from typing import List\n\n\ndef by_length(arr: List[int]) -> List[str]:\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    Constraints:\n    - The input array may contain integers of any value.\n    - Only integers between 1 and 9 (inclusive) should be processed.\n\n    Notes:\n    - Skip numbers outside the range of 1 to 9.\n    - The final output should be the names of the digits in reversed order of the sorted valid numbers.\n    - If the input array is empty, the returned result should also be an empty array.\n    \"\"\"", "entry_point": "by_length", "canonical_solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n", "input_output_examples": "[[[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]]], [[['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']], [[]], [['One']]]]", "starter_code": "from typing import List\ndef by_length(arr: List[int]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[10, 11, 12]], [[1, 2, 3, 10, 4, 5]], [[0, 0, 0]], [[1, 1, 1, 1]]]", "qwen2.5-coder-32b-instruct": "[[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]], [[9, 7, 6, 5, 4, 3, 2, 1]], [[10, 11, 12, 13]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[5, 5, 5, 5, 5]], [[3, 3, 3, 2, 2, 1, 1, 1]], [[9]], [[0]]]", "gpt-4o-mini": "[[[]], [[1, 2, 3]], [[5, 4, 3, 2, 1]], [[9, 8, 7, 6, 5]], [[1, 3, 5, 7, 9]], [[10, -1, 0, 1, 5, 4]], [[2, 3, 11, 5, -10, 6]], [[3, 3, 3]], [[8, 8, 7, 1]], [[-5, -3, -1, 0]], [[1, 2, 3, 9, 8, 7, 6, 5, 4]], [[4, 2, 0, 10, -3]], [[9, 1, 4, 6, 8, 2]], [[5, 5, 5, 5]]]"}}
{"task_id": "HumanEval/106", "requirement": "from typing import List\n\n\ndef f(n: int) -> List[int]:\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \"\"\"", "entry_point": "f", "canonical_solution": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n", "input_output_examples": "[[[5]], [[[1, 2, 6, 24, 15]]]]", "starter_code": "from typing import List\ndef f(n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [6], [0], [10]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [10]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [20]]"}}
{"task_id": "HumanEval/107", "requirement": "from typing import Tuple\n\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "entry_point": "even_odd_palindrome", "canonical_solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n", "input_output_examples": "[[[3], [12]], [[(1, 2)], [(4, 6)]]]", "starter_code": "from typing import Tuple\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [12], [100], [101], [999], [1000], [500], [123], [456], [789], [111], [222], [333], [987], [654], [321], [13]]", "qwen2.5-coder-32b-instruct": "[[3], [12], [1], [2], [10], [100], [1000], [9], [11], [22]]", "gpt-4o-mini": "[[1], [10], [100], [200], [500], [999], [1000]]"}}
{"task_id": "HumanEval/108", "requirement": "from typing import List\n\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    \"\"\"", "entry_point": "count_nums", "canonical_solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n", "input_output_examples": "[[[[]], [[-1, 11, -11]], [[1, 1, 2]]], [[0], [1], [3]]]", "starter_code": "from typing import List\ndef count_nums(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-123, 456, -789]], [[10, -20, 30, -40, 50]], [[123, -456, 789, 0, -123]], [[111, 222, 333, -444, -555]]]", "qwen2.5-coder-32b-instruct": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-10, 10, -100, 100]], [[999, -999, 1001, -1001]], [[123, 456, 789]], [[-123, -456, -789]], [[10, -10, 20, -20]], [[5, -5, 15, -15, 25, -25]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[10, -10, 20, -20]], [[0, 0, 0, 0]], [[15, -15, 25, -25, -31]], [[-101, 200, 0, 5]], [[9, 18, 27, -36]], [[-9, -18, 0]], [[111, 222, -333]]]"}}
{"task_id": "HumanEval/109", "requirement": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"", "entry_point": "move_one_ball", "canonical_solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n", "input_output_examples": "[[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]]], [[True], [False]]]", "starter_code": "from typing import List\ndef move_one_ball(arr: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[]], [[1]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[4, 5, 1, 2, 3]], [[5, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[1]], [[]], [[2, 1]], [[1, 3, 2]], [[4, 3, 2, 1]]]", "gpt-4o-mini": "[[[]], [[3]], [[5, 1, 2, 3, 4]], [[4, 5, 1, 2, 3]], [[1, 2, 3, 4, 5]], [[2, 3, 4, 5, 1]], [[3, 5, 1]], [[10, 20, 30, 40]], [[40, 10, 20, 30]], [[7, 8, 9, 10, 11, 12]], [[12, 7, 8, 9, 10, 11]], [[2, 2, 3]], [[1]]]"}}
{"task_id": "HumanEval/110", "requirement": "from typing import List\n\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    It is assumed that the input lists will be non-empty.\n    \"\"\"", "entry_point": "exchange", "canonical_solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n", "input_output_examples": "[[[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]]], [['YES'], ['NO']]]", "starter_code": "from typing import List\ndef exchange(lst1: List[int], lst2: List[int]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]], [[2, 4, 6], [1, 3, 5]], [[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [1, 3, 5]], [[2, 4, 6], [2, 4, 6]], [[1, 2, 3], [4, 5, 6]], [[1, 3, 5], [2, 4, 6, 8]], [[1, 3, 5, 7], [2, 4, 6]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[1], [2]], [[1], [1]], [[2], [1]], [[2], [2]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]], [[1, 3, 5], [2, 4, 6]], [[2, 4, 6], [1, 3, 5]], [[1, 3, 5], [7, 9, 11]], [[1, 3, 5], [2, 2, 2]], [[1], [2]], [[1], [1]], [[2, 4, 6, 8], [1, 3, 5, 7]], [[1, 1, 1, 1], [2, 2, 2, 2]]]", "gpt-4o-mini": "[[[1, 3, 5], [2, 4, 6]], [[1, 3, 5], [1, 2, 4]], [[2, 4, 6], [1, 3, 5]], [[2, 4, 6], [2, 4, 6]], [[3, 5, 7], [2, 2, 2]], [[1, 2, 3], [2, 2, 2]], [[2, 2, 2], [1, 5, 3]], [[1, 1, 1], [4, 4, 4]], [[0, 2, 4], [5, 7, 9]], [[1], [2]], [[3], [4]]]"}}
{"task_id": "HumanEval/111", "requirement": "from typing import Dict\n\n\ndef histogram(test: str) -> Dict[str, int]:\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"", "entry_point": "histogram", "canonical_solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n", "input_output_examples": "[[['a b c'], ['a b b a'], ['a b c a b'], ['b b b b a'], ['']], [[{'a': 1, 'b': 1, 'c': 1}], [{'a': 2, 'b': 2}], [{'a': 2, 'b': 2}], [{'b': 4}], [{}]]]", "starter_code": "from typing import Dict\ndef histogram(test: str) -> Dict[str, int]:", "llm_generated_inputs": {"deepseek-v3": "[['a b c'], ['a b b a'], ['a b c a b'], ['b b b b a'], [''], ['a'], ['a a a a a'], ['x y z x y z'], ['z z z y y x'], ['a b c d e f g h i j k l m n o p q r s t u v w x y z'], ['a a a b b b c c c d d d e e e']]", "qwen2.5-coder-32b-instruct": "[['a b c'], ['a b b a'], ['a b c a b'], ['b b b b a'], [''], ['a'], ['a a a a'], ['a b c d e f g h i j k l m n o p q r s t u v w x y z'], ['a a b b c c d d e e f f g g h h i i j j k k l l m m n n o o p p q q r r s s t t u u v v w w x x y y z z']]", "gpt-4o-mini": "[['a b c a'], ['x y z x y x'], ['d e f g h i j k l m n o p q r s t u v w x y z'], ['a a b b c c'], ['z z a a z z'], [''], ['a'], ['b c b c b c']]"}}
{"task_id": "HumanEval/112", "requirement": "from typing import Tuple\n\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"", "entry_point": "reverse_delete", "canonical_solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n", "input_output_examples": "[[['abcde', 'ae'], ['abcdef', 'b'], ['abcdedcba', 'ab']], [[('bcd', False)], [('acdef', False)], [('cdedc', True)]]]", "starter_code": "from typing import Tuple\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:", "llm_generated_inputs": {"deepseek-v3": "[['abcde', 'ae'], ['abcdef', 'b'], ['abcdedcba', 'ab'], ['racecar', 'r'], ['hello', 'l'], ['12321', '2'], ['aabbcc', 'abc'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'a'], ['aaaa', 'a'], ['ababab', 'ab'], ['123454321', '5'], ['123454321', '123']]", "qwen2.5-coder-32b-instruct": "[['abcde', 'ae'], ['abcdef', 'b'], ['abcdedcba', 'ab'], ['', ''], ['a', ''], ['', 'a'], ['racecar', 'xyz'], ['racecar', 'r'], ['noon', 'n'], ['palindrome', 'aeiou'], ['level', 'l'], ['deified', 'd'], ['rotor', 'o'], ['redder', 'r'], ['repaper', 'p'], ['deed', 'd']]", "gpt-4o-mini": "[['racecar', 'r'], ['hello world', 'lo'], ['abcdef', 'xyz'], ['A man, a plan, a canal, Panama', ' '], ['', 'abc'], ['abcd', 'd'], ['madam', 'm'], ['noon', 'n'], ['abba', 'a'], ['12321', '123']]"}}
{"task_id": "HumanEval/113", "requirement": "from typing import List\n\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"", "entry_point": "odd_count", "canonical_solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n", "input_output_examples": "[[[['1234567']], [['3', '11111111']]], [[['the number of odd elements 4n the str4ng 4 of the 4nput.']], [['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']]]]", "starter_code": "from typing import List\ndef odd_count(lst: List[str]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[['1234567']], [['3', '11111111']], [['2468']], [['13579']], [['']], [['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']], [['123', '456', '789']], [['111', '222', '333', '444', '555']], [['00000', '11111', '22222', '33333', '44444', '55555']], [['9876543210']]]", "qwen2.5-coder-32b-instruct": "[[['1234567']], [['3', '11111111']], [['24680']], [['13579']], [['']], [['0']], [['1']], [['11', '22', '33', '44', '55']], [['123', '456', '789']]]", "gpt-4o-mini": "[[['12345']], [['24680']], [['13579']], [['246', '135']], [['00000']], [['1', '23', '456', '789']], [['9876543210', '1122334455']], [['']], [['11111']], [['22222']]]"}}
{"task_id": "HumanEval/114", "requirement": "from typing import List\n\n\ndef minSubArraySum(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"", "entry_point": "minSubArraySum", "canonical_solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n", "input_output_examples": "[[[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]]], [[1], [-6]]]", "starter_code": "from typing import List\ndef minSubArraySum(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]], [[1, 2, 3, 4, 5]], [[-1, 2, -3, 4, -5]], [[0, 0, 0, 0]], [[1]], [[-1]], [[5, -2, 3, -1, 2]], [[-5, -4, -3, -2, -1]], [[10, -20, 30, -40, 50]]]", "qwen2.5-coder-32b-instruct": "[[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]], [[1, 2, 3, -6, 4]], [[0, 0, 0, 0]], [[5]], [[-1]], [[100, -1, 100, -1, 100]], [[]], [[1, -1, 1, -1, 1, -1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[-1, 2, -3, 4, -5]], [[3, -2, -1, 4, -5]], [[0, 0, 0]], [[10]], [[-7, 5, 7, -1, -6, 3]], [[2, -1, -3, 4, -2]], [[-5, -1, -3, -2]], [[6, 3, 2, 1, 7]]]"}}
{"task_id": "HumanEval/115", "requirement": "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"", "entry_point": "max_fill", "canonical_solution": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n", "input_output_examples": "[[[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5]], [[6], [5], [0]]]", "starter_code": "from typing import List\ndef max_fill(grid: List[List[int]], capacity: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3], [[[1]], 1], [[[1, 0, 1], [0, 1, 0]], 2], [[[1, 1, 1, 1, 1]], 5], [[[0, 0, 0, 0, 0]], 3], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 10], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 1]]", "qwen2.5-coder-32b-instruct": "[[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]], 1], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 10], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 1], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 10], [[[1]], 1], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 5]]", "gpt-4o-mini": "[[[[1, 1, 0], [0, 1, 1]], 1], [[[1, 1, 1], [1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1], [1, 1], [1, 1]], 10], [[[1, 0, 1], [1, 1, 1]], 3], [[[0]], 1], [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 5], [[[1]], 1], [[[1, 1, 1], [1, 1, 1]], 1], [[[1, 0], [0, 1]], 2]]"}}
{"task_id": "HumanEval/116", "requirement": "from typing import List\n\n\ndef sort_array(arr: List[int]) -> List[int]:\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"", "entry_point": "sort_array", "canonical_solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n", "input_output_examples": "[[[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]]], [[[1, 2, 3, 4, 5]], [[-6, -5, -4, -3, -2]], [[0, 1, 2, 3, 4]]]]", "starter_code": "from typing import List\ndef sort_array(arr: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]], [[10, 7, 8, 9, 3]], [[0, 0, 0, 0]], [[15, 31, 7, 3]], [[]], [[1]], [[1024, 512, 256, 128]], [[255, 127, 63, 31]]]", "qwen2.5-coder-32b-instruct": "[[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]], [[0, 1, 2, 3, 7, 8]], [[31, 15, 7, 3, 1]], [[10, 6, 5, 3]], [[]], [[0]], [[1]], [[2, 4, 8, 16, 32]], [[1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[0, 0, 0, 0]], [[1, 1, 1, 1]], [[15, 7, 3, 1, 0]], [[3, 5, 6, 2, 8, 4]], [[4, 5, 2, 3, 6, 8]], [[5, 3, 10, 15, 6, 8, 1]], [[-1, -2, 3, 2]], [[1, 2, 2, 3, 3]]]"}}
{"task_id": "HumanEval/117", "requirement": "from typing import List\n\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"", "entry_point": "select_words", "canonical_solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n", "input_output_examples": "[[['Mary had a little lamb', 4], ['Mary had a little lamb', 3], ['simple white space', 2], ['Hello world', 4], ['Uncle sam', 3]], [[['little']], [['Mary', 'lamb']], [[]], [['world']], [['Uncle']]]]", "starter_code": "from typing import List\ndef select_words(s: str, n: int) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['Mary had a little lamb', 4], ['Mary had a little lamb', 3], ['simple white space', 2], ['Hello world', 4], ['Uncle sam', 3], ['', 2], ['AaEeIiOoUu', 0], ['BbCcDdFfGg', 10], ['Mixed Case Example', 5], ['Spaces     Multiple', 3]]", "qwen2.5-coder-32b-instruct": "[['Mary had a little lamb', 4], ['Mary had a little lamb', 3], ['simple white space', 2], ['Hello world', 4], ['Uncle sam', 3], ['', 1], ['a e i o u', 0], ['bcdfg', 5], ['The quick brown fox jumps over the lazy dog', 3], ['Python programming is fun', 6]]", "gpt-4o-mini": "[['Hello world from Python', 3], ['This is a test', 2], ['Just some random words', 4], ['a e i o u', 0], ['', 1], ['Consonants only', 5], ['Another example with varied lengths', 6], ['single', 1]]"}}
{"task_id": "HumanEval/118", "requirement": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"", "entry_point": "get_closest_vowel", "canonical_solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n", "input_output_examples": "[[['yogurt'], ['FULL'], ['quick'], ['ab']], [['u'], ['U'], [''], ['']]]", "starter_code": "def get_closest_vowel(word: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['banana'], ['strengths'], ['rhythm'], ['aeiou'], ['bcz'], ['xyz'], ['Hello'], ['Testing'], ['Aeiou'], ['BbCcDd'], ['ZzYyXx']]", "qwen2.5-coder-32b-instruct": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['rhythm'], ['beautiful'], ['sequence'], ['a'], ['aeiou'], ['bcdfg'], ['bAceId'], ['mIssissippi'], ['xylophone']]", "gpt-4o-mini": "[['abc'], ['tesla'], ['welcomE'], ['sky'], ['bcdfgb'], ['aeiou'], ['happy'], ['zebra'], ['ion'], ['pencil'], ['system'], ['aa'], ['bcd']]"}}
{"task_id": "HumanEval/119", "requirement": "from typing import List\n\n\ndef match_parens(lst: List[str]) -> str:\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    '''", "entry_point": "match_parens", "canonical_solution": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n", "input_output_examples": "[[[['()(', ')']], [[')', ')']]], [['Yes'], ['No']]]", "starter_code": "from typing import List\ndef match_parens(lst: List[str]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[['()', '()']], [[')(', '()']], [['((', '))']], [[')', '(']], [['(()', ')']], [['', '']], [['(', ')']], [[')', ')']], [['((()))', '()']], [['()()', '()']]]", "qwen2.5-coder-32b-instruct": "[[['()(', ')']], [[')', ')']], [['(', '()']], [['()', '()']], [['(((', ')))']], [['(()', '())']], [[')(', ')(']], [['', '']], [['(', ')']], [['))', '((']]]", "gpt-4o-mini": "[[['(()', '())']], [['((', '))']], [['()', '()']], [['())(', '((']], [['(())', '()()']], [['(()))', '(()']], [['(((', ')))))']], [['()', ')(']], [['((((', '))))']], [['))((', '(((']]]"}}
{"task_id": "HumanEval/120", "requirement": "from typing import List\n\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"", "entry_point": "maximum", "canonical_solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n\n    return sorted(sorted(arr)[::-1][:k])\n\n", "input_output_examples": "[[[[-3, -4, 5], 3], [[4, -4, 4], 2], [[-3, 2, 1, 2, -1, -2, 1], 1]], [[[-4, -3, 5]], [[4, 4]], [[2]]]]", "starter_code": "from typing import List\ndef maximum(arr: List[int], k: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[-3, -4, 5], 3], [[4, -4, 4], 2], [[-3, 2, 1, 2, -1, -2, 1], 1], [[1, 2, 3, 4, 5], 5], [[0, 0, 0, 0], 2], [[-1, -2, -3, -4, -5], 3], [[1000, -1000, 0], 1], [[1], 1], [[1, 2, 3, 4, 5], 0], [[5, 4, 3, 2, 1], 3]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5], 3], [[-1, -2, -3, -4, -5], 2], [[5, 5, 5, 5, 5], 4], [[10, 9, 8, 7, 6], 0], [[1], 1], [[1, 2, 3, 4, 5], 5], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 7], [[-1000, 1000, 0], 2], [[0, 0, 0, 0, 0], 3], [[1000, 999, 998, 997, 996], 5]]", "gpt-4o-mini": "[[[1, 3, 5, 7, 9], 3], [[10, -1, 2, 3, 5, 10], 2], [[-1, -2, -3, -4, -5], 2], [[1, 2, 3, 4, 5], 5], [[1000, 999, 998, 997, 996], 4], [[-1000, 0, 1000], 1], [[5], 0]]"}}
{"task_id": "HumanEval/121", "requirement": "from typing import List\n\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"", "entry_point": "solution", "canonical_solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n", "input_output_examples": "[[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]]], [[12], [9], [0]]]", "starter_code": "from typing import List\ndef solution(lst: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1]], [[2]], [[11, 22, 33, 44, 55]], [[-1, -2, -3, -4, -5]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]]", "qwen2.5-coder-32b-instruct": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[1]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[11, 22, 33, 44, 55, 66]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[111, 222, 333, 444, 555]], [[7]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[2, 3, 4, 5, 6]], [[1, 2, 3, 5, 7, 8, 9]], [[0, 1, 2, 3, 4, 5, 6]], [[1, 3, 5, 7, 9]], [[0, 2, 4, 6, 8]], [[1, 1, 1, 1, 1, 1]], [[2, 4, 6, 8, 10]], [[11, 22, 33, 44, 55, 66]], [[1]], [[1, 3]], [[2, 4, 5, 6, 7, 8, 9, 10]]]"}}
{"task_id": "HumanEval/122", "requirement": "from typing import List\n\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "entry_point": "add_elements", "canonical_solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n", "input_output_examples": "[[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4]], [[24]]]", "starter_code": "from typing import List\ndef add_elements(arr: List[int], k: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[1, 2, 3, 4, 5], 3], [[10, 20, 30, 40, 50], 5], [[99, 100, 101, 102, 103], 2], [[5, 15, 25, 35, 45], 1], [[123, 456, 789, 12, 34], 5], [[1, 2, 3], 3], [[100, 200, 300, 400, 500], 5], [[99, 98, 97, 96, 95], 5], [[10, 20, 30, 40, 50], 0], [[10], 1], [[1001, 2002, 3003], 3]]", "qwen2.5-coder-32b-instruct": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[10, 20, 30, 40, 50], 3], [[1, 2, 3, 4, 5], 5], [[100, 200, 3, 40, 5], 5], [[99, 100, 101, 102], 4], [[50, 50, 50, 50, 50], 2], [[123, 45, 67, 89, 10], 1], [[5, 5, 5, 5, 5], 0], [[99, 99, 99, 99, 99], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[10, 22, 35, 4, 56], 4], [[99, 100, 5, -1, 50], 5], [[12, -34, 56, 78, 91], 2], [[-10, -20, 30, 40, 50], 3], [[101, 102, 34, 22, 55], 2], [[8, 9, 100, 101, 2], 5], [[0], 1], [[-1, -2, -3, -4, -5], 3], [[50, 60, 70, 80, 90], 5]]"}}
{"task_id": "HumanEval/123", "requirement": "from typing import List\n\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"", "entry_point": "get_odd_collatz", "canonical_solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n", "input_output_examples": "[[[5]], [[[1, 5]]]]", "starter_code": "from typing import List\ndef get_odd_collatz(n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [6], [7], [10], [12], [15]]", "qwen2.5-coder-32b-instruct": "[[1], [5], [7], [10], [19], [27], [100]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [6], [7], [8], [15], [16], [27], [32], [33], [100], [101], [102], [103], [104], [105]]"}}
{"task_id": "HumanEval/124", "requirement": "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"", "entry_point": "valid_date", "canonical_solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n", "input_output_examples": "[[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020']], [[True], [False], [False], [True], [False]]]", "starter_code": "def valid_date(date: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020'], ['02-29-2020'], ['02-29-2021'], ['12-31-1999'], ['01-01-0001'], ['13-01-2022'], ['00-01-2022'], ['01-32-2022'], ['04-31-2022'], ['06-31-2022'], ['09-31-2022'], ['11-31-2022'], ['02-30-2022'], ['02-28-2022'], ['02-29-2022'], ['']]", "qwen2.5-coder-32b-instruct": "[['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['06/04/2020'], ['02-29-2020'], ['02-29-2019'], ['01-31-2021'], ['04-31-2021'], ['12-31-2021'], ['00-10-2021'], ['13-10-2021'], ['01-00-2021'], ['01-32-2021'], ['01-01-0000'], ['01-01-9999'], ['01-01-2021'], ['11-30-2021'], ['02-28-2021'], ['11-01-2021'], [''], ['1-1-2021'], ['01-1-2021'], ['01-01-21'], ['01-01-2021 '], [' 01-01-2021'], ['01-01-2021a']]", "gpt-4o-mini": "[['01-01-2021'], ['12-31-2020'], ['02-29-2020'], ['02-30-2021'], ['04-31-2021'], ['08-15-2021'], ['00-10-2021'], ['13-01-2021'], [''], ['04-31-2021'], ['02-29-2019'], ['12-15-2021']]"}}
{"task_id": "HumanEval/125", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''", "entry_point": "split_words", "canonical_solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['Hello world!'], ['Hello,world!'], ['abcdef']], [[['Hello', 'world!']], [['Hello', 'world!']], [3]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef split_words(txt: str) -> Union[List[str], int]:", "llm_generated_inputs": {"deepseek-v3": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['This is a test'], ['One,Two,Three'], ['NoSpacesOrCommasHere'], ['  Leading and trailing spaces  '], ['Multiple   spaces   between   words'], [''], ['a'], ['A,B,C,D,E']]", "qwen2.5-coder-32b-instruct": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['a,b,c,d,e,f'], ['noSpacesOrCommas'], ['singleword'], ['multiple   spaces'], ['multiple,commas,here'], ['mixed, spaces and,commas'], [''], ['A quick brown fox jumps over the lazy dog'], ['z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a']]", "gpt-4o-mini": "[['hello world'], ['hello,world'], ['helloworld'], ['a b c d e'], ['a,b,c,d,e'], ['abcdefg'], ['abc,def,ghi'], [''], ['12345'], ['word with multiple spaces    '], [','], ['abcdEFG'], ['  leading and trailing spaces  '], ['   '], ['only one word']]"}}
{"task_id": "HumanEval/126", "requirement": "from typing import List\n\n\ndef is_sorted(lst: List[int]) -> bool:\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''", "entry_point": "is_sorted", "canonical_solution": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n", "input_output_examples": "[[[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 2, 2, 3, 4]]], [[True], [True], [False], [True], [True], [False], [True], [False]]]", "starter_code": "from typing import List\ndef is_sorted(lst: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 2, 2, 3, 4]], [[]], [[1]], [[1, 1, 1, 1]], [[10, 20, 30, 40, 50]], [[10, 20, 20, 30, 40, 50]], [[10, 20, 20, 20, 30, 40, 50]]]", "qwen2.5-coder-32b-instruct": "[[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 2, 2, 3, 4]], [[]], [[1]], [[1, 1]], [[1, 1, 1]], [[1, 2, 3, 3, 4, 5, 5]], [[1, 2, 3, 3, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 1, 2, 2, 3, 3]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 5, 5, 5]], [[1, 2, 2, 3]], [[1, 1, 2, 3]], [[1]], [[]], [[1, 3, 2]], [[0, 1, 2]], [[2, 3, 4, 5, 6, 6]]]"}}
{"task_id": "HumanEval/127", "requirement": "from typing import Tuple\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. \n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"", "entry_point": "intersection", "canonical_solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n", "input_output_examples": "[[[(1, 3), (2, 4)], [(1, 2), (2, 3)], [(-1, 1), (0, 4)], [(-3, -1), (-5, 5)]], [['NO'], ['NO'], ['NO'], [['YES']]]]", "starter_code": "from typing import Tuple\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 3), (2, 4)], [(1, 5), (3, 7)], [(-3, -1), (-5, 5)], [(1, 2), (3, 4)], [(5, 5), (5, 5)], [(2, 10), (1, 3)], [(-10, -5), (-7, -6)], [(0, 10), (10, 20)], [(0, 10), (-5, 15)], [(3, 7), (3, 7)]]", "qwen2.5-coder-32b-instruct": "[[(1, 2), (2, 3)], [(-1, 1), (0, 4)], [(-3, -1), (-5, 5)], [(5, 10), (10, 15)], [(0, 0), (0, 0)], [(-10, -5), (-7, -3)], [(2, 5), (3, 7)], [(11, 19), (15, 22)], [(2, 2), (3, 3)], [(-20, -10), (-15, -5)]]", "gpt-4o-mini": "[[(1, 5), (4, 10)], [(3, 7), (7, 9)], [(2, 6), (1, 4)], [(0, 0), (0, 0)], [(5, 10), (1, 3)], [(10, 15), (15, 20)], [(-5, -1), (-2, 0)], [(-10, -5), (-7, -3)], [(1, 2), (3, 4)], [(2, 4), (3, 3)]]"}}
{"task_id": "HumanEval/128", "requirement": "from typing import List\n\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"", "entry_point": "prod_signs", "canonical_solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n", "input_output_examples": "[[[[1, 2, 2, -4]], [[0, 1]], [[]]], [[-9], [0], [None]]]", "starter_code": "from typing import List\ndef prod_signs(arr: List[int]) -> Optional[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[5, -3, 0, 2, -1]], [[-7, -2, -3]], [[10]], [[0, 0, 0]], [[-1, -1, -1, -1]], [[2, -2, 2, -2, 2]], [[1, 1, 1, 1, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[1, -1, 1, -1]], [[5]], [[-3]], [[0, 0, 0]], [[1, 0, -2]], [[10, -10, 10, -10]]]", "gpt-4o-mini": "[[[]], [[1, 2, 3]], [[-1, -2, -3]], [[0]], [[1, -2, 3, 0]], [[-1, 2, 0, -3]], [[1, -1, 1, -1]], [[100, -50, 0, 25]], [[-10, -20, -30]], [[10, 0, -10]]]"}}
{"task_id": "HumanEval/129", "requirement": "from typing import List\n\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"", "entry_point": "minPath", "canonical_solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1]], [[[1, 2, 1]], [[1]]]]", "starter_code": "from typing import List\ndef minPath(grid: List[List[int]], k: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1], [[[1, 3], [2, 4]], 2], [[[1, 2], [3, 4]], 4], [[[9, 8], [7, 6]], 1], [[[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5], [[[10, 20], [30, 40]], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9], [[[5, 1], [2, 3]], 3], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1], [[[10, 12, 11], [9, 8, 7], [6, 5, 4]], 2], [[[1, 3, 5], [2, 4, 6], [7, 9, 8]], 4], [[[3, 1, 2], [6, 5, 4], [9, 7, 8]], 9], [[[1]], 1], [[[1, 2], [3, 4]], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1], [[[1, 2, 3], [6, 5, 4], [7, 8, 9]], 5], [[[9, 8, 7], [6, 5, 4], [3, 2, 1]], 3]]", "gpt-4o-mini": "[[[[1, 2], [3, 4]], 2], [[[1, 3, 2], [4, 6, 5], [7, 8, 9]], 3], [[[5, 1], [4, 3]], 1], [[[1, 2, 3], [6, 5, 4], [7, 8, 9]], 4], [[[1, 2], [4, 3]], 4], [[[1, 5, 6], [4, 3, 2], [7, 8, 9]], 5], [[[1, 2, 3], [8, 7, 6], [9, 4, 5]], 2], [[[1, 3, 5], [2, 4, 6]], 3], [[[1]], 1], [[[3, 2], [1, 4]], 2]]"}}
{"task_id": "HumanEval/130", "requirement": "from typing import List\n\n\ndef tri(n: int) -> List[float]:\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"", "entry_point": "tri", "canonical_solution": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n\n    if n == 0: return [1]\n    if n == 1: return [1, 3]\n    ans = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            ans.append(1 + i / 2)\n        else:\n            ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2)\n    return ans\n\n", "input_output_examples": "[[[2], [4], [3], [3]], [[2], [3], [8], [[1, 3, 2, 8]]]]", "starter_code": "from typing import List\ndef tri(n: int) -> List[float]:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [0]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [10]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [20], [100]]"}}
{"task_id": "HumanEval/131", "requirement": "def digits(n: int) -> int:\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"", "entry_point": "digits", "canonical_solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n", "input_output_examples": "[[[1], [4], [235]], [[1], [0], [15]]]", "starter_code": "def digits(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [4], [235], [0], [2468], [13579], [123456789], [999999], [100000], [1020304050]]", "qwen2.5-coder-32b-instruct": "[[1], [4], [235], [2468], [13579], [0], [111], [2222222222], [987654321]]", "gpt-4o-mini": "[[13579], [24680], [123456789], [0], [1111], [2222], [135246], [5], [9999]]"}}
{"task_id": "HumanEval/132", "requirement": "def is_nested(string: str) -> bool:\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''", "entry_point": "is_nested", "canonical_solution": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n", "input_output_examples": "[[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][[']], [[True], [False], [False], [False], [True], [True]]]", "starter_code": "def is_nested(string: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][['], ['[[[[]]]]'], ['[][][][]'], ['[[[[[[]]]]]'], ['[[]][[]][[]]'], ['[[][][]]'], ['[[[][]]]'], ['[[[]]]'], ['[[]]'], ['[]'], ['[[[]'], [']]]'], ['[[[[]]]]]'], ['[[[[[]]]'], ['[[]][][[[]]]']]", "qwen2.5-coder-32b-instruct": "[['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[][]]'], ['[[]][['], ['[[[[]]]]'], ['[][[[]]]'], ['[[[]]][]'], ['[]'], ['[[[[]'], ['[]]'], ['[[[]]]'], ['[]'], ['[[]][][[]]'], ['[[][][][]]'], ['[]'], ['[[]]'], ['[[[]]]'], ['[[[[]]]]']]", "gpt-4o-mini": "[['[]'], ['[[]]'], ['[[][[]]]'], ['[][]'], ['[[]][][]'], ['[]][['], [('][', '][')], ['['], [']'], ['']]"}}
{"task_id": "HumanEval/133", "requirement": "from typing import List\n\n\ndef sum_squares(lst: List[float]) -> int:\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"", "entry_point": "sum_squares", "canonical_solution": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n", "input_output_examples": "[[[[1, 2, 3]], [[1, 4, 9]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]]], [[14], [98], [84], [29], [6]]]", "starter_code": "from typing import List\ndef sum_squares(lst: List[float]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[1, 4, 9]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]], [[]], [[0]], [[-1.1, -2.2, -3.3]], [[0.1, 0.2, 0.3]], [[1.0, 2.0, 3.0]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[1, 4, 9]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]], [[0]], [[0.9]], [[-1.1]], [[2.5, 3.5, 4.5]], [[]], [[1.0, 2.0, 3.0]]]", "gpt-4o-mini": "[[[1.2, 2.3, 3.4]], [[0, 0, 0]], [[1, 2, 3]], [[-1.5, -2.5, 3.2]], [[4.7]], [[]], [[-3.9, 2.1, 2.8]], [[0.99, 0.01]], [[2.2, 3.3, 4.4, 5.5, 6.6]], [[100.0, 200.5, 300.8]]]"}}
{"task_id": "HumanEval/134", "requirement": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n", "input_output_examples": "[[['apple pie'], ['apple pi e'], ['apple pi e '], ['']], [[False], [True], [False], [False]]]", "starter_code": "def check_if_last_char_is_a_letter(txt: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['apple pie'], ['apple pi e'], ['apple pi e '], [''], ['a'], ['A'], ['123'], ['hello world!'], ['hello world '], ['hello world a'], ['hello world a '], ['    '], ['   a'], ['   a '], ['   !']]", "qwen2.5-coder-32b-instruct": "[['apple pie'], ['apple pi e'], ['apple pi e '], [''], ['a'], [' a'], ['a '], ['123'], ['123 a'], ['123a'], ['123a '], ['!@#'], ['!@# a'], ['a!@#'], ['a!@# '], ['apple pi e!'], ['apple pi e!'], ['apple pi e!'], ['apple pi e!']]", "gpt-4o-mini": "[['Hello'], ['Hello!'], ['1234'], ['Hello World '], ['Hello World!'], ['abc123'], ['Hello World  '], [' '], ['Python programming'], ['Last character is a letter.']]"}}
{"task_id": "HumanEval/135", "requirement": "from typing import List\n\n\ndef can_arrange(arr: List[int]) -> int:\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"", "entry_point": "can_arrange", "canonical_solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n", "input_output_examples": "[[[[1, 2, 4, 3, 5]], [[1, 2, 3]]], [[3], [-1]]]", "starter_code": "from typing import List\ndef can_arrange(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 4, 3, 5]], [[1, 2, 3]], [[5, 4, 3, 2, 1]], [[1, 3, 5, 7, 9, 2]], [[10, 20, 30, 40, 50]], [[1]], [[]], [[9, 7, 5, 3, 1, 2, 4, 6, 8]], [[1, 2, 3, 4, 5, 4, 3, 2, 1]], [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 3, 5]], [[1, 2, 3]], [[5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 3, 2, 4, 5, 6, 7, 8, 9, 10]], [[1]], [[]], [[1, 2, 2, 3, 4]], [[1, 3, 5, 4, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]]", "gpt-4o-mini": "[[[1, 3, 2, 4, 5]], [[5, 4, 3, 2, 1]], [[10, 20, 30, 25, 40]], [[3, 5, 8, 7, 9]], [[1, 2, 3, 4, 5]], [[10]], [[-1, 0, -2, -3, 1]], [[0, -1, -2, -3, -4]], [[9, 8, 8, 7, 10]], [[-5, -4, -3, -6, -1]]]"}}
{"task_id": "HumanEval/136", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''", "entry_point": "largest_smallest_integers", "canonical_solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n", "input_output_examples": "[[[[2, 4, 1, 3, 5, 7]], [[]], [[0]]], [[(None, 1)], [(None, None)], [(None, None)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 4, 1, 3, 5, 7]], [[-1, -2, -3, -4, -5]], [[0, 0, 0]], [[-5, -3, 0, 3, 5]], [[1, 2, 3, 4, 5]], [[]], [[0]], [[-10, -5, 0, 5, 10]]]", "qwen2.5-coder-32b-instruct": "[[[2, 4, 1, 3, 5, 7]], [[]], [[0]], [[-1, -2, -3, -4]], [[1, 2, 3, 4]], [[-1, 0, 1]], [[-10, -20, 5, 15]], [[0, 0, 0]], [[-1, -1, -1, 1, 1, 1]], [[-5, -9, 3, 8, 0, -2]]]", "gpt-4o-mini": "[[[3, -1, 0, 4, -5]], [[-1, -2, -3]], [[1, 2, 3]], [[-1, 1, 0]], [[0, 0, 0]], [[]], [[-99, -10, 1, 2, 3]], [[0, -5, 5, -10, 10]]]"}}
{"task_id": "HumanEval/137", "requirement": "from typing import Union\n\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"", "entry_point": "compare_one", "canonical_solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n", "input_output_examples": "[[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1]], [[2.5], ['2,3'], ['6'], [None]]]", "starter_code": "from typing import Union\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:", "llm_generated_inputs": {"deepseek-v3": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.7, 3.7], ['3.7', '3,7'], ['10', '2'], [0, '0'], [-5, -3], ['-5.5', '-5,5'], ['7.2', 7.2], ['1000', '999']]", "qwen2.5-coder-32b-instruct": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.5, 3.5], ['7', '7.0'], ['10', 10.0], [0, '0'], [-1, '-1'], [-2.5, '-2,5'], ['-3,5', -3.5], [100, '99,9'], ['100', 100], ['0,001', 0.001], [0.001, '0,001']]", "gpt-4o-mini": "[[5, 3], [4.5, 4.5], ['10', '20'], ['20.5', 15.0], [3.14, '2.71'], ['5.0', '5.0'], [7, '7'], ['3', 2.9], [100, 100.0], [0, 0.0], [-10, -5], ['-7', '-10'], ['3.5', '3.5'], [None, 5]]"}}
{"task_id": "HumanEval/138", "requirement": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"", "entry_point": "is_equal_to_sum_even", "canonical_solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    return n >= 8 and n % 2 == 0\n\n", "input_output_examples": "[[[4], [6], [8]], [[False], [False], [True]]]", "starter_code": "def is_equal_to_sum_even(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[4], [6], [8], [10], [12], [1], [0], [-2], [14], [16]]", "qwen2.5-coder-32b-instruct": "[[4], [6], [8], [10], [12], [14], [16], [20], [30], [0], [-4], [-8]]", "gpt-4o-mini": "[[8], [16], [0], [2], [4], [10], [20], [30], [-4], [3]]"}}
{"task_id": "HumanEval/139", "requirement": "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"", "entry_point": "special_factorial", "canonical_solution": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n\n    fac, ans = 1, 1\n    for i in range(2, n + 1):\n        fac *= i\n        ans *= fac\n    return ans\n\n", "input_output_examples": "[[[4]], [[288]]]", "starter_code": "def special_factorial(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [0], [-1], [10]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [10], [0], [-1]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [10], [15], [20]]"}}
{"task_id": "HumanEval/140", "requirement": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"", "entry_point": "fix_spaces", "canonical_solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n", "input_output_examples": "[[['Example'], ['Example 1'], [' Example 2'], [' Example   3']], [['Example'], ['Example_1'], ['_Example_2'], ['_Example-3']]]", "starter_code": "def fix_spaces(text: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['  '], ['   '], ['    '], ['Hello   World'], ['NoSpacesHere'], ['  LeadingSpaces'], ['TrailingSpaces  '], ['Multiple    Spaces   Here'], ['   Multiple   Leading   And   Trailing   Spaces   '], ['SingleSpace'], ['Two  Spaces'], ['Three   Spaces'], ['Four    Spaces'], ['Mixed   Spaces  Here'], ['   Mixed   Spaces   Everywhere   ']]", "qwen2.5-coder-32b-instruct": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['Multiple    Spaces'], ['Single Space'], ['  Leading and trailing  '], ['NoSpacesHere'], ['   '], ['_'], ['__'], ['___'], ['a b c d e f g'], ['a   b   c   d']]", "gpt-4o-mini": "[['Hello World'], ['This  is   a test'], ['Leading and trailing spaces  '], ['Multiple    spaces    here'], ['NoSpacesAtAll'], ['  LeadingSpaces'], ['TrailingSpaces  '], [''], ['   '], ['One  two  three']]"}}
{"task_id": "HumanEval/141", "requirement": "def file_name_check(file_name: str) -> str:\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"", "entry_point": "file_name_check", "canonical_solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n", "input_output_examples": "[[['example.txt'], ['1example.dll']], [['Yes'], ['No']]]", "starter_code": "def file_name_check(file_name: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['example.txt'], ['1example.dll'], ['test1234.exe'], ['file.dll'], ['file.exe'], ['file.txt'], ['file.doc'], ['file..txt'], ['.txt'], ['file.'], ['file'], ['file123.txt'], ['file1234.txt'], ['File.exe'], ['FILE.TXT'], ['file.TxT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt'], ['file.txT'], ['file.tXt']]", "qwen2.5-coder-32b-instruct": "[['example.txt'], ['1example.dll'], ['example123.txt'], ['example1234.txt'], ['example..txt'], ['example.tx'], ['.txt'], ['example.'], ['example.doc'], ['example.TXT'], ['example1.EXE'], ['example2.DLL'], ['e1x2a3mple.dll'], ['example123.exe'], ['example1234.exe'], ['example123.dll'], ['example1234.dll'], ['example_123.txt'], ['example-123.txt'], ['example 123.txt']]", "gpt-4o-mini": "[['file.txt'], ['valid_file_name.exe'], ['document1.dll'], ['another.valid.name.txt'], ['file123.txt'], ['1invalidfile.txt'], ['.hiddenfile.exe'], ['invalid..file.txt'], ['file.with.no.extension'], ['toomanydigits1234.txt'], ['no_extension_file.'], ['file_name_with_two.dots.txt'], ['valid_file_name_with_numbers_123.dll'], ['123file.txt'], ['file_name_with_wrong_extension.xyz'], ['validFileName.dll']]"}}
{"task_id": "HumanEval/142", "requirement": "from typing import List\n\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"", "entry_point": "sum_squares", "canonical_solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n", "input_output_examples": "[[[[1, 2, 3]], [[]], [[-1, -5, 2, -1, -5]]], [[6], [0], [-126]]]", "starter_code": "from typing import List\ndef sum_squares(lst: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[]], [[-1, -5, 2, -1, -5]], [[0, 0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-2, 3, -4, 5, -6, 7, -8, 9, -10]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]], [[1]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[-3, -6, -9, -12, -15, -18, -21, -24, -27, -30]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[]], [[-1, -5, 2, -1, -5]], [[0, 0, 0, 0, 0]], [[3, 6, 9, 12, 15, 18, 21, 24, 27]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5, 6]], [[0, 0, 0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [[2, -3, 4, -1, 0, 5, -6, 7, 8, 9]], [[3]], [[-1, -2, -3, -4, -5, -6, -7, -8]], [[-1, -2, 0, 0, 1, 2, 3, 4]], [[]]]"}}
{"task_id": "HumanEval/143", "requirement": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "entry_point": "words_in_sentence", "canonical_solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n", "input_output_examples": "[[['This is a test'], ['lets go for swimming']], [['is'], ['go for']]]", "starter_code": "def words_in_sentence(sentence: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['This is a test'], ['lets go for swimming'], ['Hello world'], ['The quick brown fox jumps over the lazy dog'], ['a'], ['Prime numbers are fun'], ['One two three four five six seven'], ['I love programming'], ['Python is awesome'], ['Short words']]", "qwen2.5-coder-32b-instruct": "[['This is a test'], ['lets go for swimming'], ['a'], ['prime numbers are interesting'], ['I love python programming'], [' '], ['two words'], ['seveneleven'], ['ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az']]", "gpt-4o-mini": "[['I love programming'], ['This is a test'], ['Hello world'], ['Python'], ['prime number words'], ['A quick brown fox jumps over the lazy dog'], ['Simple test case for prime'], ['Ability is prime'], ['Amazing'], ['Are vowels prime']]"}}
{"task_id": "HumanEval/144", "requirement": "def simplify(x: str, n: str) -> bool:\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \"\"\"", "entry_point": "simplify", "canonical_solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n", "input_output_examples": "[[['1/5', '5/1'], ['1/6', '2/1'], ['7/10', '10/2']], [[True], [False], [False]]]", "starter_code": "def simplify(x: str, n: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['1/5', '5/1'], ['1/6', '2/1'], ['7/10', '10/2'], ['2/3', '3/2'], ['4/5', '5/4'], ['1/1', '1/1'], ['3/4', '4/3'], ['5/7', '7/5'], ['0/1', '1/1'], ['1/2', '2/1'], ['3/9', '9/3'], ['10/20', '20/10']]", "qwen2.5-coder-32b-instruct": "[['1/5', '5/1'], ['1/6', '2/1'], ['7/10', '10/2'], ['3/4', '4/3'], ['2/3', '3/2'], ['1/1', '1/1'], ['9/3', '3/9'], ['10/5', '5/10'], ['1/100', '100/1'], ['0/1', '1/0'], ['1/2', '2/4'], ['5/10', '10/5'], ['1/3', '3/1'], ['2/5', '5/2'], ['7/7', '7/7']]", "gpt-4o-mini": "[['1/2', '1/2'], ['3/4', '2/3'], ['1/3', '3/1'], ['1/4', '4/1'], ['7/2', '3/5'], ['5/6', '6/5'], ['1/1', '2/1'], ['2/3', '3/2'], ['10/3', '1/5'], ['4/5', '5/4'], ['5/10', '10/5']]"}}
{"task_id": "HumanEval/145", "requirement": "from typing import List\n\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"", "entry_point": "order_by_points", "canonical_solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n", "input_output_examples": "[[[[1, 11, -1, -11, -12]], [[]]], [[[-1, -11, 1, -12, 11]], [[]]]]", "starter_code": "from typing import List\ndef order_by_points(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 11, -1, -11, -12]], [[]], [[123, 456, 789]], [[0, 0, 0]], [[-100, 100, -200, 200]], [[9, 99, 999, 9999]], [[5, -5, 55, -55]], [[10, 20, 30, 40, 50]], [[22, 33, 44, 55, 66]], [[111, 222, 333, 444, 555]]]", "qwen2.5-coder-32b-instruct": "[[[1, 11, -1, -11, -12]], [[]], [[0, 5, 10, 15, 20]], [[9, 99, 999, 9999]], [[100, 20, 3, 40, 5]], [[-5, -15, -25, -35, -45]], [[111, 222, 333, 444, 555]], [[123, 321, 213, 132, 231, 312]], [[10, 2, 11, 20, 101]], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]]", "gpt-4o-mini": "[[[34, 56, 23, 45]], [[10, 2, 30, 40]], [[99, 18, 27, 36]], [[1, 2, 3, 4, 5]], [[21, 12, 31, 13]], [[100, 200, 300]], [[8, 8, 8, 8]], [[-1, -2, -3, -4]], [[0]], [[987654321, 123456789]]]"}}
{"task_id": "HumanEval/146", "requirement": "from typing import List\n\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"", "entry_point": "specialFilter", "canonical_solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n", "input_output_examples": "[[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]]], [[1], [2]]]", "starter_code": "from typing import List\ndef specialFilter(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[10, 20, 30, 40]], [[11, 13, 15, 17, 19]], [[1, 3, 5, 7, 9]], [[21, 23, 25, 27, 29]], [[123, 456, 789, 101]], [[]], [[111, 222, 333, 444, 555]], [[-15, -33, -45, -109]]]", "qwen2.5-coder-32b-instruct": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[135, 579, 975, 753, 357]], [[10, 12, 14, 16, 18]], [[13, 31, 57, 75, 99]], [[]], [[111, 113, 115, 117, 119]], [[191, 393, 595, 797, 999]], [[21, 23, 25, 27, 29]]]", "gpt-4o-mini": "[[[11, 13, 15, 10, 21]], [[25, 8, 3, 45, 73]], [[12, 34, 56, 78]], [[19, 31, 51, 39]], [[9, 10, 11, 12]], [[1, 2, 3, 4, 5]], [[13, 17, 33]], [[50, 22, 14]], [[31, 57, 91, 101]], [[0, 10, 20, 30]]]"}}
{"task_id": "HumanEval/147", "requirement": "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"", "entry_point": "get_max_triples", "canonical_solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n", "input_output_examples": "[[[5]], [[1]]]", "starter_code": "def get_max_triples(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [10], [100], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [10], [15], [20], [100]]", "gpt-4o-mini": "[[1], [3], [5], [10], [15], [20], [100]]"}}
{"task_id": "HumanEval/148", "requirement": "from typing import Tuple\n\n\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''", "entry_point": "bf", "canonical_solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n", "input_output_examples": "[[['Jupiter', 'Neptune'], ['Earth', 'Mercury'], ['Mercury', 'Uranus']], [[('Saturn', 'Uranus')], ['Venus'], [('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')]]]", "starter_code": "from typing import Tuple\ndef bf(planet1: str, planet2: str) -> Tuple[str, ...]:", "llm_generated_inputs": {"deepseek-v3": "[['Jupiter', 'Neptune'], ['Earth', 'Mercury'], ['Mercury', 'Uranus'], ['Venus', 'Mars'], ['Saturn', 'Jupiter'], ['Neptune', 'Uranus'], ['Mercury', 'Neptune'], ['Earth', 'Earth'], ['Pluto', 'Mars'], ['Saturn', 'Pluto'], ['', 'Mars'], ['Jupiter', ''], ['123', 'Earth'], ['Mars', 'abc']]", "qwen2.5-coder-32b-instruct": "[['Jupiter', 'Neptune'], ['Earth', 'Mercury'], ['Mercury', 'Uranus'], ['Venus', 'Mars'], ['Neptune', 'Mercury'], ['Earth', 'Earth'], ['Pluto', 'Mars'], ['Mars', 'Pluto'], ['', 'Mars'], ['Venus', ''], ['', ''], ['Mercury', 'Mercury'], ['Neptune', 'Neptune']]", "gpt-4o-mini": "[['Mercury', 'Venus'], ['Earth', 'Mars'], ['Mars', 'Jupiter'], ['Jupiter', 'Neptune'], ['Venus', 'Neptune']]"}}
{"task_id": "HumanEval/149", "requirement": "from typing import List\n\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"", "entry_point": "sorted_list_sum", "canonical_solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n", "input_output_examples": "[[[['aa', 'a', 'aaa']], [['ab', 'a', 'aaa', 'cd']]], [[['aa']], [['ab', 'cd']]]]", "starter_code": "from typing import List\ndef sorted_list_sum(lst: List[str]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[['aa', 'a', 'aaa']], [['ab', 'a', 'aaa', 'cd']], [['hello', 'world', 'hi', 'there']], [['python', 'java', 'c', 'cpp', 'go']], [['apple', 'banana', 'kiwi', 'mango']], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']], [['longword', 'short', 'medium', 'tiny']], [['duplicate', 'duplicate', 'unique']], [['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']], [['']], [['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']]]", "qwen2.5-coder-32b-instruct": "[[[]], [['a']], [['aa']], [['aa', 'a']], [['aa', 'bb', 'a']], [['abc', 'defg', 'hijkl', 'mnopqr']], [['ab', 'cd', 'ef', 'gh']], [['abcd', 'efgh', 'ijkl', 'mnop']], [['abcd', 'ef', 'ghij', 'kl']], [['apple', 'banana', 'cherry', 'date']], [['even', 'even', 'odd', 'odd']], [['same', 'size', 'word', 'list']], [['one', 'two', 'three', 'four', 'five', 'six']]]", "gpt-4o-mini": "[[['apple', 'banana', 'kiwi', 'fig']], [['one', 'two', 'three', 'four', 'five']], [['a', 'bb', 'ccc', 'dddd', 'eeeee']], [['cat', 'dog', 'bear', 'ant']], [['hello', 'world', 'test', 'python']], [['aa', 'bb', 'cc', 'dd', 'ee']], [['a', 'b', 'c', 'd', 'e', 'f', 'g']], [['hello', 'aaa', 'test', 'five']], [['short', 'tiny', 'longer', 'longest', 'medium']], [['repeat', 'repeat', 'test', 'test']], [['lengthy', 'tiny', 'big', 'medium', 'long']], [['two', 'four', 'six', 'eight', 'ten', 'twelve']]]"}}
{"task_id": "HumanEval/150", "requirement": "def x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"", "entry_point": "x_or_y", "canonical_solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n", "input_output_examples": "[[[7, 34, 12], [15, 8, 5]], [[34], [5]]]", "starter_code": "def x_or_y(n: int, x: int, y: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[7, 34, 12], [15, 8, 5], [2, 10, 20], [1, 3, 7], [29, 100, 200], [30, 50, 60], [0, 5, 10], [-5, 15, 25], [13, 0, 0], [14, 0, 0]]", "qwen2.5-coder-32b-instruct": "[[2, 10, 20], [4, 10, 20], [11, 100, 200], [1, 100, 200], [0, 100, 200], [-5, 100, 200], [17, 5, 9], [18, 5, 9], [19, 5, 9], [20, 5, 9]]", "gpt-4o-mini": "[[2, 10, 5], [3, 10, 5], [4, 10, 5], [5, 10, 5], [1, 10, 5], [0, 10, 5], [17, 10, 5], [25, 10, 5], [11, 10, 5], [13, 10, 5]]"}}
{"task_id": "HumanEval/151", "requirement": "from typing import List\n\n\ndef double_the_difference(lst: List[int]) -> int:\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    If the input list is empty, return 0.\n    '''", "entry_point": "double_the_difference", "canonical_solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n", "input_output_examples": "[[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]]], [[10], [0], [81], [0]]]", "starter_code": "from typing import List\ndef double_the_difference(lst: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[2, 4, 6]], [[1, 3, 5]], [[1.5, 2.3, 3]], [[-1, -3, -5]], [[1, -1, 2, -2, 3, -3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[1, 2, 3, 4, 5]], [[11, 13, 15]], [[2, 4, 6, 8]], [[1.5, 3.5, 5.5]], [[7, -3, 2, -8, 0]], [[100, 200, 300]], [[1, 1, 1, 1]]]", "gpt-4o-mini": "[[[]], [[1, 2, 3, 4, 5]], [[0, -1, -3, 4]], [[-5, -2, -1, 0]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[1, 2, 'a', 3, 4, None]], [[1, -2, 3, 4, 5]], [[-1, -2, 'string', 8, 9]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]]"}}
{"task_id": "HumanEval/152", "requirement": "from typing import List\n\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"", "entry_point": "compare", "canonical_solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n", "input_output_examples": "[[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]]], [[[0, 0, 0, 0, 3, 3]], [[4, 4, 1, 0, 0, 6]]]]", "starter_code": "from typing import List\ndef compare(game: List[int], guess: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[7, 8, 9], [9, 8, 7]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-1, -2, -3]], [[100, 200, 300], [150, 250, 350]], [[5, 10, 15], [10, 5, 20]], [[1, 1, 1], [2, 2, 2]], [[-5, -10, -15], [-10, -5, -20]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[10, 20, 30], [30, 20, 10]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [2, 2, 2, 2]], [[100, 200, 300, 400], [100, 200, 300, 400]], [[100, 200, 300, 400], [400, 300, 200, 100]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [1, 1, 1, 1]], [[1], [1]], [[1], [2]]]", "gpt-4o-mini": "[[[1, 2, 3], [1, 2, 3]], [[3, 2, 1], [1, 2, 3]], [[5, 10, 15], [5, 8, 15]], [[0, 0, 0], [1, 1, 1]], [[7, 7, 7], [7, 7, 7]], [[100], [99]], [[200, 400, 600], [250, 350, 500]], [[], []]]"}}
{"task_id": "HumanEval/153", "requirement": "from typing import List\n\n\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"", "entry_point": "Strongest_Extension", "canonical_solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n", "input_output_examples": "[[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']]], [['Slices.SErviNGSliCes'], ['my_class.AA']]]", "starter_code": "from typing import List\ndef Strongest_Extension(class_name: str, extensions: List[str]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']], ['TestClass', ['Ext1', 'EXT2', 'ext3']], ['EmptyClass', []], ['SingleExt', ['OnlyOne']], ['CaseSensitive', ['AbC', 'aBc', 'ABC', 'abc']], ['EqualStrength', ['Aa', 'Bb', 'Cc']], ['MixedCase', ['XyZ', 'xYz', 'Xyz', 'xyz']], ['LongExtension', ['ThisIsAVeryLongExtensionName', 'Short', 'MediumLength']], ['SpecialChars', ['Ext!', 'Ext@', 'Ext#']]]", "qwen2.5-coder-32b-instruct": "[['Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']], ['my_class', ['AA', 'Be', 'CC']], ['BaseClass', ['extension', 'EXTENSION', 'ExTeNsIoN']], ['Widget', ['Small', 'LARGE', 'Medium']], ['Component', ['UI', 'ui', 'Ui']], ['System', ['CORE', 'core', 'Core']], ['Module', []], ['Feature', ['Alpha', 'beta', 'Gamma']], ['Service', ['HTTP', 'http', 'Http']], ['Entity', ['ONE', 'two', 'Three']]]", "gpt-4o-mini": "[['Base', ['ExtensionA', 'ExtensionB', 'extensionC']], ['ExampleClass', ['extOne', 'ExtTwo', 'ExtTwo']], ['TestClass', ['singleLetter', 'SingleLetter', 'Single']], ['ClassWithFewExtensions', ['AAA', 'aaa', 'Aaa']], ['ClassWithoutExtensions', []], ['ClassWithSameStrength', ['abc', 'XYZ', 'xyz', 'abcXYZ']], ['ClassWithAllLowercase', ['abc', 'def', 'ghi']], ['ClassWithAllUppercase', ['ABC', 'DEF', 'GHI']]]"}}
{"task_id": "HumanEval/154", "requirement": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"", "entry_point": "cycpattern_check", "canonical_solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n", "input_output_examples": "[[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen']], [[False], [True], [False], [True], [False], [True]]]", "starter_code": "def cycpattern_check(a: str, b: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['abcdef', 'efabcd'], ['xyz', 'xyz'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'a'], ['abcde', 'edcba'], ['longerword', 'wordlonger'], ['rotation', 'tationro']]", "qwen2.5-coder-32b-instruct": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['rotation', 'tationro'], ['rotation', 'rotation'], ['rotation', 'otationr'], ['a', 'a'], ['a', 'b'], ['', ''], ['abcde', 'edcba'], ['aaaa', 'aa'], ['abcdefg', 'efga'], ['abcdefg', 'gha']]", "gpt-4o-mini": "[['abcde', 'cde'], ['hello', 'llo'], ['abcd', 'dabc'], ['rotation', 'tation'], ['test', 'est'], ['python', 'onpyth'], ['xyz', 'yzx'], ['a', 'a'], ['abcdef', 'gh'], ['single', 'ingle'], ['word', 'drow'], ['', 'any'], ['nonempty', ''], ['abc', 'bca'], ['abcd', 'abcd'], ['hello', 'Olh']]"}}
{"task_id": "HumanEval/155", "requirement": "from typing import Tuple\n\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"", "entry_point": "even_odd_count", "canonical_solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n", "input_output_examples": "[[[-12], [123]], [[(1, 1)], [(1, 2)]]]", "starter_code": "from typing import Tuple\ndef even_odd_count(num: int) -> Tuple[int, int]:", "llm_generated_inputs": {"deepseek-v3": "[[0], [123], [-123], [2468], [13579], [-2468], [-13579], [1234567890], [-1234567890]]", "qwen2.5-coder-32b-instruct": "[[-12], [123], [0], [2468], [13579], [1000000], [-13579], [-24680], [9876543210]]", "gpt-4o-mini": "[[123456], [24680], [13579], [0], [9876543210], [-12345], [1001], [999999], [5000], [111111]]"}}
{"task_id": "HumanEval/156", "requirement": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"", "entry_point": "int_to_mini_roman", "canonical_solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n", "input_output_examples": "[[[19], [152], [426]], [['xix'], ['clii'], ['cdxxvi']]]", "starter_code": "def int_to_mini_roman(number: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[1], [5], [10], [50], [100], [500], [1000], [4], [9], [40], [90], [400], [900], [19], [152], [426], [999], [1000]]", "qwen2.5-coder-32b-instruct": "[[1], [4], [9], [10], [14], [40], [44], [50], [90], [99], [100], [400], [500], [900], [1000], [19], [152], [426]]", "gpt-4o-mini": "[[1], [4], [9], [10], [44], [50], [99], [100], [400], [500], [900], [1000], [3], [8], [28], [58]]"}}
{"task_id": "HumanEval/157", "requirement": "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''", "entry_point": "right_angle_triangle", "canonical_solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n", "input_output_examples": "[[[3, 4, 5], [1, 2, 3]], [[True], [False]]]", "starter_code": "def right_angle_triangle(a: int, b: int, c: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[3, 4, 5], [5, 12, 13], [1, 2, 3], [0, 0, 0], [-3, -4, -5], [3, 4, 6], [6, 8, 10], [1, 1, 1], [7, 24, 25], [10, 10, 10]]", "qwen2.5-coder-32b-instruct": "[[3, 4, 5], [5, 12, 13], [8, 15, 17], [1, 2, 3], [6, 8, 10], [7, 24, 25], [0, 4, 5], [-3, 4, 5], [3, -4, 5], [3, 4, -5], [0, 0, 0], [1, 1, 1], [10, 10, 14], [10, 10, 14.14]]", "gpt-4o-mini": "[[3, 4, 5], [5, 12, 13], [8, 15, 17], [1, 1, 1], [0, 4, 4], [-3, -4, -5], [6, 8, 10], [7, 24, 25], [5, 5, 5], [9, 40, 41]]"}}
{"task_id": "HumanEval/158", "requirement": "from typing import List\n\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"", "entry_point": "find_max", "canonical_solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n", "input_output_examples": "[[[['name', 'of', 'string']], [['name', 'enam', 'game']], [['aaaaaaa', 'bb', 'cc']]], [['string'], ['enam'], ['aaaaaaa']]]", "starter_code": "from typing import List\ndef find_max(words: List[str]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[['name', 'of', 'string']], [['name', 'enam', 'game']], [['aaaaaaa', 'bb', 'cc']], [['abc', 'def', 'ghi']], [['a', 'b', 'c']], [['hello', 'world', 'python']], [['unique', 'characters', 'test']], [['', 'empty', 'string']], [['repeat', 'repeat', 'repeat']], [['zebra', 'apple', 'banana']]]", "qwen2.5-coder-32b-instruct": "[[['name', 'of', 'string']], [['name', 'enam', 'game']], [['aaaaaaa', 'bb', 'cc']], [['apple', 'banana', 'cherry']], [['abc', 'abcd', 'abcde']], [['a', 'b', 'c']], [['']], [[]], [['same', 'same', 'same']], [['unique', 'unicorn', 'unity']]]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry', 'date']], [['hello', 'world', 'python', 'programming']], [['a', 'an', 'ant', 'abc']], [['unique', 'characters', 'are', 'fun']], [['apple', 'apricot', 'banana', 'grape']], [['abc', 'def', 'ghi', 'jkl']], [['aaa', 'aa', 'a']], [['abcdefg', 'abcdef', 'abc']], [['cat', 'dog', 'fish', 'bear']], [['a', 'b', 'c', 'd', 'e']]]"}}
{"task_id": "HumanEval/159", "requirement": "from typing import List\n\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "entry_point": "eat", "canonical_solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n", "input_output_examples": "[[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5]], [[[11, 4]], [[12, 1]], [[11, 0]], [[7, 0]]]]", "starter_code": "from typing import List\ndef eat(number: int, need: int, remaining: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [0, 0, 100], [50, 50, 50], [100, 200, 150], [500, 600, 700], [1000, 1000, 1000], [0, 1000, 1000], [1000, 0, 1000], [1000, 1000, 0], [500, 1000, 500], [1000, 500, 500]]", "qwen2.5-coder-32b-instruct": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [1000, 1000, 1000], [500, 500, 250], [500, 250, 500], [0, 1000, 500], [0, 1000, 1000], [1000, 0, 0]]", "gpt-4o-mini": "[[0, 5, 10], [5, 10, 5], [10, 0, 10], [1000, 500, 100], [800, 300, 200], [0, 0, 0], [500, 600, 200], [200, 300, 0], [300, 300, 300], [999, 1, 1]]"}}
{"task_id": "HumanEval/160", "requirement": "from typing import List\n\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"", "entry_point": "do_algebra", "canonical_solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n", "input_output_examples": "[[[['+', '*', '-'], [2, 3, 4, 5]]], [[9]]]", "starter_code": "from typing import List\ndef do_algebra(operator: List[str], operand: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[['+', '*', '-'], [2, 3, 4, 5]], [['*', '+', '/'], [1, 2, 3, 4]], [['**', '//'], [5, 2, 3]], [['-', '-', '-'], [10, 2, 1, 3]], [['+'], [7, 8]], [['*', '*', '*'], [1, 2, 3, 4]], [['//', '+'], [9, 3, 2]], [['**', '-', '+'], [2, 3, 1, 5]], [['+', '//'], [10, 0, 2]], [['*', '-', '**'], [0, 1, 2, 3]]]", "qwen2.5-coder-32b-instruct": "[[['+'], [1, 2]], [['-'], [5, 3]], [['*'], [4, 6]], [['//'], [8, 2]], [['**'], [2, 3]], [['+', '-', '*'], [2, 3, 4, 5]], [['*', '+', '**'], [2, 3, 4, 2]], [['//', '+', '-'], [10, 2, 3, 1]], [['+', '+', '+'], [0, 0, 0, 0]], [['-', '-', '-'], [10, 1, 1, 1]], [['*', '*', '*'], [1, 1, 1, 1]], [['//', '//', '//'], [16, 2, 2, 2]], [['**', '**', '**'], [2, 1, 1, 1]], [['+', '*', '-'], [100, 2, 5, 3]], [['**', '+', '*'], [2, 3, 4, 5]], [['//', '-', '+'], [100, 10, 5, 3]], [['+', '+', '+', '+'], [1, 2, 3, 4, 5]], [['-', '-', '-', '-'], [10, 1, 1, 1, 1]], [['*', '*', '*', '*'], [1, 2, 3, 4, 5]], [['//', '//', '//', '//'], [128, 2, 2, 2, 2]], [['**', '**', '**', '**'], [2, 2, 1, 1, 1]]]", "gpt-4o-mini": "[[['+', '*'], [2, 3, 4]], [['-', '+', '//'], [10, 5, 2, 1]], [['**', '*'], [2, 3, 4]], [['+', '+'], [1, 2, 3]], [['//'], [9, 2]], [['+', '-', '*', '//'], [8, 2, 4, 2, 1]], [['+', '**'], [2, 3, 2]], [['*', '//'], [3, 4, 2]], [['-', '*', '+', '//'], [8, 4, 2, 1, 2]], [['+', '-'], [10, 5, 3]]]"}}
{"task_id": "HumanEval/161", "requirement": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"", "entry_point": "solve", "canonical_solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n", "input_output_examples": "[[['1234'], ['ab'], ['#a@C']], [['4321'], ['AB'], ['#A@c']]]", "starter_code": "def solve(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], [''], ['123abcDEF!@#'], ['NoSpacesHere'], ['   '], ['A1B2C3'], ['!@#$%^&*()']]", "qwen2.5-coder-32b-instruct": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], ['123abcXYZ'], ['!@#$%^&*()'], ['aBcDeFgHiJ'], ['9876543210'], [''], ['a'], ['A'], ['1']]", "gpt-4o-mini": "[['Hello World'], ['Python is Awesome'], ['1234!@#$'], ['NoChangeHere'], ['lowercase LETTERS'], ['UPPERCASE letters'], ['123abc!@#'], [''], ['aBcDeFg'], ['!@#$%^&*']]"}}
{"task_id": "HumanEval/162", "requirement": "from typing import Union\n\n\ndef string_to_md5(text: str) -> Union[str, None]:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"", "entry_point": "string_to_md5", "canonical_solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n", "input_output_examples": "[[['Hello world'], ['']], [['3e25960a79dbc69b674cd4ec67a72c62'], [None]]]", "starter_code": "from typing import Union\ndef string_to_md5(text: str) -> Union[str, None]:", "llm_generated_inputs": {"deepseek-v3": "[['Hello world'], ['Python is fun'], ['1234567890'], ['!@#$%^&*()'], [''], ['a'], ['A'], ['This is a longer string with spaces and special characters: !@#$%^&*()'], ['   leading and trailing spaces   '], ['null'], ['None']]", "qwen2.5-coder-32b-instruct": "[['Hello world'], [''], ['123456'], ['!@#$%^'], ['The quick brown fox jumps over the lazy dog'], [' '], ['a'], ['A']]", "gpt-4o-mini": "[['hello'], ['Python'], ['123456'], ['!@#$%^&*()'], [''], ['   '], ['longer string to test the md5 hashing function']]"}}
{"task_id": "HumanEval/163", "requirement": "from typing import List\n\n\ndef generate_integers(a: int, b: int) -> List[int]:\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"", "entry_point": "generate_integers", "canonical_solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n", "input_output_examples": "[[[2, 8], [8, 2], [10, 14]], [[[2, 4, 6, 8]], [[2, 4, 6, 8]], [[]]]]", "starter_code": "from typing import List\ndef generate_integers(a: int, b: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[2, 8], [8, 2], [10, 14], [1, 1], [0, 0], [20, 30], [30, 20], [100, 105], [105, 100], [99, 101], [101, 99], [200, 200]]", "qwen2.5-coder-32b-instruct": "[[2, 8], [8, 2], [10, 14], [1, 1], [2, 2], [0, 10], [5, 5], [4, 4], [15, 20], [20, 15], [100, 105]]", "gpt-4o-mini": "[[2, 10], [4, 20], [0, 5], [6, 6], [1, 1], [10, 2], [10, 10], [5, 15], [0, 0]]"}}
