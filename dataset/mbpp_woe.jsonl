{"task_id": "Mbpp/2", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the shared elements from the given two lists.\n\"\"\"", "entry_point": "similar_elements", "canonical_solution": "def similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))", "input_output_examples": "[[[[3, 4, 5, 6], [5, 7, 4, 10]]], [[(4, 5)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3], [4, 5, 6]], [[], [1, 2, 3]], [[1, 1, 2, 3], [2, 3, 3, 4]], [[7, 7, 7, 7], [7, 7, 8, 9]], [[10, 20, 30], [10, 20, 30]], [[1, 2, 3], [1, 2, 3, 4, 5]]]", "qwen2.5-coder-32b-instruct": "[[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3], [4, 5, 6]], [[1, 1, 2, 2], [2, 2, 3, 3]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[10, 20, 30, 40], [40, 30, 20, 10]]]", "gpt-4o-mini": "[[[1, 2, 3], [3, 4, 5]], [[1, 1, 2, 3], [3, 2, 1, 1]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3], [1, 2, 3]], [[5, 6, 7], [1, 2, 3]], [[1, 2, 3, 4, 5], [3, 4, 5, 6, 7]], [[1, 2, 3], [1, 1, 2, 2, 3, 3]]]"}}
{"task_id": "Mbpp/3", "requirement": "def is_not_prime(n: int) -> bool:\n\"\"\"\nWrite a python function to identify non-prime numbers.\n\"\"\"", "entry_point": "is_not_prime", "canonical_solution": "import math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False", "input_output_examples": "[[[2]], [[False]]]", "starter_code": "def is_not_prime(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[2], [3], [4], [1], [0], [-7], [29], [30], [100]]", "qwen2.5-coder-32b-instruct": "[[2], [3], [4], [5], [9], [11], [15], [17], [18], [19], [20], [23], [24], [25], [29], [30], [-1], [0], [1]]", "gpt-4o-mini": "[[1], [4], [6], [9], [10], [12], [15], [16], [20], [25], [0], [-3], [100], [37]]"}}
{"task_id": "Mbpp/4", "requirement": "def heap_queue_largest(nums: list, n: int) -> list:\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\n\"\"\"", "entry_point": "heap_queue_largest", "canonical_solution": "import heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], [[[85, 75, 65]]]]", "starter_code": "def heap_queue_largest(nums: list, n: int) -> list:", "llm_generated_inputs": {"deepseek-v3": "[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 5], [[5, 5, 5, 5, 5], 1], [[], 0], [[7], 1], [[100, 200, 300, 400], 0], [[-5, -1, -3, -2, -4], 2]]", "qwen2.5-coder-32b-instruct": "[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[1, 2, 3, 4, 5], 5], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1], [[5, 5, 5, 5, 5], 3], [[100], 1], [[100, 200, 300], 0], [[100, 200, 300], 5], [[], 3], [[1, 2, 3], -1]]", "gpt-4o-mini": "[[[3, 1, 4, 1, 5, 9], 3], [[10, 20, 30, 40, 50], 2], [[1, 2, 3], 1], [[-10, -20, -30, -5], 2], [[1], 1], [[], 0], [[10, 20, 30, 20, 10], 5], [[5, 5, 5, 5], 3], [[1, 2, 3, 4, 5], 6]]"}}
{"task_id": "Mbpp/6", "requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n\"\"\"", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "def is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)", "input_output_examples": "[[[13, 9]], [[True]]]", "starter_code": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[13, 9], [1, 0], [15, 7], [0, 1], [255, 254], [1023, 1015], [8, 0], [4095, 4094], [123, 122], [123, 125]]", "qwen2.5-coder-32b-instruct": "[[13, 9], [0, 1], [2, 3], [4, 5], [8, 10], [1, 2], [3, 1], [15, 7], [31, 15], [16, 0], [0, 0], [5, 5], [255, 254], [1024, 1025], [2048, 2049]]", "gpt-4o-mini": "[[5, 7], [2, 3], [8, 12], [15, 14], [0, 1], [1, 0], [0, 0], [3, 2]]"}}
{"task_id": "Mbpp/7", "requirement": "from typing import List\n\n\ndef find_char_long(text: str) -> List[str]:\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\n\"\"\"", "entry_point": "find_char_long", "canonical_solution": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "input_output_examples": "[[['Please move back to stream']], [[['Please', 'move', 'back', 'stream']]]]", "starter_code": "from typing import List\ndef find_char_long(text: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['Please move back to stream'], ['hello world'], ['hi there'], ['a b c d'], [''], ['    '], ['This is a test string with punctuation, like periods. And commas!'], ['1234 567 8901'], ['LongWordWithNoSpaces'], ['a'], ['   extra   spaces   ']]", "qwen2.5-coder-32b-instruct": "[['Please move back to stream'], ['a'], ['abc'], ['abcd'], ['abcde'], ['This is a test string with some longwordsindeed'], ['short longword'], ['equal equal'], ['single'], ['multiple words here'], ['1234 56789'], ['!@#$%^ &*()'], ['MixedCASE Words'], ['1234abcd efgh5678'], ['boundary conditions']]", "gpt-4o-mini": "[['This is a test string with several words'], ['Short nope'], ['Python programming is fun'], ['Four four four'], ['A quick brown fox jumps over the lazy dog'], [''], ['abcd efgh ijkl mnop'], ['singleword']]"}}
{"task_id": "Mbpp/8", "requirement": "from typing import List\n\n\ndef square_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find squares of individual elements in a list.\n\"\"\"", "entry_point": "square_nums", "canonical_solution": "def square_nums(nums):\n return [i**2 for i in nums]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "starter_code": "from typing import List\ndef square_nums(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0]], [[-1, -2, -3, -4]], [[100, 200, 300]], [[]], [[1, 0, -1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0]], [[-1, -2, -3]], [[10, 20, 30]], [[]], [[100, 200, 300]], [[1, 0, -1, 2, -2]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[4, 5, 6]], [[-1, -2, -3]], [[0]], [[5]], [[1, -1, 0]], [[100, 200, 300]], [[2, 2, 2]], [[-5, 0, 5]], [[-10, 10]], [[3, 1, 4, 1, 5]]]"}}
{"task_id": "Mbpp/9", "requirement": "def find_Rotations(s: str) -> int:\n\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\"\"\"", "entry_point": "find_Rotations", "canonical_solution": "def find_Rotations(s): \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n", "input_output_examples": "[[['aaaa']], [[1]]]", "starter_code": "def find_Rotations(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['aaaa'], ['abab'], ['abcabcabc'], ['a'], ['abcdef'], ['abacabadabacabad'], ['xyzxyzxyzxyz'], ['ababababab'], ['ababababc'], ['aabbccddeeff']]", "qwen2.5-coder-32b-instruct": "[['aaaa'], ['abcde'], ['abab'], ['abcdabcd'], ['aabbccdd'], ['zzzzzzzz'], ['abcdefg'], ['a'], ['']]", "gpt-4o-mini": "[['abcabc'], ['abcd'], ['aaaa'], ['a'], ['abcdeabc'], [''], ['rotate'], ['aaabaaa'], ['abca']]"}}
{"task_id": "Mbpp/11", "requirement": "def remove_Occ(s: str, ch: str) -> str:\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n\n\"\"\"", "entry_point": "remove_Occ", "canonical_solution": "def remove_Occ(s,ch): \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s", "input_output_examples": "[[['hello', 'l']], [['heo']]]", "starter_code": "def remove_Occ(s: str, ch: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['hello', 'l'], ['banana', 'a'], ['mississippi', 's'], ['racecar', 'r'], ['example', 'e'], ['programming', 'm'], ['python', 'y'], ['hello', 'o'], ['hello', 'h'], ['hello', 'x'], ['', 'a'], ['a', 'a'], ['aa', 'a'], ['aaa', 'a'], ['abab', 'a'], ['abab', 'b']]", "qwen2.5-coder-32b-instruct": "[['hello', 'l'], ['abracadabra', 'a'], ['mississippi', 'i'], ['foobar', 'f'], ['foobar', 'x'], ['', 'a'], ['a', 'a'], ['aaaa', 'a'], ['abcde', 'e'], ['abcde', 'a']]", "gpt-4o-mini": "[['hello', 'l'], ['ababab', 'a'], ['abcdef', 'g'], ['', 'a'], ['a', 'a'], ['hello world', 'o'], ['mississippi', 'i'], ['aabbcc', 'b']]"}}
{"task_id": "Mbpp/12", "requirement": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\"\"\"", "entry_point": "sort_matrix", "canonical_solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "input_output_examples": "[[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], [[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]]]]", "starter_code": "from typing import List\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[5, 3], [1, 4], [2, 2]]], [[[-1, -2, -3], [-2, -4, -5], [-1, -1, -1]]], [[[], []]], [[[1]]], [[[3, 2, 1], [1, 2, 3], [1, 1, 1]]], [[[10, 20], [5, 15], [1, 1]]], [[[0, 0], [0, 0], [0, 0]]], [[[1, 2], [3, 4], [5, 6]]], [[[7, 8, 9], [1, 2, 3], [4, 5, 6]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[10, 15], [5, 20], [25, 0]]], [[[5, 5, 5], [0, 0, 0], [1, 2, 3]]], [[[3, 2, 1], [6, 5, 4], [9, 8, 7]]], [[]], [[[]]], [[[1]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]]]", "gpt-4o-mini": "[[[[3, 2, 1], [1, 2, 3], [0, 0, 0]]], [[[5, 5, 5], [6, 6, 6], [1, 1, 1]]], [[[1, 2], [3, 4], [5, 6]]], [[[7]]], [[[2, 2, 2], [1, 1, 1], [3, 3, 3]]], [[[]]], [[[2], [1], [3]]], [[[4, 5], [1, 1], [2, 2]]], [[[0, -1], [-2, 2], [-1, 1]]]]"}}
{"task_id": "Mbpp/14", "requirement": "def find_Volume(l: float, b: float, h: float) -> float:\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\n\"\"\"", "entry_point": "find_Volume", "canonical_solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2)", "input_output_examples": "[[[10, 8, 6]], [[240]]]", "starter_code": "def find_Volume(l: float, b: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10.0, 8.0, 6.0], [0.0, 8.0, 6.0], [10.0, 0.0, 6.0], [10.0, 8.0, 0.0], [-10.0, 8.0, 6.0], [10.0, -8.0, 6.0], [10.0, 8.0, -6.0], [1.5, 2.5, 3.5], [1000000.0, 1000000.0, 1000000.0], [1e-06, 1e-06, 1e-06]]", "qwen2.5-coder-32b-instruct": "[[10, 8, 6], [0, 5, 10], [5, 0, 10], [5, 10, 0], [0, 0, 0], [1.5, 2.5, 3.5], [-1, 5, 10], [5, -1, 10], [5, 10, -1], [-1, -1, -1]]", "gpt-4o-mini": "[[5.0, 3.0, 10.0], [2.5, 4.0, 6.0], [0.0, 5.0, 7.0], [-3.0, 3.0, 5.0], [3.0, 4.0, 0.0], [1.5, 2.5, 2.0], [10.0, 10.0, 10.0], [7.5, 12.0, 1.0]]"}}
{"task_id": "Mbpp/16", "requirement": "def text_lowercase_underscore(text: str) -> bool:\n\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\"\"\"", "entry_point": "text_lowercase_underscore", "canonical_solution": "import re\ndef text_lowercase_underscore(text):\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "input_output_examples": "[[['aab_cbbbc']], [[True]]]", "starter_code": "def text_lowercase_underscore(text: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['aab_cbbbc'], ['abc_def_ghi'], ['abc_def_ghi_jkl'], ['abc_123_def'], ['ABC_DEF'], ['abc_def_ghi_'], ['_abc_def'], ['abc__def'], [''], ['abc'], ['a_b_c']]", "qwen2.5-coder-32b-instruct": "[['aab_cbbbc'], ['Aab_cbbbc'], ['aab_Cbbbc'], ['aab_cbbBc'], ['aab_cbbbc_'], ['_aab_cbbbc'], ['aab__cbbbc'], ['aab_cbbbc_def'], ['aab_cbbbc123'], ['123_aab_cbbbc'], ['aab_cbbbc!'], ['aab_cbbbc '], [''], ['_'], ['a_b_c_d_e'], ['abcdefghijklmnopqrstuvwxyz'], ['a_b']]", "gpt-4o-mini": "[['abc_def'], [('abc_def_gh',)], ['abcDef'], ['abc__def'], ['ABC_def'], [('abc',)], [('abc_123',)], [('def_ghi_jkl',)], [('def_GHI',)], [('1_abc',)], [('a_b_c',)]]"}}
{"task_id": "Mbpp/17", "requirement": "def square_perimeter(a: int) -> int:\n\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\n\"\"\"", "entry_point": "square_perimeter", "canonical_solution": "def square_perimeter(a):\n  return 4*a", "input_output_examples": "[[[10]], [[40]]]", "starter_code": "def square_perimeter(a: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10], [0], [1], [100], [-5]]", "qwen2.5-coder-32b-instruct": "[[10], [0], [1], [-5], [100]]", "gpt-4o-mini": "[[1], [0], [-5], [10], [100], [1000]]"}}
{"task_id": "Mbpp/18", "requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\n\n\"\"\"", "entry_point": "remove_dirty_chars", "canonical_solution": "def remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string", "input_output_examples": "[[['probasscurve', 'pros']], [['bacuve']]]", "starter_code": "def remove_dirty_chars(string: str, second_string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['probasscurve', 'pros'], ['hello world', 'aeiou'], ['12345', '135'], ['abcde', ''], ['', 'abc'], ['abcABC', 'aB'], ['@#$%^&', '@%'], ['same', 'same'], ['different', 'xyz'], ['spaces and tabs', ' \\t']]", "qwen2.5-coder-32b-instruct": "[['probasscurve', 'pros'], ['hello', 'aeiou'], ['abcdef', 'ghijkl'], ['', 'abc'], ['abc', ''], ['', ''], ['aabbcc', 'abc'], ['python', 'nohtyp'], ['12345', '54321'], ['special!@#', '!@']]", "gpt-4o-mini": "[['hello world', 'ow'], ['python programming', 'pgn'], ['remove dirty chars', 'rty'], ['case sensitive', 'abc'], ['12345', '246'], ['', 'abc'], ['hello', ''], ['abcdef', 'abcdef'], ['', ''], ['aabbcc', 'abc']]"}}
{"task_id": "Mbpp/19", "requirement": "from typing import List\n\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\n\"\"\"", "entry_point": "test_duplicate", "canonical_solution": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[False]]]", "starter_code": "from typing import List\ndef test_duplicate(arraynums: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 1]], [[]], [[1]], [[1, 1]], [[1, 2, 3, 2, 4]], [[10, 20, 30, 20, 40]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5]], [[1, 2, 2, 3, 4]], [[]], [[10]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]], [[100, 200, 300, 400, 500, 100]], [[-1, -2, -3, -4, -5, -1]], [[0, 0, 0, 0]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[1, 2, 3, 2, 4]], [[0, -1, 1, -1]], [[10, 20, 30, 40, 50, 10]], [[]], [[1]], [[3, 3, 3, 3]], [[1, 1, 2, 2, 3, 3]]]"}}
{"task_id": "Mbpp/20", "requirement": "def is_woodall(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given number is woodall or not.\n\"\"\"", "entry_point": "is_woodall", "canonical_solution": "def is_woodall(x): \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False", "input_output_examples": "[[[383]], [[True]]]", "starter_code": "def is_woodall(num: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[383], [1], [7], [23], [63], [159], [100], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [7], [23], [383], [319], [-5], [-1], [1000]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [7], [15], [9], [8], [13], [10], [27], [36], [0], [-1], [100]]"}}
{"task_id": "Mbpp/56", "requirement": "def check(n: int) -> bool:\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\n\"\"\"", "entry_point": "check", "canonical_solution": "def check(n):    \n    return n == 2 * int(str(n)[::-1]) - 1", "input_output_examples": "[[[70]], [[False]]]", "starter_code": "def check(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[70], [37], [0], [1], [100], [123], [53], [999]]", "qwen2.5-coder-32b-instruct": "[[70], [21], [0], [1], [9], [10], [11], [12], [23], [55], [99], [100], [201], [-1], [-21]]", "gpt-4o-mini": "[[12], [21], [0], [1], [9], [10], [99], [101], [1001], [200]]"}}
{"task_id": "Mbpp/57", "requirement": "from typing import List\n\n\ndef find_Max_Num(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\n\"\"\"", "entry_point": "find_Max_Num", "canonical_solution": "def find_Max_Num(arr) : \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))", "input_output_examples": "[[[[1, 2, 3]]], [[321]]]", "starter_code": "from typing import List\ndef find_Max_Num(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[9, 8, 7, 6]], [[0, 0, 0]], [[5]], [[1, 0, 2, 9]], [[9, 9, 9, 9]], [[4, 3, 2, 1, 0]], [[1, 3, 2, 1, 3]], [[8, 7, 6, 5, 4, 3, 2, 1]], [[0, 1, 0, 1, 0]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[3, 2, 1]], [[0, 0, 0]], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], [[1]], [[5, 5, 5, 5]], [[9, 9, 8, 8, 7, 7, 6, 6]], [[10, 20, 30]]]", "gpt-4o-mini": "[[[3, 30, 34, 5, 9]], [[0, 0, 0]], [[9, 5, 34, 3, 30]], [[1, 2, 3, 4, 5]], [[5]], [[-1, -2, -3]], [[0, 1, 2, 10]], [[2, 22, 223]]]"}}
{"task_id": "Mbpp/58", "requirement": "def opposite_Signs(x: int, y: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\n\"\"\"", "entry_point": "opposite_Signs", "canonical_solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0)", "input_output_examples": "[[[1, -2]], [[True]]]", "starter_code": "def opposite_Signs(x: int, y: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1, -2], [-1, 2], [0, 0], [0, 5], [-3, 0], [10, 10], [-7, -7], [2147483647, -2147483648], [-2147483648, 2147483647]]", "qwen2.5-coder-32b-instruct": "[[1, -2], [-5, 10], [0, 5], [0, -3], [7, 3], [-8, -4], [100, -100], [-256, 256], [-1, 1]]", "gpt-4o-mini": "[[-5, 5], [0, 10], [-10, 0], [-1, 1], [1, -1], [-42, 42], [-999, 500], [7, -3], [10, -10], [-15, -20]]"}}
{"task_id": "Mbpp/59", "requirement": "def is_octagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth octagonal number.\n\"\"\"", "entry_point": "is_octagonal", "canonical_solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n", "input_output_examples": "[[[5]], [[65]]]", "starter_code": "def is_octagonal(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [5], [10], [0], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [0], [-1], [10], [100], [1000]]"}}
{"task_id": "Mbpp/61", "requirement": "def count_Substrings(s: str) -> int:\n\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\"\"\"", "entry_point": "count_Substrings", "canonical_solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count", "input_output_examples": "[[['112112']], [[6]]]", "starter_code": "def count_Substrings(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['112112'], ['123'], ['11'], ['1'], ['121212'], ['000'], ['10101'], ['999'], ['']]", "qwen2.5-coder-32b-instruct": "[['112112'], ['000'], ['12345'], ['111'], ['987654321'], [''], ['1'], ['12'], ['11']]", "gpt-4o-mini": "[['123'], ['111'], ['222'], ['12345'], ['000'], ['1'], [''], ['987654321'], ['1111'], ['123321']]"}}
{"task_id": "Mbpp/62", "requirement": "from typing import List\n\n\ndef smallest_num(xs: List[int]) -> int:\n\"\"\"\nWrite a python function to find smallest number in a list.\n\"\"\"", "entry_point": "smallest_num", "canonical_solution": "def smallest_num(xs):\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)", "input_output_examples": "[[[[10, 20, 1, 45, 99]]], [[1]]]", "starter_code": "from typing import List\ndef smallest_num(xs: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 20, 1, 45, 99]], [[5, 4, 3, 2, 1]], [[100, 200, 300, 400, 500]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0, 0]], [[]], [[42]], [[1, 1, 1, 1, 1]], [[10, 20, -1, 45, 99]]]", "qwen2.5-coder-32b-instruct": "[[[10, 20, 1, 45, 99]], [[3, 1, 4, 1, 5, 9]], [[0, -1, -2, -3, -4]], [[100]], [[]], [[7, 7, 7, 7]]]", "gpt-4o-mini": "[[[3, 1, 2]], [[10, 5, -1, 0]], [[-5, -1, -10]], [[100, 200, 300]], [[1]], [[]], [[5, 5, 5, 5]]]"}}
{"task_id": "Mbpp/63", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\"\"\"", "entry_point": "max_difference", "canonical_solution": "def max_difference(test_list):\n  return max(abs(a - b) for a, b in test_list)", "input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]]], [[7]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(1, 1)]], [[(10, 1), (5, 5), (7, 3)]], [[]], [[(0, 0), (0, 0)]], [[(100, 50), (200, 150), (300, 250)]], [[(2, 10), (1, 5), (3, 3)]]]", "qwen2.5-coder-32b-instruct": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(10, 2), (5, 5), (8, 3)]], [[(1, 1), (2, 2), (3, 3)]], [[(-1, -5), (-3, -2), (-4, -8)]], [[(100, 50), (200, 150), (300, 250)]], [[(0, 0)]], [[]]]", "gpt-4o-mini": "[[[(1, 2), (3, 5), (6, 10)]], [[(10, 1), (20, 5), (30, 10)]], [[(0, 0), (0, 0), (0, 0)]], [[(1, 2), (2, 3), (3, 4), (10, 5)]], [[(100, 200), (150, 250), (300, 400)]], [[(1, 10), (10, 1), (5, 5)]]]"}}
{"task_id": "Mbpp/64", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\n\"\"\"", "entry_point": "subject_marks", "canonical_solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "input_output_examples": "[[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]]], [[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('Physics', 75), ('Chemistry', 85), ('Biology', 80)]], [[('History', 92), ('Geography', 78), ('Economics', 88)]], [[('Art', 95), ('Music', 85), ('Drama', 90)]], [[('Computer Science', 100), ('Mathematics', 99), ('Physics', 98)]], [[('Literature', 70), ('Philosophy', 65), ('Psychology', 75)]], [[('English', 50), ('Maths', 60), ('Science', 55)]], [[('Subject A', 0), ('Subject B', 100), ('Subject C', 50)]], [[('Subject X', 1), ('Subject Y', 2), ('Subject Z', 3)]], [[('Subject P', 100), ('Subject Q', 100), ('Subject R', 100)]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('History', 75), ('Geography', 75), ('Physics', 85)]], [[('Chemistry', 100)]], [[]], [[('Biology', 60), ('Art', 50), ('Music', 40), ('Physical Education', 30)]]]", "gpt-4o-mini": "[[[('Math', 90), ('Science', 85), ('English', 95)]], [[('History', 75), ('Art', 80), ('Geography', 70)]], [[('Biology', 88), ('Chemistry', 92)]], [[('Physics', 100), ('Literature', 80), ('Music', 88)]], [[('PE', 60), ('Math', 60), ('Science', 60)]], [[('Math', 50), ('Math', 100)]], [[('CS', 90)]], [[('English', 85), ('Art', 85), ('History', 85)]]]"}}
{"task_id": "Mbpp/65", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\"\"\"\nWrite a function to flatten a list and sum all of its elements.\n\"\"\"", "entry_point": "recursive_list_sum", "canonical_solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]]], [[21]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, [3, 4], [5, 6]]], [[[1, 2], [3, 4], [5, 6]]], [[1, 2, 3, 4, 5, 6]], [[[1, [2, [3, [4, [5, [6]]]]]]]], [[]], [[1]], [[[1]]], [[1, [2, 3], [4, [5, 6, [7, 8, [9]]]]]], [[[], [1, 2], [3, [4, []]]]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, [3, 4], [5, 6]]], [[1, [2, [3, [4, [5]]]]]], [[]], [[1, 2, 3, 4, 5]], [[[[1]], 2, [3, [4, 5]]]], [[0, [0, [0, [0]]]]], [[[-1, -2, [-3, -4], [-5, -6]]]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[1, [2, 3], 4]], [[[1, 2], [3, 4]]], [[1, [2, [3, 4]], 5]], [[]], [[1, [2, [3, [4, [5]]]]]], [[1, 'two', 3]], [[None, [2, 3]]], [[1, [2, [], [3]], [4]]], [[1.1, 2.2, [3.3], [4.4, [5.5]]]]]"}}
{"task_id": "Mbpp/66", "requirement": "from typing import List\n\n\ndef pos_count(l: List[int]) -> int:\n\"\"\"\nWrite a python function to count the number of positive numbers in a list.\n\"\"\"", "entry_point": "pos_count", "canonical_solution": "def pos_count(l):\n  return len([x for x in l if x > 0])", "input_output_examples": "[[[[1, -2, 3, -4]]], [[2]]]", "starter_code": "from typing import List\ndef pos_count(l: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, -2, 3, -4]], [[0, 0, 0, 0]], [[]], [[5, 10, 15, 20]], [[-1, -2, -3, -4]], [[1, 2, 3, -1, -2, -3]], [[100, -100, 200, -200]], [[0, 1, -1, 2, -2]]]", "qwen2.5-coder-32b-instruct": "[[[1, -2, 3, -4]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[]], [[1]], [[-1]], [[0]], [[1, -1, 0]], [[100, 200, 300]], [[-100, -200, -300]]]", "gpt-4o-mini": "[[[1, -2, 3, 4, 0]], [[-1, -2, -3, -4]], [[0]], [[2, 3, 5, 7, 11]], [[10, -5, -10, 15, 0]], [[100, 200, 300]], [[-5, -15, -25, -35]], [[0, 0, 0]], [[1, 2, 3, 4, 5, 6]], [[-1, 2, -3, 4, -5]]]"}}
{"task_id": "Mbpp/67", "requirement": "def bell_number(n: int) -> int:\n\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\n\"\"\"", "entry_point": "bell_number", "canonical_solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0]", "input_output_examples": "[[[2]], [[2]]]", "starter_code": "def bell_number(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [5], [10]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]", "gpt-4o-mini": "[[0], [1], [2], [3], [10], [20], [100]]"}}
{"task_id": "Mbpp/68", "requirement": "from typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\n\"\"\"", "entry_point": "is_Monotonic", "canonical_solution": "def is_Monotonic(A): \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))", "input_output_examples": "[[[[6, 5, 4, 4]]], [[True]]]", "starter_code": "from typing import List\ndef is_Monotonic(arr: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[6, 5, 4, 4]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1]], [[]], [[1]], [[3, 3, 2, 1]], [[1, 2, 2, 3, 4]], [[1, 3, 2, 4]], [[5, 5, 5, 5, 5]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]], [[1, 2, 4, 5]], [[1, 1, 1]], [[5, 5, 5, 5]], [[10]], [[]], [[7, 7, 7, 8, 9, 10]], [[10, 9, 8, 8, 7, 6]]]", "gpt-4o-mini": "[[[1, 2, 2, 3]], [[6, 5, 4, 4]], [[1, 3, 2]], [[1, 1, 1]], [[-1, -2, -3, -4]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1]], [[]], [[1, 2, 3, 4, 2]]]"}}
{"task_id": "Mbpp/69", "requirement": "from typing import List\n\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\n\"\"\"", "entry_point": "is_sublist", "canonical_solution": "def is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))", "input_output_examples": "[[[[2, 4, 3, 5, 7], [3, 7]]], [[False]]]", "starter_code": "from typing import List\ndef is_sublist(l: List[int], s: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 4, 3, 5, 7], [3, 5]], [[2, 4, 3, 5, 7], [3, 7]], [[1, 2, 3, 4, 5], [1, 2, 3]], [[1, 2, 3, 4, 5], [2, 3, 4]], [[1, 2, 3, 4, 5], [5]], [[1, 2, 3, 4, 5], [6]], [[1, 2, 3, 4, 5], []], [[], [1, 2]], [[], []], [[1, 1, 1, 2, 2], [1, 1, 2]], [[1, 1, 1, 2, 2], [1, 2, 2]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5], [1, 3, 5]], [[1, 2, 3, 4, 5], [1, 3, 2]]]", "qwen2.5-coder-32b-instruct": "[[[2, 4, 3, 5, 7], [3, 7]], [[1, 2, 3, 4, 5], [2, 3]], [[1, 2, 3, 4, 5], [5]], [[1, 2, 3, 4, 5], [1]], [[1, 2, 3, 4, 5], []], [[1, 2, 3, 4, 5], [6]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [2, 4, 5]], [[1, 2, 2, 3, 4], [2, 2]], [[1, 2, 3, 4, 5], [5, 4]]]", "gpt-4o-mini": "[[[1, 2, 3, 4], [2, 3]], [[1, 2, 3, 4], [5, 6]], [[1, 2, 3, 4, 5, 6], [1, 2, 3]], [[1, 1, 1, 1], [1, 1]], [[1, 2, 3, 4], []], [[], [1]], [[], []], [[5, 6, 7], [6, 7]], [[0, 1, 2, 3], [1, 2, 3, 4]], [[10, 20, 30], [30]]]"}}
{"task_id": "Mbpp/70", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_equal(Input: List[Tuple]) -> bool:\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\n\"\"\"", "entry_point": "get_equal", "canonical_solution": "def get_equal(Input):\n  return len(set(len(item) for item in Input)) == 1", "input_output_examples": "[[[[(11, 22, 33), (44, 55, 66)]]], [[True]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef get_equal(Input: List[Tuple]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[(1, 2, 3), (4, 5, 6)]], [[(1, 2), (3, 4), (5, 6)]], [[(1,), (2,), (3,)]], [[(1, 2, 3), (4, 5), (6, 7, 8)]], [[]], [[(1, 2, 3)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9, 10)]], [[(1,), (2, 3), (4, 5, 6)]]]", "qwen2.5-coder-32b-instruct": "[[[(11, 22, 33), (44, 55, 66)]], [[(1, 2), (3, 4, 5)]], [[(1,), (2,), (3,)]], [[]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1, 2, 3), (4, 5), (6, 7, 8, 9)]], [[(1, 2, 3), (1, 2, 3), (1, 2, 3)]]]", "gpt-4o-mini": "[[[(1, 2), (3, 4), (5, 6)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1,), (2,), (3,)]], [[(1, 2), (3, 4, 5)]], [[(), (), ()]], [[(1, 2), (3, 4), (5, 6, 7)]]]"}}
{"task_id": "Mbpp/71", "requirement": "from typing import List\n\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\n\"\"\"", "entry_point": "comb_sort", "canonical_solution": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums", "input_output_examples": "[[[[5, 15, 37, 25, 79]]], [[[5, 15, 25, 37, 79]]]]", "starter_code": "from typing import List\ndef comb_sort(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 15, 37, 25, 79]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[42]], [[]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[3, 6, 8, 10, 1, 2, 1]], [[-5, -1, -3, -2, -4]], [[0, 0, 0, 0]], [[1000000, 1, 999999, 2, 999998]]]", "qwen2.5-coder-32b-instruct": "[[[5, 15, 37, 25, 79]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[5]], [[]], [[3, 3, 3, 3, 3]], [[100, -100, 50, -50, 0]]]", "gpt-4o-mini": "[[[5, 3, 8, 4, 2]], [[1]], [[]], [[10, -1, 2, 4, 3]], [[3, 2, 1]], [[7, 7, 7, 7]], [[5, 1, 4, 2, 3, 6]], [[100, 23, 5, 67, 89, 0]], [[-10, -1, -5]], [[1, 2, 3, 4, 5]]]"}}
{"task_id": "Mbpp/72", "requirement": "def dif_Square(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\"\"\"", "entry_point": "dif_Square", "canonical_solution": "def dif_Square(n): \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2", "input_output_examples": "[[[5]], [[True]]]", "starter_code": "def dif_Square(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[5], [16], [3], [0], [-1], [1], [13], [25], [100], [7]]", "qwen2.5-coder-32b-instruct": "[[5], [3], [0], [1], [2], [4], [9], [15], [16], [-1], [-5]]", "gpt-4o-mini": "[[1], [0], [4], [9], [15], [16], [25], [-1], [2], [8]]"}}
{"task_id": "Mbpp/74", "requirement": "from typing import List\n\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\n\"\"\"", "entry_point": "is_samepatterns", "canonical_solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)", "input_output_examples": "[[[['red', 'green', 'green'], ['a', 'b', 'b']]], [[True]]]", "starter_code": "from typing import List\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[['red', 'green', 'green'], ['a', 'b', 'b']], [['blue', 'blue', 'blue'], ['x', 'x', 'x']], [['yellow', 'red', 'yellow'], ['a', 'b', 'a']], [['purple', 'orange', 'purple', 'orange'], ['c', 'd', 'c', 'd']], [['black', 'white', 'black'], ['x', 'y', 'z']], [['green', 'green', 'blue'], ['a', 'a', 'a']], [['red', 'green', 'blue'], ['a', 'b', 'c']], [[], []], [['red'], ['a']], [['red', 'green', 'blue'], ['a', 'b', 'b']]]", "qwen2.5-coder-32b-instruct": "[[['red', 'green', 'green'], ['a', 'b', 'b']], [['red', 'green', 'blue'], ['a', 'b', 'c']], [['red', 'red', 'red'], ['a', 'a', 'a']], [['red', 'green'], ['a', 'b']], [[], []], [['red'], ['a']], [['red', 'green', 'green'], ['a', 'b', 'c']], [['red', 'green', 'blue', 'blue'], ['a', 'b', 'c', 'c']], [['red', 'green', 'blue'], ['a', 'a', 'a']]]", "gpt-4o-mini": "[[['red', 'blue', 'green'], ['A', 'B', 'C']], [['red', 'blue', 'green'], ['A', 'A', 'B']], [[], []], [['red'], ['A']], [['red', 'blue', 'green'], ['A', 'B']], [['red', 'blue', 'green'], ['A', 'B', 'B']], [['red', 'red', 'blue'], ['A', 'A', 'B']], [['blue', 'blue'], ['A', 'A']], [['yellow', 'yellow', 'blue'], ['A', 'B', 'B']]]"}}
{"task_id": "Mbpp/75", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\"\"\"", "entry_point": "find_tuples", "canonical_solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6]], [[[(6, 24, 12)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:", "llm_generated_inputs": {"deepseek-v3": "[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(10, 20, 30), (15, 25, 35), (40, 50, 60)], 5], [[(3, 9, 12), (4, 8, 16), (5, 10, 15)], 3], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1], [[(0, 0, 0), (1, 1, 1), (2, 2, 2)], 2], [[(11, 22, 33), (44, 55, 66), (77, 88, 99)], 11], [[(100, 200), (300, 400), (500, 600)], 100], [[], 5], [[(5, 10, 15), (20, 25, 30), (35, 40, 45)], 0]]", "qwen2.5-coder-32b-instruct": "[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(3, 9, 15), (10, 20, 30), (14, 28, 42)], 3], [[(5, 10, 15), (20, 25, 30), (35, 40, 45)], 5], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1], [[(8, 16, 24), (10, 20, 30), (12, 24, 36)], 4], [[(2, 4, 6), (3, 6, 9), (5, 10, 15)], 2], [[], 5], [[(0, 0, 0), (0, 1, 2), (3, 0, 6)], 0], [[(10, 20, 30), (15, 25, 35), (20, 40, 60)], 10], [[(11, 22, 33), (22, 44, 66), (33, 66, 99)], 11]]", "gpt-4o-mini": "[[[(2, 4, 6), (1, 3, 5), (8, 10, 12), (18, 24), (9, 15)], 2], [[(10, 20), (25, 30, 35), (5, 10), (7, 14)], 5], [[(3, 6, 9), (1, 1), (10, 5)], 3], [[(4,), (8, 16, 32), (5, 7)], 4], [[(), (7, 14, 21), (2,)], 7], [[(10, 15, 20), (9, 12)], 1], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10], [[], 3]]"}}
{"task_id": "Mbpp/77", "requirement": "def is_Diff(n: int) -> bool:\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\n\"\"\"", "entry_point": "is_Diff", "canonical_solution": "def is_Diff(n): \n    return n % 11 == 0", "input_output_examples": "[[[12345]], [[False]]]", "starter_code": "def is_Diff(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[12345], [121], [0], [11], [22], [123456789], [12345678], [-121], [-12345]]", "qwen2.5-coder-32b-instruct": "[[12345], [0], [11], [-11], [22], [-22], [1001], [-1001], [121], [-121], [9], [-9], [123456789], [-123456789]]", "gpt-4o-mini": "[[0], [11], [22], [10], [33], [-11], [-22], [5], [101], [123456789]]"}}
{"task_id": "Mbpp/79", "requirement": "def word_len(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\n\"\"\"", "entry_point": "word_len", "canonical_solution": "def word_len(s): \n    return len(s) % 2 == 1", "input_output_examples": "[[['Hadoop']], [[False]]]", "starter_code": "def word_len(s: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['Hadoop'], ['Python'], ['Java'], ['C++'], ['a'], [''], ['abcdefghijklmnopqrstuvwxyz'], ['1234567890'], ['!@#$%^&*()'], [' ']]", "qwen2.5-coder-32b-instruct": "[['Hadoop'], ['Python'], ['Java'], ['R'], [''], ['a'], ['OpenAI'], ['ChatGPT']]", "gpt-4o-mini": "[['hello'], ['word'], ['python'], ['abcdefghijklmnopqrstuvwxyz'], [''], ['a'], ['123'], ['!']]"}}
{"task_id": "Mbpp/80", "requirement": "def tetrahedral_number(n: int) -> float:\n\"\"\"\nWrite a function to find the nth tetrahedral number.\n\"\"\"", "entry_point": "tetrahedral_number", "canonical_solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "input_output_examples": "[[[5]], [[35]]]", "starter_code": "def tetrahedral_number(n: int) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[5], [1], [10], [0], [-3]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [10], [0], [-1], [-5]]", "gpt-4o-mini": "[[1], [2], [3], [10], [0], [-1], [100], [6]]"}}
{"task_id": "Mbpp/82", "requirement": "def volume_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"", "entry_point": "volume_sphere", "canonical_solution": "import math\ndef volume_sphere(r):\n  return (4./3.) * math.pi * (r**3)", "input_output_examples": "[[[10]], [[4188.790204786391]]]", "starter_code": "def volume_sphere(r: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10.0], [0.0], [-5.0], [1.5], [100.0]]", "qwen2.5-coder-32b-instruct": "[[10], [0], [1], [1.5], [2.3], [-1], [-5.5], [100]]", "gpt-4o-mini": "[[1.0], [0.0], [5.0], [10.0], [2.5], [-3.0], [100.0], [3.14159], [1e-10]]"}}
{"task_id": "Mbpp/84", "requirement": "def sequence(n: int) -> int:\n\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\n\"\"\"", "entry_point": "sequence", "canonical_solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]", "input_output_examples": "[[[10]], [[6]]]", "starter_code": "def sequence(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [20], [30], [40], [50], [100], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [0], [-1], [-5]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [10], [15], [20], [50], [100]]"}}
{"task_id": "Mbpp/85", "requirement": "def surfacearea_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"", "entry_point": "surfacearea_sphere", "canonical_solution": "import math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * (r**2)", "input_output_examples": "[[[10]], [[1256.6370614359173]]]", "starter_code": "def surfacearea_sphere(r: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10.0], [0.0], [1.0], [100.0], [-5.0]]", "qwen2.5-coder-32b-instruct": "[[10], [0], [1], [1.5], [100], [-1], [-10.5], [0.001], [1000000]]", "gpt-4o-mini": "[[1.0], [0.0], [-1.0], [10.5], [100.0], [3.14], [2.5], [10000000000.0]]"}}
{"task_id": "Mbpp/86", "requirement": "def centered_hexagonal_number(n: int) -> int:\n\"\"\"\nWrite a function to find nth centered hexagonal number.\n\"\"\"", "entry_point": "centered_hexagonal_number", "canonical_solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "input_output_examples": "[[[10]], [[271]]]", "starter_code": "def centered_hexagonal_number(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [0], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "gpt-4o-mini": "[[1], [2], [3], [10], [0], [-1]]"}}
{"task_id": "Mbpp/87", "requirement": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\n\"\"\"", "entry_point": "merge_dictionaries_three", "canonical_solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "input_output_examples": "[[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]], [[{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}]]]", "starter_code": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:", "llm_generated_inputs": {"deepseek-v3": "[[{'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}], [{'x': 'apple', 'y': 'banana'}, {'z': 'cherry'}, {'x': 'apricot', 'w': 'watermelon'}], [{}, {}, {}], [{'key1': 'value1'}, {'key1': 'value2'}, {'key1': 'value3'}], [{'A': 1, 'B': 2}, {'A': 3, 'C': 4}, {'B': 5, 'C': 6}], [{'a': {'nested': 1}}, {'b': {'nested': 2}}, {'a': {'nested': 3}}], [{'a': [1, 2]}, {'b': [3, 4]}, {'a': [5, 6]}]]", "qwen2.5-coder-32b-instruct": "[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}], [{}, {}, {}], [{'key1': 'value1'}, {'key2': 'value2'}, {'key3': 'value3'}], [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}], [{'x': 'one'}, {}, {'x': 'two'}], [{'same': 'value'}, {'same': 'value'}, {'same': 'value'}]]", "gpt-4o-mini": "[[{'a': 1}, {'b': 2}, {'c': 3}], [{'key1': 'value1'}, {'key2': 'value2'}, {'key1': 'value3'}], [{}, {}, {}], [{'shared': 1}, {'shared': 2}, {'shared': 3}], [{'single_key': 'single_value'}, {}, {'another_key': 'another_value'}], [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'d': 5}]]"}}
{"task_id": "Mbpp/88", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\"\"\"", "entry_point": "freq_count", "canonical_solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "input_output_examples": "[[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], [[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[]], [['a', 'b', 'a', 'c', 'b', 'a']], [[True, False, True, True, False]], [[1.1, 2.2, 1.1, 3.3, 2.2, 1.1]], [[None, None, 1, 2, 1, None]], [[[1, 2], [1, 2], [3, 4], [1, 2]]]]", "qwen2.5-coder-32b-instruct": "[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [['a', 'b', 'c', 'a', 'b', 'a']], [[]], [[1]], [[None, None, 1, 1, 'a', 'a']], [[True, False, True, True]]]", "gpt-4o-mini": "[[[1, 2, 2, 3, 1, 4]], [['apple', 'banana', 'apple', 'orange', 'banana', 'banana']], [['a', 'b', 'a', 'b', 'a', 'c']], [[True, False, True, True, False]], [['', '', 'hello', 'world', 'hello']], [[]], [['single']], [[1, 1, 1, 1, 1]], [[None, None, None]]]"}}
{"task_id": "Mbpp/89", "requirement": "def closest_num(N: int) -> int:\n\"\"\"\nWrite a function to find the closest smaller number than n.\n\"\"\"", "entry_point": "closest_num", "canonical_solution": "def closest_num(N):\n  return (N - 1)", "input_output_examples": "[[[11]], [[10]]]", "starter_code": "def closest_num(N: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[11], [1], [100], [0], [-5], [2], [-1]]", "qwen2.5-coder-32b-instruct": "[[11], [1], [0], [-1], [-10], [100], [999]]", "gpt-4o-mini": "[[10], [1], [0], [-5], [-1], [100], [50], [2]]"}}
{"task_id": "Mbpp/90", "requirement": "from typing import List\n\n\ndef len_log(list1: List[str]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest word.\n\"\"\"", "entry_point": "len_log", "canonical_solution": "def len_log(list1):\n    return max(len(x) for x in list1)", "input_output_examples": "[[[['python', 'PHP', 'bigdata']]], [[7]]]", "starter_code": "from typing import List\ndef len_log(list1: List[str]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[['python', 'PHP', 'bigdata']], [['a', 'bb', 'ccc', 'dddd']], [['', ' ', '  ', '   ']], [['hello', 'world', 'python']], [[]], [['single']], [['longestword', 'short', 'medium']], [['123456789', '123', '123456']]]", "qwen2.5-coder-32b-instruct": "[[['python', 'PHP', 'bigdata']], [['a', 'ab', 'abc']], [['longestword', 'short', 'tiny']], [[]], [['equal', 'equal', 'equal']], [['single']], [['', 'nonempty', 'string']], [['verylongwordindeed', 'short', 'tiny']]]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry', 'date', 'elderberry']], [['short', 'tiny']], [['longestword', 'medium', 'small']], [['a', 'ab', 'abc', 'abcd', 'abcde']], [['', 'single', 'words', 'in', 'the', 'list']], [['cat', 'dog', 'elephant', 'tiger']], [['unicode', '漢字', '日本語', '😊']], [['', '']], [['oneword']]]"}}
{"task_id": "Mbpp/91", "requirement": "from typing import List\n\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\n\"\"\"", "entry_point": "find_substring", "canonical_solution": "def find_substring(str1, sub_str):\n   return any(sub_str in s for s in str1)", "input_output_examples": "[[[['red', 'black', 'white', 'green', 'orange'], 'ack']], [[True]]]", "starter_code": "from typing import List\ndef find_substring(str1: List[str], sub_str: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[['red', 'black', 'white', 'green', 'orange'], 'ack'], [['apple', 'banana', 'cherry'], 'ana'], [['hello', 'world'], 'xyz'], [['', 'abc', 'def'], ''], [['abc', '', 'def'], 'abc'], [['abc', 'def', 'ghi'], 'jkl'], [['abc', 'abc', 'abc'], 'abc'], [['a', 'b', 'c'], 'a'], [['longword', 'short', 'medium'], 'medium'], [['case', 'sensitive', 'test'], 'Case']]", "qwen2.5-coder-32b-instruct": "[[['red', 'black', 'white', 'green', 'orange'], 'ack'], [['red', 'black', 'white', 'green', 'orange'], 'blue'], [[], 'ack'], [['red', 'black', 'white', 'green', 'orange'], ''], [['red', 'black', 'white', 'green', 'orange'], 'orange'], [['red', 'black', 'white', 'green', 'orange'], 'red'], [['red', 'black', 'white', 'green', 'orange'], 'e'], [['red', 'black', 'white', 'green', 'orange'], 'z']]", "gpt-4o-mini": "[[['hello', 'world', 'foo', 'bar'], 'world'], [['apple', 'banana', 'orange'], 'grape'], [['test', 'find', 'substring'], 'find'], [['case', 'sensitive', 'test'], 'sensitive'], [[], 'empty'], [['single'], 'single'], [['duplicate', 'duplicate'], 'duplicate'], [['leading', 'edges'], 'edges']]"}}
{"task_id": "Mbpp/92", "requirement": "def is_undulating(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\n\"\"\"", "entry_point": "is_undulating", "canonical_solution": "def is_undulating(n): \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))", "input_output_examples": "[[[1212121]], [[True]]]", "starter_code": "def is_undulating(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1212121], [1232123], [131313], [12345], [111111], [121], [12], [1], [0], [123123123]]", "qwen2.5-coder-32b-instruct": "[[1212121], [123123], [787878], [121], [12], [1], [101010], [1001], [989898], [111], [222], [12321], [45654], [112211], [1221]]", "gpt-4o-mini": "[[121], [123], [12123], [232], [12321], [0], [1], [10], [22], [1210], [111]]"}}
{"task_id": "Mbpp/93", "requirement": "def power(a: int, b: int) -> int:\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\n\"\"\"", "entry_point": "power", "canonical_solution": "def power(a, b):\n\treturn a ** b", "input_output_examples": "[[[3, 4]], [[81]]]", "starter_code": "def power(a: int, b: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[3, 4], [2, 5], [5, 0], [-2, 3], [-3, 2], [0, 0], [1, 100], [10, -1], [-1, 4], [-1, 3]]", "qwen2.5-coder-32b-instruct": "[[3, 4], [2, 3], [5, 0], [0, 5], [0, 0], [-2, 3], [-2, 2], [2, -3], [-2, -3], [10, 1], [1, 10]]", "gpt-4o-mini": "[[2, 3], [5, 0], [10, -1], [3, 2], [4, 0], [0, 5], [1, 100], [-2, 3], [-3, 2], [0, 0]]"}}
{"task_id": "Mbpp/94", "requirement": "from typing import List\n\n\ndef index_minimum(test_list: List[tuple]) -> any:\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\"\"\"", "entry_point": "index_minimum", "canonical_solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res)", "input_output_examples": "[[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]]], [['Varsha']]]", "starter_code": "from typing import List\ndef index_minimum(test_list: List[tuple]) -> any:", "llm_generated_inputs": {"deepseek-v3": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [[('Alice', 50), ('Bob', 30), ('Charlie', 70)]], [[('X', 10), ('Y', 10), ('Z', 5)]], [[('A', 1000), ('B', 100), ('C', 100), ('D', 50)]], [[('One', -10), ('Two', 0), ('Three', 10)]], [[('First', 1)]], [[]], [[('Same', 5), ('Same', 5), ('Same', 5)]]]", "qwen2.5-coder-32b-instruct": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [[('Alice', 5), ('Bob', 2), ('Charlie', 8)]], [[('Tom', 10), ('Jerry', 10), ('Spike', 5)]], [[('One', 1)]], [[('First', 3), ('Second', 2), ('Third', 1)]], [[('A', 100), ('B', 200), ('C', 50), ('D', 50)]], [[('Single', 0)]], [[]]]", "gpt-4o-mini": "[[[('a', 5), ('b', 3), ('c', 10)]], [[('apple', 2), ('banana', 3), ('cherry', 1)]], [[('x', -1), ('y', -2), ('z', -3)]], [[('one', 1)]], [[('first', 10), ('second', 10), ('third', 10)]], [[(1, 5), (2, 3), (3, 2), (4, 1)]]]"}}
{"task_id": "Mbpp/95", "requirement": "from typing import List\n\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\n\"\"\"", "entry_point": "Find_Min_Length", "canonical_solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength", "input_output_examples": "[[[[[1], [1, 2]]]], [[1]]]", "starter_code": "from typing import List\ndef Find_Min_Length(lst: List[List[Any]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[[1], [1, 2]]], [[[], [1, 2, 3]]], [[[1, 2, 3], [4, 5], [6]]], [[[1], [2], [3], [4]]], [[[1, 2, 3, 4], [5, 6], [7, 8, 9]]], [[[], [], []]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]], [[[1], [1]]]]", "qwen2.5-coder-32b-instruct": "[[[[1], [1, 2]]], [[[1, 2, 3], [4, 5], [6]]], [[]], [[[], [1, 2], [3, 4, 5]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1]]], [[[1], [2], [3]]]]", "gpt-4o-mini": "[[[[], [], []]], [[[1, 2], [3, 4, 5], [6]]], [[[1], [2, 3, 4, 5], [6, 7]]], [[[1, 2, 3], [4], [5, 6, 7, 8]]], [[[1], [], [2]]], [[[1], [2], [3], [4], [5]]], [[[0], [0, 0, 0], [0, 0]]], [[[1, 2, 3, 4], [5, 6], [7, 8, 9]]]]"}}
{"task_id": "Mbpp/96", "requirement": "def divisor(n: int) -> int:\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\n\"\"\"", "entry_point": "divisor", "canonical_solution": "def divisor(n):\n  return sum(1 for i in range(1, n + 1) if n % i == 0)", "input_output_examples": "[[[15]], [[4]]]", "starter_code": "def divisor(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [15], [16], [17], [100], [0], [-10], [2147483647]]", "qwen2.5-coder-32b-instruct": "[[15], [1], [0], [-5], [16], [13]]", "gpt-4o-mini": "[[1], [12], [100], [13], [0], [-15], [25], [7], [16]]"}}
{"task_id": "Mbpp/97", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\"\"\"", "entry_point": "frequency_lists", "canonical_solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}", "input_output_examples": "[[[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]]], [[{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[1, 2], [2, 3], [3, 4]]], [[[], [1, 2], [2, 3]]], [[[1, 2, 3], [], [4, 5]]], [[[], [], []]], [[[1]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]], [[[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]], [[[10, 20, 10], [20, 30], [40, 50, 60, 10]]], [[]], [[[]]], [[[1], [2], [3]]], [[[1, 1, 1], [1, 1], [1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]]", "gpt-4o-mini": "[[[[1, 2, 2], [3, 1, 3]]], [[[5, 5], [5, 5, 5, 5]]], [[[0, 0, 0], [1, 2, 3]]], [[[1, -1, -1], [-1, 1]]], [[[10], [10, 10, 10]]], [[[], []]], [[[1, 2, 3], [], [3, 2, 1]]], [[[1], [2], [3], [4], [5]]], [[[1, 1, 2, 2, 3], [3, 2, 1]]], [[[999], [999], [1000]]]]"}}
{"task_id": "Mbpp/98", "requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"", "entry_point": "multiply_num", "canonical_solution": "def multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)", "input_output_examples": "[[[[8, 2, 3, -1, 7]]], [[-67.2]]]", "starter_code": "from typing import List\ndef multiply_num(numbers: List[int]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[8, 2, 3, -1, 7]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0]], [[10]], [[]], [[1, -1, 1, -1]], [[1000000, 2000000, 3000000]]]", "qwen2.5-coder-32b-instruct": "[[[8, 2, 3, -1, 7]], [[1, 1, 1, 1, 1]], [[0, 0, 0, 0]], [[5]], [[-1, -2, -3, -4]], [[10, -10, 10, -10]], [[100, 200, 300]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[10, 5, 2]], [[0, 2, 3]], [[1, -1, 1]], [[-2, -3, -5]], [[5]], [[]], [[2, 4, 8, 16, 32]], [[100, 0, 2]], [[7, 7, 7, 7]]]"}}
{"task_id": "Mbpp/99", "requirement": "def decimal_to_binary(n: int) -> str:\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\"\"\"", "entry_point": "decimal_to_binary", "canonical_solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\")", "input_output_examples": "[[[8]], [['1000']]]", "starter_code": "def decimal_to_binary(n: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [8], [15], [255], [1024], [-1], [-8], [123456789]]", "qwen2.5-coder-32b-instruct": "[[8], [0], [1], [255], [1024], [-1], [16], [31]]", "gpt-4o-mini": "[[0], [1], [2], [10], [15], [255], [1024], [2048], [-1], [100], [256]]"}}
{"task_id": "Mbpp/100", "requirement": "def next_smallest_palindrome(num: int) -> int:\n\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\"\"\"", "entry_point": "next_smallest_palindrome", "canonical_solution": "def next_smallest_palindrome(num):\n    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))", "input_output_examples": "[[[99]], [[101]]]", "starter_code": "def next_smallest_palindrome(num: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[99], [123], [12321], [9], [100], [1991], [9999], [123456], [0], [1]]", "qwen2.5-coder-32b-instruct": "[[99], [123], [808], [999], [1001], [1221], [9999], [10], [0], [1]]", "gpt-4o-mini": "[[121], [123], [999], [1001], [9], [10], [88], [11], [22], [1000001]]"}}
{"task_id": "Mbpp/101", "requirement": "from typing import List\n\n\ndef kth_element(arr: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\n\"\"\"", "entry_point": "kth_element", "canonical_solution": "def kth_element(arr, k):\n  return arr[k-1]", "input_output_examples": "[[[[12, 3, 5, 7, 19], 2]], [[3]]]", "starter_code": "from typing import List\ndef kth_element(arr: List[int], k: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[12, 3, 5, 7, 19], 2], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[10], 1], [[], 1], [[5, 10, 15, 20, 25], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 9], [[1, 1, 1, 1, 1], 3], [[100, 200, 300, 400, 500], 6], [[-1, -2, -3, -4, -5], 3]]", "qwen2.5-coder-32b-instruct": "[[[12, 3, 5, 7, 19], 2], [[1, 2, 3, 4, 5], 1], [[10, 20, 30, 40, 50], 5], [[5, 4, 3, 2, 1], 3], [[7, 8, 9], 2], [[100], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1], [[5, 5, 5, 5, 5], 3], [[1, 2, 3, 4, 5], 6], [[1, 2, 3, 4, 5], 0]]", "gpt-4o-mini": "[[[10, 20, 30, 40, 50], 1], [[10, 20, 30, 40, 50], 5], [[10, 20, 30, 40, 50], 3], [[1, 2, 3, 4, 5], 2], [[], 1], [[7], 1], [[100, 200, 300], 4], [[-1, -2, -3, -4, -5], 3], [[1, 3, 5, 7, 9], 0], [[10, 20, 30, 40, 50], 6]]"}}
{"task_id": "Mbpp/102", "requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\n\"\"\"", "entry_point": "snake_to_camel", "canonical_solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "input_output_examples": "[[['python_program']], [['PythonProgram']]]", "starter_code": "def snake_to_camel(word: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['python_program'], ['snake_case_example'], ['single'], ['multiple_underscores__in__a__row'], ['__leading_and_trailing_underscores__'], ['empty_string'], ['alreadyCamelCase'], ['ALL_CAPS_SNAKE_CASE'], ['mixed_Case_Snake']]", "qwen2.5-coder-32b-instruct": "[['python_program'], ['this_is_a_test'], ['singleword'], ['multiple__underscores'], ['leading_underscore'], ['trailing_underscore_'], ['__both_ends__'], [''], ['_'], ['alreadyCamelCase']]", "gpt-4o-mini": "[['snake_case'], ['another_example_here'], ['singleword'], ['_leadingunderscore'], ['trailingunderscore_'], ['mixed_123_numbers_456'], ['special@characters#are$not_allowed'], ['two__consecutive_underscores'], ['']]"}}
{"task_id": "Mbpp/103", "requirement": "def eulerian_num(n: int, m: int) -> int:\n\"\"\"\nWrite a function to find the Eulerian number a(n, m).\n\"\"\"", "entry_point": "eulerian_num", "canonical_solution": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "input_output_examples": "[[[3, 1]], [[4]]]", "starter_code": "def eulerian_num(n: int, m: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[3, 1], [0, 0], [1, 0], [5, 2], [10, 5], [2, 3], [4, -1], [-2, 1]]", "qwen2.5-coder-32b-instruct": "[[3, 1], [0, 0], [1, 0], [2, 0], [2, 1], [4, 2], [5, 3], [6, 0], [6, 5], [10, 5]]", "gpt-4o-mini": "[[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3], [4, 2], [5, 3], [5, 4], [10, 5], [7, 3], [6, 6]]"}}
{"task_id": "Mbpp/104", "requirement": "from typing import List\n\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"", "entry_point": "sort_sublists", "canonical_solution": "def sort_sublists(input_list):\n    return [sorted(x) for x in input_list]", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]", "starter_code": "from typing import List\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:", "llm_generated_inputs": {"deepseek-v3": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['banana', 'apple'], ['cherry', 'date'], ['elderberry', 'fig', 'grape']]], [[['zebra', 'yak'], ['xylophone', 'whale'], ['vulture', 'umbrella', 'tiger']]], [[['a', 'b'], ['c', 'd'], ['e', 'f', 'g']]], [[['one'], ['two', 'three'], ['four', 'five', 'six']]], [[['z', 'y', 'x'], ['w', 'v'], ['u', 't', 's', 'r']]], [[[], ['a'], ['b', 'c']]], [[['apple', 'Apple'], ['banana', 'Banana'], ['cherry', 'Cherry']]]]", "qwen2.5-coder-32b-instruct": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry'], ['date', 'fig', 'grape']]], [[[], ['single'], ['multiple', 'items', 'here']]], [[['same', 'same'], ['same', 'same', 'same'], ['same']]], [[['zebra', 'yak'], ['xenon', 'wolf'], ['vulture', 'toucan']]], [[['a', 'b', 'c'], ['c', 'b', 'a'], ['b', 'a', 'c']]], [[]]]", "gpt-4o-mini": "[[[['banana', 'apple', 'cherry'], ['grape', 'fig', 'elderberry'], ['date']]], [[['cat', 'dog', 'bird'], ['zebra', 'antelope'], ['elephant', 'lion']]], [[[], [], []]], [[['single']]], [[['apple'], ['banana', 'cherry'], ['date', 'fig', 'elderberry']]], [[['123', '2', '1'], ['B', 'A', 'C'], ['Zebra', 'Monkey', 'Ant']]], [[['a', 'c', 'b', 'e', 'd'], ['f', 'd', 'e', 'a'], ['g', 'i', 'h', 'j']]], [[['same', 'same', 'same'], ['equal', 'equal'], ['equal', 'equal', 'equal']]], [[['!@#', '$%^', '()*'], ['ABC', 'abc', 'aBc']]]]"}}
{"task_id": "Mbpp/105", "requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"", "entry_point": "count", "canonical_solution": "def count(lst):   \n    return sum(lst)", "input_output_examples": "[[[[True, False, True]]], [[2]]]", "starter_code": "from typing import List\ndef count(lst: List[bool]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[True, False, True]], [[True, True, True]], [[False, False, False]], [[True]], [[False]], [[]], [[True, False, True, False, True, False, True]], [[True, True, True, False, False, False, True]]]", "qwen2.5-coder-32b-instruct": "[[[True, False, True]], [[False, False, False]], [[True, True, True]], [[]], [[True]], [[False]]]", "gpt-4o-mini": "[[[True, False, True, True]], [[False, False, False]], [[True, True, True]], [[True]], [[False]], [[]], [[True, False, True, False, True, False]], [[True, True, False, True, False, False]], [[False, True, True, True, True, False]]]"}}
{"task_id": "Mbpp/106", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to append the given list to the given tuples.\n\"\"\"", "entry_point": "add_lists", "canonical_solution": "def add_lists(test_list, test_tup):\n  return test_tup + tuple(test_list)", "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[(9, 10, 5, 6, 7)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 6, 7], (9, 10)], [[], (1, 2, 3)], [[1, 2, 3], ()], [['a', 'b'], ('c', 'd')], [[None, True, False], (1, 'a')], [[[1, 2], [3, 4]], ((5, 6),)], [[1.1, 2.2], (3.3, 4.4)]]", "qwen2.5-coder-32b-instruct": "[[[5, 6, 7], (9, 10)], [[], (1, 2, 3)], [[1, 2, 3], ()], [['a', 'b'], ('x', 'y')], [[True, False], (None,)], [[1.1, 2.2], (3.3, 4.4)]]", "gpt-4o-mini": "[[[1, 2, 3], (4, 5)], [['a', 'b', 'c'], ('d', 'e')], [[], (1,)], [[True, False], (None,)], [[1.1, 2.2], (3.3, 4.4)], [['item'], ()], [[None], (1, 'text', 3.14)], [[10, 20, 30], (40,)]]"}}
{"task_id": "Mbpp/108", "requirement": "from typing import List\n\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n\"\"\"\nWrite a function to merge three lists into a single sorted list.\n\"\"\"", "entry_point": "merge_sorted_list", "canonical_solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  return sorted(num1 + num2 + num3)", "input_output_examples": "[[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], [[[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]]]]", "starter_code": "from typing import List\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5], [2, 4, 6], [0, 7]], [[], [], [1, 2, 3]], [[1], [], [2]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[10, 20, 30], [15, 25, 35], [5, 40]], [[-5, -3, -1], [-2, -4, -6], [0, -7]], [[100], [200], [300]], [[5], [], []], [[], [10], []], [[], [], []]]", "qwen2.5-coder-32b-instruct": "[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[9, 8, 7], [6, 5, 4], [3, 2, 1]], [[1, 3, 5], [2, 4, 6], []], [[1, 3, 5], [], [2, 4, 6]], [[], [2, 4, 6], [1, 3, 5]], [[], [], []], [[1], [1], [1]], [[1], [2], [3]], [[3], [2], [1]]]", "gpt-4o-mini": "[[[1, 3, 5], [2, 4, 6], [0, 7, 8]], [[], [], []], [[1], [2], [3]], [[-1, -5, 2], [3, 0, 1], [-2]], [[10, 20, 30], [5, 15], [25, 35]], [[8, 1, 3], [], [2, 7]], [[4, 4, 4], [4, 4], [4]], [[], [1, 2, 3], [3, 2, 1]], [[5, 3], [4, 2], [1]]]"}}
{"task_id": "Mbpp/109", "requirement": "def odd_Equivalent(s: str, n: int) -> int:\n\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\"\"\"", "entry_point": "odd_Equivalent", "canonical_solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count", "input_output_examples": "[[['011001', 6]], [[3]]]", "starter_code": "def odd_Equivalent(s: str, n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['011001', 6], ['101010', 3], ['111111', 1], ['000000', 4], ['101', 0], ['1', 10], ['0', 5], ['01010101', 8], ['1001', 2], ['111000', 3]]", "qwen2.5-coder-32b-instruct": "[['011001', 6], ['1111', 4], ['0000', 4], ['101010', 3], ['110011', 2], ['010101', 5], ['1', 1], ['0', 1], ['10', 2], ['01', 2]]", "gpt-4o-mini": "[['101', 1], ['101', 2], ['110', 3], ['0', 5], ['111', 6], ['0000', 0], ['1111', 4], ['101010', 10], ['10', 0]]"}}
{"task_id": "Mbpp/111", "requirement": "from typing import List\n\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function to find the common elements in given nested lists.\n\"\"\"", "entry_point": "common_in_nested_lists", "canonical_solution": "def common_in_nested_lists(nestedlist):\n    return list(set.intersection(*map(set, nestedlist)))", "input_output_examples": "[[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], [[[18, 12]]]]", "starter_code": "from typing import List\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[]], [[[1, 2, 3, 4, 5]]], [[[1, 2, 2, 3], [2, 3, 3, 4], [2, 3, 5, 6]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]]]", "qwen2.5-coder-32b-instruct": "[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[10, 20, 30], [20, 30, 40], [30, 40, 50], [30, 60, 70]]], [[]], [[[], [], []]], [[[1], [1], [1]]], [[[1], [2], [3]]]]", "gpt-4o-mini": "[[[[], []]], [[[1, 2, 3], [2, 3, 4], [3, 5, 6]]], [[[1, 1, 2], [1, 2, 2], [2, 2, 2]]], [[[5, 5, 5], [5, 5, 6], [5, 6, 7]]], [[[10, 20], [30, 40], [50, 60]]], [[[1], [1], [1]]], [[[4, 5, 6], [4, 7, 8], [4, 9, 10]]], [[[7, 8], [8, 9], [8, 10]]], [[[0], [1], [2]]], [[[1, 3], [2, 3], [3, 4]]]]"}}
{"task_id": "Mbpp/113", "requirement": "def check_integer(text: str) -> Optional[bool]:\n\"\"\"\nWrite a function to check if a string represents an integer or not.\n\"\"\"", "entry_point": "check_integer", "canonical_solution": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()", "input_output_examples": "[[['python']], [[False]]]", "starter_code": "def check_integer(text: str) -> Optional[bool]:", "llm_generated_inputs": {"deepseek-v3": "[['123'], ['-456'], ['0'], ['00123'], ['-0'], ['123abc'], ['12.34'], ['python'], [''], ['  123  '], ['+789'], ['--123'], ['123e5'], ['123_456'], ['123,456']]", "qwen2.5-coder-32b-instruct": "[['python'], ['123'], ['-456'], ['0'], ['007'], ['12.34'], ['-12.34'], ['123abc'], ['abc123'], [''], [' '], ['\\n'], ['\\t'], ['   456   ']]", "gpt-4o-mini": "[['123'], ['-456'], ['+789'], ['0'], ['12.34'], ['abc'], [' '], ['-'], ['1a'], ['10 20']]"}}
{"task_id": "Mbpp/116", "requirement": "from typing import Tuple\n\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\n\"\"\"", "entry_point": "tuple_to_int", "canonical_solution": "def tuple_to_int(nums):\n    return int(''.join(map(str,nums)))", "input_output_examples": "[[[(1, 2, 3)]], [[123]]]", "starter_code": "from typing import Tuple\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 2, 3)], [(0, 1, 2)], [(9, 9, 9)], [(1,)], [(0,)], [(0, 0, 0)], [(1, 0, 0)], [(1, 0, 2)], [(9, 8, 7, 6, 5, 4, 3, 2, 1, 0)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)]]", "qwen2.5-coder-32b-instruct": "[[(1, 2, 3)], [(0, 9, 8, 7)], [(5,)], [(1, 0, 0, 1)], [(9, 9, 9, 9)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)]]", "gpt-4o-mini": "[[(1, 2, 3)], [(10, 20, 30)], [(0, 1, 2)], [(5, 15, 25)], [(123, 456, 789)], [(7,)], [((100, 200), (300,))], [(5, 0, 9)], [(9999, 8888)], [(8, 8, 8, 8)]]"}}
{"task_id": "Mbpp/118", "requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\n\"\"\"", "entry_point": "string_to_list", "canonical_solution": "def string_to_list(string): \n    return string.split(\" \")", "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]", "starter_code": "from typing import List\ndef string_to_list(string: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['python programming'], ['hello world'], ['single'], ['multiple    spaces'], [''], [' '], ['  leading spaces'], ['trailing spaces  '], ['  both  ends  ']]", "qwen2.5-coder-32b-instruct": "[['python programming'], ['singleword'], ['multiple   spaces'], [' leading and trailing '], [' '], [''], ['123 456 789'], ['special!@# $%^&*() characters']]", "gpt-4o-mini": "[['hello world'], ['singleword'], ['  leading and trailing spaces  '], ['multiple    spaces  between words'], ['word1 word2 word3'], [''], ['    '], ['a b c d e f g']]"}}
{"task_id": "Mbpp/119", "requirement": "from typing import List\n\n\ndef search(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\n\"\"\"", "entry_point": "search", "canonical_solution": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "input_output_examples": "[[[[1, 1, 2, 2, 3]]], [[3]]]", "starter_code": "from typing import List\ndef search(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 2, 2, 3]], [[1, 1, 2, 3, 3]], [[1, 2, 2, 3, 3]], [[1, 1, 2, 2, 3, 4, 4]], [[1]], [[1, 2, 2]], [[1, 1, 2]], [[-2, -2, -1]], [[0, 0, 1]], [[5, 5, 6, 6, 7, 7, 8]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 2, 2, 3]], [[0, 0, 1, 1, 2, 2, 3, 3, 4]], [[1]], [[1, 1, 2]], [[1, 2, 2]], [[1, 1, 2, 2, 3, 3, 4, 5, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 5]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]], [[9, 9, 10, 10, 11]]]", "gpt-4o-mini": "[[[1, 1, 2, 2, 3]], [[0, 0, 1, 1, 2, 2, 3, 4, 4]], [[5, 5, 6]], [[1, 1, 2]], [[1]], [[2, 3, 3, 4, 4, 5, 5]], [[2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7]], [[10, 11, 11, 12, 12, 13, 13, 14, 14]]]"}}
{"task_id": "Mbpp/120", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\"\"\"", "entry_point": "max_product_tuple", "canonical_solution": "def max_product_tuple(list1):\n    return max(abs(x * y) for x, y in list1)", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[36]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(-2, -7), (-2, -6), (-1, -8), (-4, -9)]], [[(0, 0), (0, 1), (1, 0)]], [[(1, 1)]], [[(-1, 1), (1, -1)]], [[(10, -10), (5, -5), (3, -3)]], [[(100, 1), (50, 2), (25, 4)]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(0, 5), (-1, -10), (3, 3)]], [[(-5, -5), (10, 10), (0, 0)]], [[(1, 1)]], [[]], [[(100, -100), (-200, 200)]]]", "gpt-4o-mini": "[[[(1, 2), (3, 4), (5, 6)]], [[(0, 0), (1, 2), (-3, -4)]], [[(-1, -2), (-3, -4)]], [[(1, -1), (2, -2), (-3, 3)]], [[(10, 0), (0, -10), (-10, 10)]], [[(0, 5), (3, 0), (6, -2)]], [[(1, 2), (3, 5), (5, 3), (2, 1)]], [[(100, 200), (150, 300), (250, 400)]], [[(1, 1), (1, 1), (1, 1)]], [[(2, 3), (7, 8), (5, 5), (0, 0)]]]"}}
{"task_id": "Mbpp/123", "requirement": "def amicable_numbers_sum(limit: int) -> int:\n\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n\n\"\"\"", "entry_point": "amicable_numbers_sum", "canonical_solution": "def div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "input_output_examples": "[[[999]], [[504]]]", "starter_code": "def amicable_numbers_sum(limit: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10], [100], [999], [220], [284], [0], [1], [2], [3000]]", "qwen2.5-coder-32b-instruct": "[[1], [220], [999], [1000], [10000], [0], [-10]]", "gpt-4o-mini": "[[1], [10], [220], [284], [1000], [10000], [5000], [0], [-10], [1.5]]"}}
{"task_id": "Mbpp/124", "requirement": "def angle_complex(a: complex, b: complex) -> float:\n\"\"\"\nWrite a function to get the angle of a complex number.\n\"\"\"", "entry_point": "angle_complex", "canonical_solution": "import cmath\ndef angle_complex(a,b):\n  angle=cmath.phase(a+b)\n  return angle", "input_output_examples": "[[[0, 1j]], [[1.5707963267948966]]]", "starter_code": "def angle_complex(a: complex, b: complex) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[0, 1j], [(1+1j), (1-1j)], [(-0-1j), 1j], [0, 0], [1, 1], [(-1+0j), (1+0j)], [(2+3j), (3+2j)], [(-2-3j), (-3-2j)]]", "qwen2.5-coder-32b-instruct": "[[0, 1j], [(1+1j), 0], [(-1-1j), 0], [1, 0], [-1, 0], [0, 0], [(1+0j), (1+0j)], [1j, -1j], [(3+4j), 0], [(-3-4j), 0]]", "gpt-4o-mini": "[[(2+3j), (4+5j)], [0j, (1+0j)], [(1+1j), (1+1j)], [(-1-1j), (1+1j)], [(1+0j), 1j], [1j, 0j], [0j, 0j], [(5+0j), (5+0j)]]"}}
{"task_id": "Mbpp/125", "requirement": "def find_length(string: str) -> int:\n\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\"\"\"", "entry_point": "find_length", "canonical_solution": "def find_length(string): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum", "input_output_examples": "[[['11000010001']], [[6]]]", "starter_code": "def find_length(string: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['11000010001'], ['111111'], ['000000'], ['101010'], ['1'], ['0'], ['1001001'], ['00110011'], ['1100110011'], ['']]", "qwen2.5-coder-32b-instruct": "[['11000010001'], ['1111'], ['0000'], ['1010101010'], ['0101010101'], ['1'], ['0'], [''], ['110110110110'], ['01010101010101']]", "gpt-4o-mini": "[['00001111'], ['101010'], ['111000'], ['010101010'], ['000000'], ['111111'], ['01'], ['10'], ['00'], ['11'], [''], ['1'], ['0'], ['0100001101'], ['11110000']]"}}
{"task_id": "Mbpp/126", "requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\n\"\"\"", "entry_point": "sum", "canonical_solution": "import math\ndef sum(a,b): \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum", "input_output_examples": "[[[10, 15]], [[6]]]", "starter_code": "def sum(a: int, b: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10, 15], [1, 1], [0, 0], [12, 18], [17, 23], [100, 200], [7, 7]]", "qwen2.5-coder-32b-instruct": "[[10, 15], [12, 18], [100, 10], [7, 13], [0, 5], [5, 0], [0, 0], [1, 1], [25, 50], [81, 27]]", "gpt-4o-mini": "[[12, 18], [10, 5], [25, 5], [7, 49], [1, 1], [0, 10], [-6, -9], [100, 0]]"}}
{"task_id": "Mbpp/127", "requirement": "def multiply_int(x: int, y: int) -> int:\n\"\"\"\nWrite a function to multiply two integers.\n\"\"\"", "entry_point": "multiply_int", "canonical_solution": "def multiply_int(x, y):\n    return x * y", "input_output_examples": "[[[10, 20]], [[200]]]", "starter_code": "def multiply_int(x: int, y: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10, 20], [0, 5], [-3, 7], [-4, -5], [100, 0], [123456789, 987654321]]", "qwen2.5-coder-32b-instruct": "[[10, 20], [-10, 20], [10, -20], [-10, -20], [0, 20], [10, 0], [0, 0], [1, 1], [-1, -1], [1000000, 1000000], [-1000000, 1000000]]", "gpt-4o-mini": "[[2, 3], [-1, 5], [0, 7], [4, -2], [1, 0], [-3, -3], [0, 0], [100, 200], [-10, 5], [123456, 7890]]"}}
{"task_id": "Mbpp/128", "requirement": "from typing import List\n\n\ndef long_words(n: int, s: str) -> List[str]:\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\n\"\"\"", "entry_point": "long_words", "canonical_solution": "def long_words(n, s):\n    return list(filter(lambda x: len(x) > n, s.split(' ')))", "input_output_examples": "[[[3, 'python is a programming language']], [[['python', 'programming', 'language']]]]", "starter_code": "from typing import List\ndef long_words(n: int, s: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[3, 'python is a programming language'], [1, 'a b c d e f'], [5, 'hello world this is a test'], [0, 'short words'], [10, 'this is a very long sentence with some lengthy words'], [6, 'one two three four five six seven'], [-1, 'negative length should return all words'], [100, 'this string has no words longer than 100 characters'], [2, ' '], [2, '']]", "qwen2.5-coder-32b-instruct": "[[3, 'python is a programming language'], [5, 'find words longer than n'], [0, 'all words should be included'], [10, 'no words meet criteria'], [7, 'boundary condition check'], [20, ''], [1, 'a quick brown fox jumps over the lazy dog']]", "gpt-4o-mini": "[[5, 'This is a test string with several long words'], [3, 'Hey there'], [1, 'A quick brown fox jumps over the lazy dogs'], [10, 'Short words only'], [0, 'Singleword'], [2, 'One two three four five six seven'], [100, 'No words will be long enough']]"}}
{"task_id": "Mbpp/129", "requirement": "from typing import List\n\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\n\"\"\"", "entry_point": "magic_square_test", "canonical_solution": "def magic_square_test(my_matrix):\n    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True", "input_output_examples": "[[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]]], [[True]]]", "starter_code": "from typing import List\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]], [[[8, 1, 6], [3, 5, 7], [4, 9, 2]]], [[[17, 24, 1, 8, 15], [23, 5, 7, 14, 16], [4, 6, 13, 20, 22], [10, 12, 19, 21, 3], [11, 18, 25, 2, 9]]], [[[1]]], [[[1, 2], [3, 4]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 7]]]]", "qwen2.5-coder-32b-instruct": "[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[4, 9, 2], [3, 5, 7], [8, 1, 6]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1]]], [[]], [[[1, 2], [3, 4]]], [[[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]]]", "gpt-4o-mini": "[[[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[16, 23, 17, 15], [5, 10, 14, 19], [24, 7, 6, 1], [4, 3, 2, 20]]], [[[1, 2], [3, 4]]], [[[15, 14, 13, 12], [4, 1, 8, 11], [9, 5, 6, 10], [16, 7, 2, 3]]], [[[]]], [[[1]]]]"}}
{"task_id": "Mbpp/130", "requirement": "from typing import List\n\n\ndef max_occurrences(nums: List[int]) -> int:\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\n\"\"\"", "entry_point": "max_occurrences", "canonical_solution": "from collections import defaultdict\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)", "input_output_examples": "[[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]], [[2]]]", "starter_code": "from typing import List\ndef max_occurrences(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[1, 1, 1, 2, 2, 2, 2]], [[5, 5, 5, 5, 5]], [[10]], [[3, 3, 4, 4, 4, 4, 5, 5, 5]], [[]], [[7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[0, 0, 0, 0, 1, 1, 1, 2, 2, 3]]]", "qwen2.5-coder-32b-instruct": "[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[1, 1, 2, 2, 3, 3]], [[7, 7, 7, 7, 7]], [[10, 20, 30, 40, 50]], [[]], [[42]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 1, 2, 1]], [[4, 5, 6, 5, 4, 4]], [[7]], [[10, 10, 10, 5, 5, 5, 5]], [[1, 2, 3, 2, 3, 1, 1, 1]], [[0, 0, 0, 0, 0]], [[]], [[1, 2, 2, 3, 3, 3]]]"}}
{"task_id": "Mbpp/131", "requirement": "def reverse_vowels(str1: str) -> str:\n\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\"\"\"", "entry_point": "reverse_vowels", "canonical_solution": "def reverse_vowels(str1):\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)", "input_output_examples": "[[['Python']], [['Python']]]", "starter_code": "def reverse_vowels(str1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Python'], ['Hello'], ['AEIOU'], ['aeiou'], ['aAeEiIoOuU'], ['bcd'], ['a'], ['E'], ['12345'], ['!@#$%'], ['Python Programming'], ['The quick brown fox jumps over the lazy dog'], ['']]", "qwen2.5-coder-32b-instruct": "[['Python'], ['hello'], ['HELLO'], ['world'], ['aAeEiIoOuU'], ['bcd'], ['aeiouAEIOU'], ['faebf'], [' '], ['A man, a plan, a canal: Panama']]", "gpt-4o-mini": "[['hello'], ['leetcode'], ['xyz'], ['a'], [''], ['AbcE'], ['aA'], ['racecar'], ['12345'], ['sunny day']]"}}
{"task_id": "Mbpp/132", "requirement": "from typing import Tuple\n\n\ndef tup_string(tup1: Tuple[str]) -> str:\n\"\"\"\nWrite a function to convert a tuple to a string.\n\"\"\"", "entry_point": "tup_string", "canonical_solution": "def tup_string(tup1):\n  return ''.join(tup1)", "input_output_examples": "[[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')]], [['exercises']]]", "starter_code": "from typing import Tuple\ndef tup_string(tup1: Tuple[str]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')], [('h', 'e', 'l', 'l', 'o')], [('p', 'y', 't', 'h', 'o', 'n')], [('a',)], [()], [('1', '2', '3', '4', '5')], [('!', '@', '#', '$', '%')], [(' ', ' ', ' ')]]", "qwen2.5-coder-32b-instruct": "[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')], [('h', 'e', 'l', 'l', 'o')], [()], [('a',)], [('1', '2', '3', '4')], [('!', '@', '#', '$')]]", "gpt-4o-mini": "[[('hello',)], [('world',)], [('single',)], [('tuple', 'with', 'multiple', 'elements')], [('',)], [(None,)], [(123,)], [(True,)], [(' ',)], [('complex', 'test', 'case', 'example')]]"}}
{"task_id": "Mbpp/133", "requirement": "from typing import List\n\n\ndef sum_negativenum(nums: List[int]) -> int:\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\"\"\"", "entry_point": "sum_negativenum", "canonical_solution": "def sum_negativenum(nums):\n  return sum(x for x in nums if x < 0)", "input_output_examples": "[[[[2, 4, -6, -9, 11, -12, 14, -5, 17]]], [[-32]]]", "starter_code": "from typing import List\ndef sum_negativenum(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[-1, -2, -3, -4, -5]], [[1, 2, 3, 4, 5]], [[]], [[-10, 0, 10]], [[-1, 1, -1, 1, -1]], [[-100, -200, -300]], [[0, 0, 0]], [[-1]], [[1]]]", "qwen2.5-coder-32b-instruct": "[[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[]], [[-1, -2, -3, -4, -5]], [[1, 2, 3, 4, 5]], [[0, 0, 0, 0]], [[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]], [[100, -100]], [[-1000000, 1000000, -2000000]]]", "gpt-4o-mini": "[[[1, -2, 3, -4, 5]], [[-1, -2, -3]], [[0, 2, 4, 6]], [[-5, 5, -10, 10]], [[-1, -1, -1, -1]], [[]], [[-100, 0, 100]], [[1, 2, 3, 4]]]"}}
{"task_id": "Mbpp/135", "requirement": "def hexagonal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth hexagonal number.\n\"\"\"", "entry_point": "hexagonal_num", "canonical_solution": "def hexagonal_num(n): \n\treturn n * (2 * n - 1)", "input_output_examples": "[[[10]], [[190]]]", "starter_code": "def hexagonal_num(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [10], [0], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [5], [10], [0], [-1], [100]]", "gpt-4o-mini": "[[1], [2], [3], [10], [0], [-1], [100]]"}}
{"task_id": "Mbpp/137", "requirement": "from typing import List\n\n\ndef zero_count(nums: List[int]) -> float:\n\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\"\"\"", "entry_point": "zero_count", "canonical_solution": "def zero_count(nums):\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)", "input_output_examples": "[[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], [[0.181818]]]", "starter_code": "from typing import List\ndef zero_count(nums: List[int]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5]], [[]], [[0]], [[1]], [[-1, -2, -3, 0, 1, 2, 3]]]", "qwen2.5-coder-32b-instruct": "[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5]], [[]], [[0]], [[1]], [[0, 0, 1, 1, 0, 1, 0]]]", "gpt-4o-mini": "[[[0, 1, 2, 3, 0, 4]], [[0, 0, 0, 0, 1, 2]], [[1, 2, 3, 4, 5]], [[-1, -2, 0, 0, 3]], [[0]], [[]], [[0, 0, 0]], [[1, 0, 2, -2, 0]], [[0, 3, 0, 4, 0, 5]], [[1, 1, 1, 1, 1]], [[0, -1, -1, 0]]]"}}
{"task_id": "Mbpp/138", "requirement": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\"\"\"", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \n    return n > 0 and n % 2 == 0", "input_output_examples": "[[[10]], [[True]]]", "starter_code": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[10], [1], [2], [3], [5], [7], [0], [-1], [15], [16], [128], [129]]", "qwen2.5-coder-32b-instruct": "[[10], [1], [2], [3], [4], [5], [8], [16], [31], [32], [63], [64], [0], [-1], [1023], [1024]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [15], [16], [23], [30], [31], [32], [63], [64], [100], [255], [1023], [2048], [4096], [8192]]"}}
{"task_id": "Mbpp/139", "requirement": "def circle_circumference(r: float) -> float:\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"", "entry_point": "circle_circumference", "canonical_solution": "import math\ndef circle_circumference(r):\n  return 2 * math.pi * r", "input_output_examples": "[[[10]], [[62.830000000000005]]]", "starter_code": "def circle_circumference(r: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10.0], [0.0], [1.0], [100.0], [-5.0], [2.5], [7.123]]", "qwen2.5-coder-32b-instruct": "[[10], [0], [1], [0.5], [-1], [-10], [100], [3.14159]]", "gpt-4o-mini": "[[1.0], [0.0], [10.5], [100.0], [3.14], [-5.0], [999.99]]"}}
{"task_id": "Mbpp/140", "requirement": "from typing import List\nfrom typing import Set\n\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\n\"\"\"", "entry_point": "extract_singly", "canonical_solution": "def extract_singly(test_list):\n  return set([item for sublist in test_list for item in sublist])", "input_output_examples": "[[[[(3, 4, 5), (4, 5, 7), (1, 4)]]], [[{1, 3, 4, 5, 7}]]]", "starter_code": "from typing import List\nfrom typing import Set\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[(3, 4, 5), (4, 5, 7), (1, 4)]], [[(1, 2, 3), (4, 5, 6), (7, 8, 9)]], [[(1, 1, 1), (2, 2, 2), (3, 3, 3)]], [[[]]], [[(1,), (2,), (3,)]], [[]], [[(1, 2), [3, 4], {5, 6}]]]", "qwen2.5-coder-32b-instruct": "[[[(3, 4, 5), (4, 5, 7), (1, 4)]], [[]], [[(1, 2, 3)]], [[(1, 1, 1), (1, 1), 1]], [[[], [], []]], [[(10, 20, 30), (40, 50, 60), (70, 80, 90)]], [[(-1, -2, -3), (-3, -4, -5), (-5, -6, -7)]], [[(0, 0, 0), (0, 0), 0]]]", "gpt-4o-mini": "[[[[], []]], [[[1, 2], [3, 4], [5]]], [[[1, 2, 3], [4, 5, 6], [2, 3, 4]]], [[[10], [20, 30], [40]]], [[[1, 1, 1], [2, 2], [3]]], [[[100], [], [200]]], [[[0, -1, -2], [-1, -2, -3]]], [[[1, 2, 3], [], [2, 3, 4, 5]]], [[[1, 2, 2], [3, 3], [4]]], [[[None], [1, 2]]]]"}}
{"task_id": "Mbpp/141", "requirement": "from typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\n\"\"\"", "entry_point": "pancake_sort", "canonical_solution": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "input_output_examples": "[[[[15, 79, 25, 38, 69]]], [[[15, 25, 38, 69, 79]]]]", "starter_code": "from typing import List\ndef pancake_sort(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[15, 79, 25, 38, 69]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[0]], [[]], [[10, 10, 10, 10]], [[100, -1, 50, -50, 0]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]]]", "qwen2.5-coder-32b-instruct": "[[[15, 79, 25, 38, 69]], [[3, 6, 1, 9, 4, 2]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10]], [[]], [[2, 2, 2, 2]], [[100, -1, 0, 50, 20]]]", "gpt-4o-mini": "[[[]], [[5]], [[3, 1, 4, 1, 5]], [[10, -1, 2, 7, 5]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 3, 2, 5, 4]], [[8, 7, 6, 5, 4, 3, 2, 1]], [[100, 2, 50, 75, 25, 0]], [[3, -1, -5, 7, 2]]]"}}
{"task_id": "Mbpp/142", "requirement": "from typing import List\n\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\n\"\"\"", "entry_point": "count_samepair", "canonical_solution": "def count_samepair(list1,list2,list3):\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]]], [[3]]]", "starter_code": "from typing import List\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3, 4], [1, 2, 5, 6], [1, 2, 7, 8]], [[], [], []], [[1], [1], [1]], [[1], [2], [3]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 2, 3], [1, 2, 3], [4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]], [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1], [1], [1]], [[1, 2], [2, 1], [1, 2]], [[1, 2, 3], [1, 2, 4], [1, 2, 5]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]]", "gpt-4o-mini": "[[[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [3, 2, 1], [1, 2, 0]], [[], [], []], [[5, 7, 9], [5, 8, 9], [5, 7, 9]], [[0, 0, 0], [0, 1, 0], [0, 0, 0]], [[1, 2], [2, 1], [1, 2]], [[1, 1, 1], [2, 2, 2], [1, 1, 1]], [[10], [10], [10]], [[-1, -2, -3], [-1, -2, -4], [-1, -5, -3]], [[1, 2, 3], [1, 2], [1, 2, 3]]]"}}
{"task_id": "Mbpp/145", "requirement": "from typing import List\n\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\n\"\"\"", "entry_point": "max_Abs_Diff", "canonical_solution": "def max_Abs_Diff(arr): \n    return max(arr) - min(arr)", "input_output_examples": "[[[[2, 1, 5, 3]]], [[4]]]", "starter_code": "from typing import List\ndef max_Abs_Diff(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 1, 5, 3]], [[10, 20, 30, 40]], [[-1, -2, -3, -4]], [[1]], [[]], [[5, 5, 5, 5]], [[0, 100, -100, 50]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-10, 0, 10]], [[100, 200, 150, 300, 250]]]", "qwen2.5-coder-32b-instruct": "[[[2, 1, 5, 3]], [[10, 20, 30, 40, 50]], [[-10, -20, -30, -40, -50]], [[1]], [[1, 1, 1, 1]], [[1, -1, 2, -2]], [[0, 0, 0, 0]], [[1000000, -1000000]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 1, 9, 3]], [[10, 2, 8, 6]], [[0, 0, 0, 0]], [[-1, -2, -3, -4]], [[-5, 5]], [[-10, 10, -1, 1]], [[100, 2, 3, 4, 5, -100]], [[1]], [[-1000]]]"}}
{"task_id": "Mbpp/160", "requirement": "from typing import Tuple\nfrom typing import Union\n\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\"\"\"", "entry_point": "find_solution", "canonical_solution": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "input_output_examples": "[[[2, 3, 7]], [[(2, 1)]]]", "starter_code": "from typing import Tuple\nfrom typing import Union\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:", "llm_generated_inputs": {"deepseek-v3": "[[2, 3, 7], [1, 1, 5], [3, 6, 9], [4, 8, 12], [5, 10, 15], [2, 4, 7], [3, 5, 7], [1, 2, 10], [7, 14, 21], [0, 0, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [-2, 3, 7], [2, -3, 7], [2, 3, -7], [-2, -3, -7], [1000000, 1000000, 2000000], [1000000, 1000000, 1]]", "qwen2.5-coder-32b-instruct": "[[2, 3, 7], [1, 1, 0], [0, 0, 0], [0, 0, 1], [5, 5, 10], [3, 6, 9], [3, 6, 10], [-1, 1, 0], [-1, -1, -2], [7, 13, 1], [100, 101, 201]]", "gpt-4o-mini": "[[1, 2, 3], [2, 3, 5], [0, 1, 0], [5, 0, 10], [3, 4, 10], [1, -1, 0], [1, 2, 0], [-1, -2, -3], [2, 2, 7], [10, 1, 15], [3, 3, 9], [6, 2, 18], [4, 5, -1], [0, 0, 0], [2, 2, 1]]"}}
{"task_id": "Mbpp/161", "requirement": "from typing import List\n\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove all elements from a given list present in another list.\n\"\"\"", "entry_point": "remove_elements", "canonical_solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]]], [[[1, 3, 5, 7, 9, 10]]]]", "starter_code": "from typing import List\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5], []], [[], [1, 2, 3]], [[1, 1, 2, 2, 3, 3], [1, 3]], [[10, 20, 30, 40, 50], [10, 20, 30, 40, 50]], [[5, 5, 5, 5], [5]], [[1, 3, 5, 7, 9], [2, 4, 6, 8]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5], [3, 3, 3, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[1, 2, 3], []], [[], [1, 2, 3]], [[], []], [[1, 1, 2, 2, 3, 3], [1, 2]], [[10, 20, 30, 40], [50, 60, 70]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], [2, 3]], [[1, 1, 2, 3, 4], [1]], [[], [1, 2, 3]], [[1, 2, 3], []], [[5, 6, 7, 8, 9], [10, 11]], [[10, 20, 30, 40], [10, 20]], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[10, 20, 30, 40, 50], [30, 20, 10]]]"}}
{"task_id": "Mbpp/162", "requirement": "def sum_series(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2.\n\n\n\"\"\"", "entry_point": "sum_series", "canonical_solution": "def sum_series(n):\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))", "input_output_examples": "[[[6]], [[12]]]", "starter_code": "def sum_series(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[6], [0], [1], [2], [5], [7], [10]]", "qwen2.5-coder-32b-instruct": "[[6], [0], [1], [2], [5], [10], [15], [20], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [100], [-1], [-10]]"}}
{"task_id": "Mbpp/165", "requirement": "def count_char_position(str1: str) -> int:\n\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\"\"\"", "entry_point": "count_char_position", "canonical_solution": "def count_char_position(str1): \n    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))", "input_output_examples": "[[['xbcefg']], [[2]]]", "starter_code": "def count_char_position(str1: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['xbcefg'], ['abc'], ['XYZ'], ['aBcDeF'], ['zxy'], [''], ['a'], ['Z'], ['123'], ['a1b2c3']]", "qwen2.5-coder-32b-instruct": "[['xbcefg'], ['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['AbCdEfGhIjKlMnOpQrStUvWxYz'], ['abcdefg'], ['xyz'], ['a'], ['z'], [''], ['AeIoU'], ['bCdEfG']]", "gpt-4o-mini": "[['a'], ['b'], ['c'], ['abc'], ['xyz'], ['aAbBcC'], ['dEfG'], ['hello'], ['abcdefghijklmnopqrstuvwxyz'], [''], ['1234'], ['AaBcCzZ'], ['alphabet']]"}}
{"task_id": "Mbpp/166", "requirement": "from typing import List\n\n\ndef find_even_pair(A: List[int]) -> int:\n\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\"\"\"", "entry_point": "find_even_pair", "canonical_solution": "def find_even_pair(A): \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])", "input_output_examples": "[[[[5, 4, 7, 2, 1]]], [[4]]]", "starter_code": "from typing import List\ndef find_even_pair(A: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 4, 7, 2, 1]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[1, 2, 3, 4, 5, 6]], [[0, 0, 0]], [[1]], [[]], [[10, 20, 30, 40, 50]], [[11, 13, 15, 17, 19]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "qwen2.5-coder-32b-instruct": "[[[5, 4, 7, 2, 1]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[1, 2, 3, 4, 5, 6]], [[0]], [[]], [[1, 1, 1, 1]], [[2, 2, 2, 2]], [[1, 2]], [[1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[0, 1, 2, 3, 4]], [[5, 7, 9, 11]], [[2, 4, 6, 8]], [[1, 3, 5, 7, 9, 11]], [[-1, -2, -3, -4]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[256, 512, 1024]], [[-2, -4, -6, -8]]]"}}
{"task_id": "Mbpp/167", "requirement": "def next_power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n\"\"\"", "entry_point": "next_power_of_2", "canonical_solution": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res;", "input_output_examples": "[[[0]], [[1]]]", "starter_code": "def next_power_of_2(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [15], [16], [17], [1023], [1024], [1025], [2147483647], [2147483648], [2147483649]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [15], [16], [17], [31], [32], [33], [64], [100], [1023], [1024], [1025], [-1], [-5]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [8], [15], [16], [17], [31], [32], [33], [63], [64], [65], [100], [1023], [1024], [1025], [2048]]"}}
{"task_id": "Mbpp/168", "requirement": "from typing import List\n\n\ndef frequency(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\n\"\"\"", "entry_point": "frequency", "canonical_solution": "def frequency(a,x): \n    return a.count(x)", "input_output_examples": "[[[[1, 2, 3], 4]], [[0]]]", "starter_code": "from typing import List\ndef frequency(a: List[int], x: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], 3], [[1, 1, 1, 1], 1], [[5, 5, 5, 5], 2], [[], 1], [[10, 20, 30, 40, 50], 10], [[7, 7, 7, 7, 7, 7, 7], 7], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11], [[0, 0, 0, 0, 0], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3], 4], [[1, 2, 2, 3, 2], 2], [[5, 5, 5, 5, 5], 5], [[], 1], [[1, 2, 3], 1], [[1, 2, 3], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[10, 20, 30, 40, 50], 25], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 2, 2], 2], [[1, 1, 1, 1, 1], 1], [[5, 5, 5, 5, 5], 3], [[], 1], [[10, 20, 30], 40], [[3, 3, 3, 3, 3, 4, 5, 3], 3], [[0, -1, -1, 2, -1], -1], [[100, 200, 300, 400, 100, 100], 100], [[1, 3, 5, 7, 9], 5]]"}}
{"task_id": "Mbpp/170", "requirement": "from typing import List\n\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\"\"\"", "entry_point": "sum_range_list", "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m : n + 1])", "input_output_examples": "[[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], [[29]]]", "starter_code": "from typing import List\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10], [[1, 2, 3, 4, 5], 0, 4], [[10, 20, 30, 40, 50], 2, 3], [[5, 15, 25, 35, 45], 1, 2], [[100, 200, 300, 400, 500], 3, 3], [[1, 2, 3, 4, 5], 4, 2], [[7, 8, 9, 10, 11], -1, 3], [[7, 8, 9, 10, 11], 2, 10], [[], 0, 0], [[1, 2, 3, 4, 5], 0, 5]]", "qwen2.5-coder-32b-instruct": "[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10], [[1, 2, 3, 4, 5], 0, 4], [[10, 20, 30, 40, 50], 1, 3], [[5, 5, 5, 5, 5], 2, 2], [[1, 2, 3], 0, 0], [[1, 2, 3], 2, 2], [[1, 2, 3], 0, 1], [[1, 2, 3], 1, 2], [[1], 0, 0], [[1, 2], 0, 1], [[1, 2, 3], -1, 2], [[1, 2, 3], 0, 3], [[1, 2, 3], 1, -1], [[1, 2, 3], 3, 1], [[1, 2, 3], 1, 10], [[1, 2, 3], 10, 1], [[1, 2, 3], 1, 1], [[1, 2, 3], 0, 2], [[1, 2, 3], 1, 0]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 1, 3], [[10, 20, 30, 40, 50], 0, 4], [[-5, 0, 5, 10], 0, 2], [[1, 2], 0, 1], [[], 0, 0], [[1, 2, 3, 4, 5], 0, 0], [[5, 10, 15, 20], 1, 2], [[100, 200, 300, 400], 0, 3], [[1, 2, 3, 4, 5], 2, 2]]"}}
{"task_id": "Mbpp/171", "requirement": "def perimeter_pentagon(a: int) -> int:\n\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n\n\"\"\"", "entry_point": "perimeter_pentagon", "canonical_solution": "def perimeter_pentagon(a):\n  return 5 * a", "input_output_examples": "[[[5]], [[25]]]", "starter_code": "def perimeter_pentagon(a: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[5], [0], [1], [10], [100], [25]]", "qwen2.5-coder-32b-instruct": "[[5], [0], [1], [10], [-5]]", "gpt-4o-mini": "[[5], [10], [1], [0], [-2], [100]]"}}
{"task_id": "Mbpp/172", "requirement": "def count_occurance(s: str) -> int:\n\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\n\"\"\"", "entry_point": "count_occurance", "canonical_solution": "def count_occurance(s):\n  return s.count('std')", "input_output_examples": "[[['letstdlenstdporstd']], [[3]]]", "starter_code": "def count_occurance(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['letstdlenstdporstd'], ['standard'], ['hello world'], ['stdstdstdstd'], [''], ['s t d'], ['STDstdStD'], ['stdstdstdstdstdstdstdstdstdstd'], ['s'], ['st'], ['stdstdstd stdstdstd']]", "qwen2.5-coder-32b-instruct": "[['letstdlenstdporstd'], ['std'], ['sdt'], ['stdstdstd'], [''], ['letstddlenstdporstd'], ['abcdefg'], ['stdstdstdstd'], ['letstdlenstdporstdstd']]", "gpt-4o-mini": "[['std is a standard term that uses std in various contexts.'], ['This string does not contain the substring.'], ['stdstd is the repetition of std.'], ['std STD std StD'], [''], ['std'], ['stdsdstdstdstd'], ['with std at the start and std at the end std']]"}}
{"task_id": "Mbpp/222", "requirement": "from typing import Tuple\n\n\ndef check_type(test_tuple: Tuple) -> bool:\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\n\"\"\"", "entry_point": "check_type", "canonical_solution": "def check_type(test_tuple):\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)", "input_output_examples": "[[[(5, 6, 7, 3, 5, 6)]], [[True]]]", "starter_code": "from typing import Tuple\ndef check_type(test_tuple: Tuple) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[(5, 6, 7, 3, 5, 6)], [(1.2, 3.4, 5.6, 7.8)], [('a', 'b', 'c', 'd')], [(True, True, False, True)], [(5, 'a', 3.14, True)], [()], [(42,)], [((1, 2), (3, 4), (5, 6))], [([1, 2], [3, 4], [5, 6])], [(1, 2, 3, 'a', 'b', 'c')]]", "qwen2.5-coder-32b-instruct": "[[(5, 6, 7, 3, 5, 6)], [(1.0, 2.0, 3.0, 4.5)], [('a', 'b', 'c', 'd')], [((1, 2), (3, 4), (5, 6))], [([1, 2], [3, 4], [5, 6])], [({1, 2}, {3, 4}, {5, 6})], [(True, False, True)], [(5, 6.0, 7, 3)], [(5, '6', 7, 3)], [(5, 6, 7, '3')], [(5, 6, 7, [3])], [(5, 6, 7, (3, 4))], [(5, 6, 7, {'key': 'value'})], [(5, 6, 7, None)], [(5, 6, 7, (3+4j))], [(5, 6, 7, (3-4j))], [(5, 6, 7, 3.0, '3')], [(5, 6, 7, 3.0, 3)], [(5, 6, 7, 3.0, 3.0)], [(5, 6, 7, 3.0, [3])], [(5, 6, 7, 3.0, (3, 4))], [(5, 6, 7, 3.0, {'key': 'value'})], [(5, 6, 7, 3.0, None)], [(5, 6, 7, 3.0, (3+4j))], [(5, 6, 7, 3.0, (3-4j))], [()], [(5,)], [(5.0,)], [('5',)], [([5],)], [((5,),)], [({5},)], [(True,)], [(None,)], [((3+4j),)], [((3-4j),)]]", "gpt-4o-mini": "[[(1, 2, 3)], [((1, 2), (3, 4))], [('hello', 'world')], [(True, False, True)], [(1.1, 2.2, 3.3)], [(1, '2', 3)], [()], [(None, None)], [(1, 2.0, 3.0)]]"}}
{"task_id": "Mbpp/223", "requirement": "from typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\"\"\"", "entry_point": "is_majority", "canonical_solution": "from bisect import bisect_left, bisect_right\ndef is_majority(arr, n, x):\n\tif x not in arr:\n\t\treturn False\n\tl = bisect_left(arr, x)\n\tr = bisect_right(arr, x)\n\treturn r - l > n / 2", "input_output_examples": "[[[[1, 2, 3, 3, 3, 3, 10], 7, 3]], [[True]]]", "starter_code": "from typing import List\ndef is_majority(arr: List[int], n: int, x: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 1, 2, 2], 5, 1], [[1, 2, 3, 4, 5], 5, 3], [[5, 5, 5, 5, 5, 5, 5], 7, 5], [[1, 2, 3, 4, 5, 6, 7], 7, 8], [[], 0, 1], [[1, 1, 1, 1, 2, 2, 2, 2], 8, 1], [[1, 1, 1, 1, 1, 2, 2, 2, 2], 9, 1], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], 11, 1], [[1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], 13, 1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 2, 4, 4, 4, 6, 6], 8, 4], [[1, 2, 3, 4, 5, 6, 7], 7, 4], [[5, 5, 5, 5, 5, 5, 5], 7, 5], [[1, 2, 3, 3, 3, 3, 3], 7, 3], [[1, 2, 2, 3, 3, 3, 3], 7, 3], [[1, 1, 1, 2, 2, 2, 2], 7, 2], [[1], 1, 1], [[1, 1], 2, 1], [[1, 2], 2, 1]]", "gpt-4o-mini": "[[[1, 1, 1, 2, 2], 5, 1], [[3, 3, 4, 4, 4, 4, 5], 7, 4], [[2, 2, 2, 3, 3], 5, 2], [[5, 5, 5, 5, 1], 5, 5], [[1], 1, 1], [[1, 1, 1, 1, 2], 5, 2], [[], 0, 1], [[1, 2, 3, 4, 5], 5, 1], [[2, 2, 2, 3, 3, 3], 6, 3], [[7, 8, 9, 10, 10, 10], 6, 10]]"}}
{"task_id": "Mbpp/224", "requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\"\"\"", "entry_point": "count_Set_Bits", "canonical_solution": "def count_Set_Bits(n): \n    return bin(n)[2:].count('1')", "input_output_examples": "[[[2]], [[1]]]", "starter_code": "from typing import Set\ndef count_Set_Bits(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [255], [-1], [1023], [1024]]", "qwen2.5-coder-32b-instruct": "[[2], [0], [1], [15], [31], [255], [1023], [1048575], [2147483647]]", "gpt-4o-mini": "[[0], [1], [2], [3], [15], [16], [255], [256], [1023], [1024], [2147483647], [4294967295]]"}}
{"task_id": "Mbpp/226", "requirement": "def odd_values_string(str1: str):\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\n\"\"\"", "entry_point": "odd_values_string", "canonical_solution": "def odd_values_string(str1):\n    return ''.join(str1[i] for i in range(0, len(str1), 2))", "input_output_examples": "[[['abcdef']], [['ace']]]", "starter_code": "def odd_values_string(str1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['abcdef'], ['hello'], ['python'], ['123456789'], ['a'], [''], ['ab'], ['abcde'], ['!@#$%^&*()'], ['AaBbCcDdEe']]", "qwen2.5-coder-32b-instruct": "[['abcdef'], ['a'], [''], ['1234567890'], ['Python'], ['oddindex'], [' '], ['AeIoU']]", "gpt-4o-mini": "[['abcdef'], ['123456789'], [''], ['a'], ['abcde'], ['The quick brown fox jumps over the lazy dog'], ['abcdefghijklmnopqrstuvwxyz']]"}}
{"task_id": "Mbpp/227", "requirement": "def min_of_three(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find minimum of three numbers.\n\"\"\"", "entry_point": "min_of_three", "canonical_solution": "def min_of_three(a,b,c): \n  return min(a, b, c)", "input_output_examples": "[[[10, 20, 0]], [[0]]]", "starter_code": "def min_of_three(a: int, b: int, c: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10, 20, 0], [-5, -10, -3], [0, 0, 0], [100, 100, 100], [1, 2, 3], [-1, 1, 0], [2147483647, -2147483648, 0], [5, 5, 10], [-7, -7, -7], [99, 98, 97]]", "qwen2.5-coder-32b-instruct": "[[10, 20, 0], [-1, -5, -3], [100, 100, 100], [0, 0, 0], [1, 2, 3], [3, 2, 1], [2, 1, 3], [-10, 0, 10], [1000, 500, 250], [2147483647, 0, -2147483648]]", "gpt-4o-mini": "[[1, 2, 3], [3, 1, 2], [2, 3, 1], [-1, -2, -3], [-1, 0, 1], [0, 0, 0], [100, 50, 75], [5, 5, 5], [1, 1, 2], [2, 3, 3]]"}}
{"task_id": "Mbpp/230", "requirement": "def replace_blank(str1: str, char: str) -> str:\n\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\"\"\"", "entry_point": "replace_blank", "canonical_solution": "def replace_blank(str1, char):\n    return str1.replace(' ', char)", "input_output_examples": "[[['hello people', '@']], [['hello@people']]]", "starter_code": "def replace_blank(str1: str, char: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['hello people', '@'], ['this is a test', '-'], ['no_blanks_here', '*'], ['  leading and trailing spaces  ', '#'], ['', 'a'], [' ', 'b'], ['multiple    spaces', 'x'], ['special!@#chars', '^'], ['123 456 789', '0'], ['\\t tab \\n newline', '|']]", "qwen2.5-coder-32b-instruct": "[['hello people', '@'], ['  leading and trailing  ', '*'], ['no blanks here', '#'], ['', '!'], ['multiple   spaces', '^'], ['single space', ' '], ['special!@# $%^&*() characters', '_']]", "gpt-4o-mini": "[['Hello World', '*'], ['Python  Programming', '#'], ['  Leading and trailing  ', '$'], ['No blanks', '%'], ['    ', 'X'], ['Mixed  spaces  here', '.'], ['Special characters!', '>'], ['', '*']]"}}
{"task_id": "Mbpp/232", "requirement": "from typing import List\n\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\"\"\"", "entry_point": "larg_nnum", "canonical_solution": "import heapq\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n,list1)", "input_output_examples": "[[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2]], [[[100, 90]]]]", "starter_code": "from typing import List\ndef larg_nnum(list1: List[int], n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2], [[1, 2, 3, 4, 5], 3], [[5, 5, 5, 5, 5], 1], [[], 0], [[-1, -2, -3, -4, -5], 2], [[100], 1], [[10, 20, 30, 40, 50], 5], [[10, 20, 30, 40, 50], 0], [[10, 20, 30, 40, 50], 6], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4]]", "qwen2.5-coder-32b-instruct": "[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2], [[1, 2, 3, 4, 5], 3], [[5, 4, 3, 2, 1], 5], [[100, 100, 100, 100], 2], [[1, 3, 2], 0], [[1, 3, 2], 4], [[], 1], [[10], 1], [[10, 20, 30], -1]]", "gpt-4o-mini": "[[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3], [[10, 20, 30, 40, 50], 2], [[-1, -2, -3, -4, -5], 3], [[0, 0, 0, 0, 0], 2], [[5], 1], [[9, 8, 7, 6, 5], 10], [[], 0], [[1, 2, 3], 0]]"}}
{"task_id": "Mbpp/233", "requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"", "entry_point": "lateralsuface_cylinder", "canonical_solution": "import math\ndef lateralsuface_cylinder(r, h):\n  return 2 * math.pi * r * h", "input_output_examples": "[[[10, 5]], [[314.15000000000003]]]", "starter_code": "def lateralsuface_cylinder(r: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10.0, 5.0], [0.0, 5.0], [10.0, 0.0], [0.0, 0.0], [-10.0, 5.0], [10.0, -5.0], [-10.0, -5.0], [1.5, 3.5], [100.0, 200.0], [0.001, 0.001]]", "qwen2.5-coder-32b-instruct": "[[10, 5], [0, 5], [10, 0], [0, 0], [1, 1], [3.5, 7.2], [-1, 5], [10, -5], [-1, -5]]", "gpt-4o-mini": "[[5.0, 10.0], [1.5, 3.0], [0.0, 5.0], [7.2, 8.4], [2.5, 0.0], [3.3, 5.2], [-2.0, 4.0], [100000.0, 100000.0]]"}}
{"task_id": "Mbpp/234", "requirement": "def volume_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the volume of a cube given its side length.\n\"\"\"", "entry_point": "volume_cube", "canonical_solution": "def volume_cube(l):\n  return l ** 3", "input_output_examples": "[[[3]], [[27]]]", "starter_code": "def volume_cube(l: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[3], [5], [0], [1], [-2], [10], [100]]", "qwen2.5-coder-32b-instruct": "[[3], [0], [1], [-1], [10], [100]]", "gpt-4o-mini": "[[1], [2], [3], [10], [0], [-5], [100], [999]]"}}
{"task_id": "Mbpp/235", "requirement": "def even_bit_set_number(n: int) -> int:\n\"\"\"\nWrite a python function to set all even bits of a given number.\n\"\"\"", "entry_point": "even_bit_set_number", "canonical_solution": "def even_bit_set_number(n): \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n", "input_output_examples": "[[[10]], [[10]]]", "starter_code": "def even_bit_set_number(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [10], [15], [32], [255], [256], [1023], [1024], [4095]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [10], [15], [16], [31], [32], [63], [64], [127], [128], [255], [256], [511], [512], [1023], [1024]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [15], [16], [255], [1023], [2048]]"}}
{"task_id": "Mbpp/237", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\"\"\"", "entry_point": "check_occurences", "canonical_solution": "from collections import Counter \ndef check_occurences(test_list):\n  return dict(Counter(tuple(sorted(t)) for t in test_list))", "input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]]], [[{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:", "llm_generated_inputs": {"deepseek-v3": "[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[]], [[(1, 2), (1, 2), (1, 2)]], [[(1,), (2,), (3,)]], [[(1, 'a'), (2, 'b'), (1, 'a'), (3, 'c')]], [[(1, 2, 3), (1, 2, 3), (4, 5, 6)]], [[(1, 2), (3, 4), (5, 6), (1, 2)]], [[(True, False), (False, True), (True, False)]], [[(1.0, 2.0), (2.0, 1.0), (3.0, 4.0)]], [[(None, None), (None, None)]]]", "qwen2.5-coder-32b-instruct": "[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[(1, 2), (2, 1), (1, 2), (2, 1)]], [[(1, 1), (1, 1), (1, 1)]], [[]], [[(1, 2, 3), (3, 2, 1), (1, 2, 3)]], [[(1,)]], [[(1, 2), (2, 3), (3, 4), (4, 5)]]]", "gpt-4o-mini": "[[[(1, 2), (1, 2), (2, 3), (3, 3), (1, 2)]], [[(1, 2), (3, 4), (5, 6)]], [[(1, 2), (1, 2), (1, 2)]], [[(), (), ()]], [[(1, 'a'), (1, 'a'), (2, 'b'), (2, 'b'), (2, 'b')]], [[(None,), (None,), (None,)]], [[(1, 2), (2, 1), (1, 2)]], [[('x',), ('y',), ('z',), ('x',), ('x',)]], [[(True,), (True,), (False,)]]]"}}
{"task_id": "Mbpp/238", "requirement": "def number_of_substrings(str1: str) -> int:\n\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\n\"\"\"", "entry_point": "number_of_substrings", "canonical_solution": "def number_of_substrings(str1): \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2", "input_output_examples": "[[['abc']], [[6]]]", "starter_code": "def number_of_substrings(str1: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['abc'], ['a'], [''], ['abcd'], ['aaaa'], ['aabbcc'], ['12345'], ['!@#$%'], ['abc def'], ['abc\\ndef']]", "qwen2.5-coder-32b-instruct": "[['abc'], ['a'], [''], ['abcd'], ['aaaa'], ['abab']]", "gpt-4o-mini": "[['abc'], ['a'], [''], ['aaaa'], ['ababa'], ['1234'], ['@#$%'], ['longerexample']]"}}
{"task_id": "Mbpp/239", "requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\"\"\"", "entry_point": "get_total_number_of_sequences", "canonical_solution": "def get_total_number_of_sequences(m, n):\n\tT=[[0 for _ in range(n + 1)] for _ in range(m + 1)] \n\tfor i in range(m + 1): \n\t\tfor j in range(n + 1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j] = 0\n\t\t\telif i<j: \n\t\t\t\tT[i][j] = 0\n\t\t\telif j==1: \n\t\t\t\tT[i][j] = i \n\t\t\telse: \n\t\t\t\tT[i][j] = T[i-1][j] + T[i//2][j-1] \n\treturn T[m][n]", "input_output_examples": "[[[10, 4]], [[4]]]", "starter_code": "def get_total_number_of_sequences(m: int, n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10, 4], [5, 2], [20, 3], [1, 1], [15, 5], [7, 1], [0, 0], [10, 0], [0, 5], [100, 10]]", "qwen2.5-coder-32b-instruct": "[[10, 4], [5, 3], [1, 1], [2, 2], [15, 1], [3, 5], [7, 0], [0, 3], [100, 10], [20, 1]]", "gpt-4o-mini": "[[2, 1], [10, 3], [15, 4], [16, 5], [7, 2], [5, 5], [20, 1], [3, 3], [1, 1], [9, 0]]"}}
{"task_id": "Mbpp/240", "requirement": "from typing import List\n\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\"\"\"", "entry_point": "replace_list", "canonical_solution": "def replace_list(list1, list2):\n    return list1[:-1] + list2", "input_output_examples": "[[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], [[[1, 3, 5, 7, 9, 2, 4, 6, 8]]]]", "starter_code": "from typing import List\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [['a', 'b', 'c'], ['x', 'y', 'z']], [[1, 2, 3], []], [[], [4, 5, 6]], [[True, False], [True]], [[1.1, 2.2, 3.3], [4.4, 5.5]], [[[1, 2], [3, 4]], [[5, 6]]], [[None, 'hello'], ['world']], [[], []], [[1], [2, 3, 4]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [[1], [2, 3]], [[1, 2, 3], []], [[], [1, 2, 3]], [[], []], [[1, 2, 3], [4]], [[1, 2, 3], [4, 5, 6, 7, 8]]]", "gpt-4o-mini": "[[[1, 2, 3], [4, 5, 6]], [['a', 'b', 'c'], ['d', 'e']], [[10, 20], [30]], [[], [1, 2, 3]], [[True, False, None], ['yes', 'no']], [[1, 2, 3], []], [[], []], [['x', 'y', 'z'], ['alpha', 'beta', 'gamma']], [[1], [2, 3, 4]], [['single'], ['first', 'second', 'third']]]"}}
{"task_id": "Mbpp/242", "requirement": "def count_charac(str1: str) -> int:\n\"\"\"\nWrite a function to count the total number of characters in a string.\n\"\"\"", "entry_point": "count_charac", "canonical_solution": "def count_charac(str1):\n    return len(str1)", "input_output_examples": "[[['python programming']], [[18]]]", "starter_code": "def count_charac(str1: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['python programming'], ['hello'], ['1234567890'], [''], [' '], ['!@#$%^&*()_+'], ['This is a test string.'], ['\\n\\t\\r'], ['こんにちは']]", "qwen2.5-coder-32b-instruct": "[['python programming'], [''], ['a'], ['1234567890'], ['!@#$%^&*()'], ['A quick brown fox jumps over the lazy dog'], ['    '], ['\\n\\t'], ['Python\\nProgramming']]", "gpt-4o-mini": "[['hello'], [''], ['a'], ['This is a test string.'], ['1234567890'], ['!@#$%^&*()'], ['Whitespace    test'], ['The quick brown fox jumps over the lazy dog']]"}}
{"task_id": "Mbpp/244", "requirement": "def next_Perfect_Square(N: int) -> int:\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\n\"\"\"", "entry_point": "next_Perfect_Square", "canonical_solution": "import math  \ndef next_Perfect_Square(N): \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN", "input_output_examples": "[[[35]], [[36]]]", "starter_code": "def next_Perfect_Square(N: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[35], [0], [1], [2], [15], [100], [121], [-1], [-10], [999999]]", "qwen2.5-coder-32b-instruct": "[[35], [0], [1], [9], [15], [24], [99], [100], [120], [999], [1000]]", "gpt-4o-mini": "[[0], [1], [15], [16], [24], [100], [121], [144], [999], [1000]]"}}
{"task_id": "Mbpp/245", "requirement": "from typing import List\n\n\ndef max_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\"\"\"", "entry_point": "max_sum", "canonical_solution": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "input_output_examples": "[[[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], [[194]]]", "starter_code": "from typing import List\ndef max_sum(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 15, 51, 45, 33, 100, 12, 18, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1]], [[10, 20, 30, 40, 50, 40, 30, 20, 10]], [[100, 50, 25, 75, 45, 60, 30, 15, 5]], [[1, 3, 1, 2, 1]], [[]], [[5, 5, 5, 5, 5]], [[10, 20, 30, 20, 10, 40, 30, 20, 10]]]", "qwen2.5-coder-32b-instruct": "[[[1, 15, 51, 45, 33, 100, 12, 18, 9]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 2, 1]], [[10]], [[]], [[1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]], [[100, 200, 300, 400, 500, 300, 200, 100]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 3, 2, 1, 3, 5, 7, 9, 7, 5, 3, 1]]]", "gpt-4o-mini": "[[[1, 3, 5, 4, 2]], [[5, 1, 2, 3]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 2, 1]], [[10, 20, 30, 40, 10]], [[1]], [[]], [[3, 5, 1, 3, 4, 2, 5]], [[7, 0, 1, 0, 7]]]"}}
{"task_id": "Mbpp/247", "requirement": "def lps(str1: str) -> int:\n\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\"\"\"", "entry_point": "lps", "canonical_solution": "def lps(str1): \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]", "input_output_examples": "[[['TENS FOR TENS']], [[5]]]", "starter_code": "def lps(str1: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['TENS FOR TENS'], ['racecar'], ['abracadabra'], ['a'], [''], ['abba'], ['abcba'], ['abcde'], ['12321'], ['!@#@!']]", "qwen2.5-coder-32b-instruct": "[['TENS FOR TENS'], ['bbbab'], ['cbbd'], ['a'], ['ac'], ['aaaaa'], ['abcda'], ['abacdfgdcaba'], ['racecar'], ['noon'], ['level'], ['deeee'], ['']]", "gpt-4o-mini": "[['bbbab'], ['cbbd'], ['a'], [''], ['abcbaz'], ['racecar'], ['abcd'], ['character']]"}}
{"task_id": "Mbpp/250", "requirement": "def count_X(tup: tuple, x: any) -> int:\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\"\"\"", "entry_point": "count_X", "canonical_solution": "def count_X(tup, x): \n    return tup.count(x)", "input_output_examples": "[[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4]], [[0]]]", "starter_code": "def count_X(tup: tuple, x: any) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10], [(1, 2, 3, 4, 5), 3], [(1, 2, 3, 4, 5), 6], [(1, 1, 1, 1), 1], [(), 1], [(1, 2, 3, 'a', 'b', 'c'), 'a'], [(1, 2, 3, 4, 5), None], [(None, None, None), None], [(1, 2, 3, 4, 5), '1']]", "qwen2.5-coder-32b-instruct": "[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4], [(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10], [(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8], [(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 2], [(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 15], [(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 5], [(1, 2, 3, 4, 5, 6, 7, 8, 9), 10], [(1, 2, 3, 4, 5, 6, 7, 8, 9), 1], [(1, 2, 3, 4, 5, 6, 7, 8, 9), 9], [(1, 1, 1, 1, 1, 1, 1, 1, 1), 1], [(1, 1, 1, 1, 1, 1, 1, 1, 1), 2], [(1,), 1], [(1,), 2], [(1, 2, 3, 4, 5, 6, 7, 8, 9), '1'], [(1, 2, 3, 4, 5, 6, 7, 8, 9), None], [(None, None, None), None], [(True, False, True, True), True], [(True, False, True, True), False]]", "gpt-4o-mini": "[[(1, 2, 3, 2, 2), 2]]"}}
{"task_id": "Mbpp/251", "requirement": "from typing import List\n\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\"\"\"", "entry_point": "insert_element", "canonical_solution": "def insert_element(list1, element):\n    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1", "input_output_examples": "[[[['Red', 'Green', 'Black'], 'c']], [[['c', 'Red', 'c', 'Green', 'c', 'Black']]]]", "starter_code": "from typing import List\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], 0], [[], 'a'], [['apple', 'banana'], 'fruit'], [[[1, 2], [3, 4]], [0]], [[True, False], None], [['Red', 'Green', 'Black'], 'c']]", "qwen2.5-coder-32b-instruct": "[[['Red', 'Green', 'Black'], 'c'], [[1, 2, 3], 0], [[], 'a'], [['a', 'b', 'c'], None], [[True, False], True], [[1.1, 2.2, 3.3], 0.0], [['single'], 'pre'], [[1], 1]]", "gpt-4o-mini": "[[[1, 2, 3], 0], [['a', 'b', 'c'], 'x'], [[], 'new'], [[True, False], 'test'], [[[1], [2]], [0]], [['', 'non-empty'], 'insert'], [[1, 1, 1], 2], [['apple', 'banana'], 'fruit']]"}}
{"task_id": "Mbpp/252", "requirement": "def convert(numbers: complex) -> tuple:\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\n\"\"\"", "entry_point": "convert", "canonical_solution": "import cmath  \ndef convert(numbers):    \n  return cmath.polar(numbers)", "input_output_examples": "[[[1]], [[(1.0, 0.0)]]]", "starter_code": "def convert(numbers: complex) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[[1], [(1+1j)], [(-1-1j)], [0j], [1j], [-1j], [(1+0j)], [(-1+0j)], [(3+4j)], [(-3-4j)], [(2.5+3.5j)], [(-2.5-3.5j)]]", "qwen2.5-coder-32b-instruct": "[[1], [(1+1j)], [(-1-1j)], [0], [(3+4j)], [(-3-4j)], [1j], [-1j], [(1+0j)], [(-1+0j)]]", "gpt-4o-mini": "[[0j], [(1+0j)], [1j], [(1+1j)], [(2-3j)], [(-4+5j)], [(-3-4j)], [0j], [(3+4j)], [(-1+1j)], [1j]]"}}
{"task_id": "Mbpp/253", "requirement": "from typing import List\n\n\ndef count_integer(lst: List[Any]) -> int:\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\n\"\"\"", "entry_point": "count_integer", "canonical_solution": "def count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)", "input_output_examples": "[[[[1, 2, 'abc', 1.2]]], [[2]]]", "starter_code": "from typing import List\ndef count_integer(lst: List[Any]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[1, 'a', 3.5, 'b', 2]], [[]], [['a', 'b', 'c']], [[1.1, 2.2, 3.3]], [[1, '1', 1.0, True]], [[1, 2, [3, 4], 5]], [[1, 2, (3, 4), 5]], [[1, 2, {'a': 3}, 5]], [[1, 2, None, 5]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 'abc', 1.2]], [[1, 2, 3, 4, 5]], [['a', 'b', 'c', 'd']], [[1.1, 2.2, 3.3]], [[]], [[True, False, True]], [[1, '2', 3.0, 4, 'five']], [[None, 1, 'two', 3.3, 4]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [['a', 'b', 'c', 1, 2]], [[1.5, 2.5, 3.0, 4.1]], [[-1, -2, -3]], [[0, 0, 0]], [[1, 'string', 3.0, True]], [[True, False, 2, 'text']], [['integer', 3, 'float', [1, 2]]], [[100, 200, 300, '300', 400, None]]]"}}
{"task_id": "Mbpp/255", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\"\"\"", "entry_point": "combinations_colors", "canonical_solution": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))", "input_output_examples": "[[[['Red', 'Green', 'Blue'], 1]], [[[('Red',), ('Green',), ('Blue',)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef combinations_colors(l: List, n: int) -> List[Tuple]:", "llm_generated_inputs": {"deepseek-v3": "[[['Red', 'Green', 'Blue'], 1], [['Red', 'Green', 'Blue'], 2], [['Red', 'Green', 'Blue'], 3], [['Red', 'Green'], 1], [['Red', 'Green'], 2], [['Red'], 1], [['Red'], 2], [[], 1], [[], 0], [['Red', 'Green', 'Blue'], 0]]", "qwen2.5-coder-32b-instruct": "[[['Red', 'Green', 'Blue'], 1], [['Red', 'Green', 'Blue'], 2], [['Red', 'Green', 'Blue'], 3], [[], 1], [['Red'], 0], [['Red'], 1], [['Red', 'Green', 'Blue'], 0], [['Red', 'Green', 'Blue'], 4]]", "gpt-4o-mini": "[[['red', 'blue', 'green'], 2], [['a', 'b'], 3], [[], 2], [['yellow'], 1], [['orange', 'purple'], 0], [['black', 'white', 'gray'], 1], [['cyan', 'magenta', 'yellow'], 4]]"}}
{"task_id": "Mbpp/256", "requirement": "def count_Primes_nums(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\"\"\"", "entry_point": "count_Primes_nums", "canonical_solution": "def count_Primes_nums(n):\n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))", "input_output_examples": "[[[5]], [[2]]]", "starter_code": "def count_Primes_nums(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [10], [20], [100], [29], [30]]", "qwen2.5-coder-32b-instruct": "[[5], [0], [1], [2], [10], [20], [100], [1000], [10000]]", "gpt-4o-mini": "[[0], [1], [2], [10], [20], [30], [100], [50], [0], [15]]"}}
{"task_id": "Mbpp/257", "requirement": "def swap_numbers(a: int, b: int) -> tuple:\n\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n\"\"\"", "entry_point": "swap_numbers", "canonical_solution": "def swap_numbers(a,b):\n    return (b, a)", "input_output_examples": "[[[10, 20]], [[(20, 10)]]]", "starter_code": "def swap_numbers(a: int, b: int) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[[10, 20], [-5, 15], [0, 0], [-10, -20], [1000000, -1000000], [123456789, 987654321]]", "qwen2.5-coder-32b-instruct": "[[10, 20], [0, 0], [-1, 1], [100, -100], [123456789, 987654321], [1, 0], [0, 1]]", "gpt-4o-mini": "[[1, 2], [-1, 3], [0, 5], [10, 10], [-5, -10], [1000000, 1], [-99999, 99999], [7, -3]]"}}
{"task_id": "Mbpp/259", "requirement": "from typing import Tuple\n\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n\"\"\"\nWrite a function to maximize the given two tuples.\n\"\"\"", "entry_point": "maximize_elements", "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\n  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))", "input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))]], [[((6, 7), (4, 9), (2, 9), (7, 10))]]]", "starter_code": "from typing import Tuple\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:", "llm_generated_inputs": {"deepseek-v3": "[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((1, 2), (3, 4)), ((5, 6), (7, 8))], [((10, 20), (30, 40)), ((15, 25), (35, 45))], [((0, 0), (0, 0)), ((0, 0), (0, 0))], [((1, 1), (2, 2)), ((1, 1), (2, 2))], [(1, 2), (3, 4)], [(), ()]]", "qwen2.5-coder-32b-instruct": "[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((0, 0), (0, 0)), ((0, 0), (0, 0))], [((-1, -2), (-3, -4)), ((-5, -6), (-7, -8))], [((10, 20), (30, 40)), ((5, 15), (25, 25))], [((100, 200), (150, 250)), ((50, 100), (200, 300))]]", "gpt-4o-mini": "[[((1, 5), (3, 2)), ((2, 4), (1, 6))], [((10, 20), (30, 40)), ((15, 25), (35, 45))], [((0, 0), (-1, -2)), ((-3, -4), (0, 0))], [((-10, 100), (50, -50)), ((-5, 90), (60, -60))], [((1, 2),), ((3, 4),)], [((), ()), ((), ())], [((1, 1), (1, 1)), ((1, 1), (1, 1))], [((1,), ()), ((), (1,))], [((999999999, 888888888), (777777777, 666666666)), ((555555555, 444444444), (333333333, 222222222))], [((-1, -1), (-2, -2)), ((-3, -3), (-4, -4))]]"}}
{"task_id": "Mbpp/260", "requirement": "def newman_prime(n: int) -> int:\n\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\n\"\"\"", "entry_point": "newman_prime", "canonical_solution": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c", "input_output_examples": "[[[3]], [[7]]]", "starter_code": "def newman_prime(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [0], [10], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10]]", "gpt-4o-mini": "[[1], [5], [10], [15], [25], [100], [0], [-1]]"}}
{"task_id": "Mbpp/261", "requirement": "from typing import Tuple\n\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\"\"\"", "entry_point": "division_elements", "canonical_solution": "def division_elements(test_tup1, test_tup2):\n  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))", "input_output_examples": "[[[(10, 4, 6, 9), (5, 2, 3, 3)]], [[(2, 2, 2, 3)]]]", "starter_code": "from typing import Tuple\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(15, 20, 25), (5, 4, 5)], [(0, 8, 12), (1, 2, 3)], [(7, 14, 21), (7, 7, 7)], [(3.5, 7.0, 10.5), (0.5, 1.0, 1.5)], [(1, 2, 3), (0, 1, 1)], [(10, 20, 30), (2, 4, 0)], [(100, 200), (10, 20)], [(), ()]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(1, 2, 3), (1, 1, 1)], [(0, 0, 0), (1, 2, 3)], [(10, 20, 30), (2, 4, 5)], [(-10, -20, -30), (-2, -4, -5)], [(1.5, 2.5, 3.5), (0.5, 0.5, 0.5)], [(100, 200, 300), (10, 20, 30)], [(1, 1, 1), (0, 0, 0)]]", "gpt-4o-mini": "[[(10.0, 20.0, 30.0), (2.0, 4.0, 5.0)], [(1.0, 2.0, 3.0), (1.0, 1.0, 1.0)], [(5.0, 10.0, 15.0), (1.0, 2.0, 0.0)], [(0.0, 0.0), (1.0, 2.0)]]"}}
{"task_id": "Mbpp/262", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\"\"\"", "entry_point": "split_two_parts", "canonical_solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[([1, 1, 2], [3, 4, 4, 5, 1])]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], 2], [['a', 'b', 'c', 'd'], 0], [['x', 'y', 'z'], 3], [[], 0], [[10, 20, 30, 40, 50], 5], [['apple', 'banana', 'cherry'], 1], [[True, False, True, False], 2], [[1.1, 2.2, 3.3, 4.4], 4]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[1, 2, 3], 0], [[1, 2, 3], 1], [[1, 2, 3], 2], [[1, 2, 3], 3], [[1, 2, 3], 4], [[1, 2, 3], -1], [[], 0], [[], 1], [[1], 0], [[1], 1], [[1], 2]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [['a', 'b', 'c'], 2], [[], 0], [[10, 20, 30, 40], 4], [[1, 2, 3], 0], [[1, 2, 3], 5], [['x', 'y', 'z'], 1], [[True, False, True], 2], [['apple', 'banana', 'cherry', 'date'], 1]]"}}
{"task_id": "Mbpp/264", "requirement": "def dog_age(h_age: float) -> float:\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\n\"\"\"", "entry_point": "dog_age", "canonical_solution": "def dog_age(h_age):\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age", "input_output_examples": "[[[12]], [[61]]]", "starter_code": "def dog_age(h_age: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[12.0], [0.0], [1.0], [25.0], [-5.0], [100.0]]", "qwen2.5-coder-32b-instruct": "[[12], [0], [1], [0.5], [15.5], [100]]", "gpt-4o-mini": "[[1.0], [3.5], [7.0], [0.5], [15.0], [10.2], [5.5], [0.0], [20.0]]"}}
{"task_id": "Mbpp/265", "requirement": "from typing import List\n\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\"\"\"", "entry_point": "list_split", "canonical_solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "input_output_examples": "[[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3]], [[[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]]]]", "starter_code": "from typing import List\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:", "llm_generated_inputs": {"deepseek-v3": "[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [['apple', 'banana', 'cherry', 'date', 'elderberry'], 1], [[], 5], [['x', 'y', 'z'], 5], [[True, False, True, False, True, False], 3], [['a', 'b', 'c', 'd', 'e'], 0], [['a', 'b', 'c', 'd', 'e'], -1], [['a', 'b', 'c', 'd', 'e'], 2], [['a', 'b', 'c', 'd', 'e'], 5]]", "qwen2.5-coder-32b-instruct": "[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 2], [[10, 20, 30, 40, 50], 5], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 0], [[], 3], [[1], 1], [[1, 2], 3], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 15]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 2], [['a', 'b', 'c', 'd', 'e', 'f'], 3], [[True, False, True, False], 1], [[], 2], [[1, 2, 3], 0], [[1, 2, 3, 4, 5], 1], [['x', 'y', 'z'], 5], [[None, None, None], 2], [['a', 'b'], 2]]"}}
{"task_id": "Mbpp/266", "requirement": "def lateralsurface_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\n\"\"\"", "entry_point": "lateralsurface_cube", "canonical_solution": "def lateralsurface_cube(l):\n  return 4 * l * l", "input_output_examples": "[[[5]], [[100]]]", "starter_code": "def lateralsurface_cube(l: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[5], [0], [1], [-3], [10]]", "qwen2.5-coder-32b-instruct": "[[5], [1], [0], [-1], [10], [100]]", "gpt-4o-mini": "[[1], [5], [10], [0], [-3], [100]]"}}
{"task_id": "Mbpp/267", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\"\"\"", "entry_point": "square_Sum", "canonical_solution": "def square_Sum(n):  \n    return n * (4 * n * n - 1) / 3", "input_output_examples": "[[[2]], [[10]]]", "starter_code": "def square_Sum(n: int) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [-1], [10]]", "qwen2.5-coder-32b-instruct": "[[2], [1], [3], [0], [-1], [10]]", "gpt-4o-mini": "[[1], [2], [5], [10], [0], [-1]]"}}
{"task_id": "Mbpp/268", "requirement": "def find_star_num(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th star number.\n\"\"\"", "entry_point": "find_star_num", "canonical_solution": "def find_star_num(n): \n\treturn 6 * n * (n - 1) + 1", "input_output_examples": "[[[3]], [[37]]]", "starter_code": "def find_star_num(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [0], [-5], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10], [20]]", "gpt-4o-mini": "[[1], [2], [3], [4], [0], [-1], [10], [100]]"}}
{"task_id": "Mbpp/269", "requirement": "def ascii_value(k: str) -> int:\n\"\"\"\nWrite a function to find the ascii value of a character.\n\"\"\"", "entry_point": "ascii_value", "canonical_solution": "def ascii_value(k):\n  return ord(k)", "input_output_examples": "[[['A']], [[65]]]", "starter_code": "def ascii_value(k: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['A'], ['a'], ['1'], ['@'], [' '], ['\\n'], ['\\t'], ['\\x00']]", "qwen2.5-coder-32b-instruct": "[['A'], ['a'], ['0'], [' '], ['~'], ['@'], ['z'], ['Z'], ['9'], ['!']]", "gpt-4o-mini": "[['a'], ['A'], ['z'], ['Z'], ['0'], [' '], ['!'], ['~'], ['@'], ['ÿ']]"}}
{"task_id": "Mbpp/270", "requirement": "from typing import List\n\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\n\"\"\"", "entry_point": "sum_even_and_even_index", "canonical_solution": "def sum_even_and_even_index(arr):  \n    return sum(x for x in arr[::2] if x % 2 == 0)", "input_output_examples": "[[[[5, 6, 12, 1, 18, 8]]], [[30]]]", "starter_code": "from typing import List\ndef sum_even_and_even_index(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 6, 12, 1, 18, 8]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[0, 1, 2, 3, 4, 5]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 13, 15, 17, 19]], [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]]]", "qwen2.5-coder-32b-instruct": "[[[5, 6, 12, 1, 18, 8]], [[2, 4, 6, 8, 10, 12]], [[1, 3, 5, 7, 9, 11]], [[0, 2, 4, 6, 8, 10]], [[]], [[2]], [[2, 2]], [[2, 3, 4, 5, 6, 7, 8, 9]]]", "gpt-4o-mini": "[[[2, 3, 4, 5, 6, 7]], [[1, 2, 3, 4, 5, 6]], [[0, 1, 2, 3, 4, 5, 6]], [[10, 1, 2, 3, 8, 5, 6]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[12, -2, 4, 0, 5, 8, 14]], [[0, 0, 0, 0]], [[100, 200, 300, 400, 500]]]"}}
{"task_id": "Mbpp/271", "requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\"\"\"", "entry_point": "even_Power_Sum", "canonical_solution": "def even_Power_Sum(n): \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))", "input_output_examples": "[[[2]], [[1056]]]", "starter_code": "def even_Power_Sum(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [10], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10]]", "gpt-4o-mini": "[[0], [1], [2], [10], [100], [-1], [5]]"}}
{"task_id": "Mbpp/272", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\"\"\"", "entry_point": "rear_extract", "canonical_solution": "def rear_extract(test_list):\n  return [x[-1] for x in test_list]", "input_output_examples": "[[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]]], [[[21, 20, 19]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef rear_extract(test_list: List[Tuple]) -> List:", "llm_generated_inputs": {"deepseek-v3": "[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]], [[(10, 'Alice', 30), (20, 'Bob', 40), (30, 'Charlie', 50)]], [[(5, 'John', 25)]], [[]], [[(1, 'A', 100, 'Extra'), (2, 'B', 200), (3, 'C', 300, 'More', 'Data')]], [[(1,), (2,), (3,)]], [[(1, 'SingleElement')]]]", "qwen2.5-coder-32b-instruct": "[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]], [[(4, 'John'), (5, 'Doe'), (6, 'Smith')]], [[(7, 'Alice', 30, 'Engineer'), (8, 'Bob', 25, 'Designer')]], [[]], [[(9,)]], [[(10, 'SingleElementTuple')]]]", "gpt-4o-mini": "[[[]], [[('a',), ('b',), ('c',)]], [[('x', 'y', 'z'), ('foo', 'bar', 'baz'), ('1', '2', '3', '4')]], [[('single_element',)]], [[(), (), ()]], [[(1, 2), (3, 4), (5, 6)]], [[('first', 'second'), ('third',)]], [[('tuple', 'with', 'multiple', 'elements'), ('another', 'tuple', 'here')]]]"}}
{"task_id": "Mbpp/273", "requirement": "from typing import Tuple\n\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\"\"\"", "entry_point": "substract_elements", "canonical_solution": "def substract_elements(test_tup1, test_tup2):\n  return tuple(x - y for x, y in zip(test_tup1, test_tup2))", "input_output_examples": "[[[(10, 4, 5), (2, 5, 18)]], [[(8, -1, -13)]]]", "starter_code": "from typing import Tuple\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 5), (2, 5, 18)], [(1, 2, 3), (1, 2, 3)], [(100, 200), (50, 100)], [(0, 0, 0), (0, 0, 0)], [(5,), (3,)], [(10, 20, 30, 40), (5, 10, 15, 20)], [(-1, -2, -3), (-1, -2, -3)], [(7, 8, 9), (10, 11, 12)], [(100,), (200,)], [(1, 2, 3, 4, 5), (5, 4, 3, 2, 1)]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 5), (2, 5, 18)], [(0, 0, 0), (0, 0, 0)], [(1, 2, 3), (1, 2, 3)], [(-1, -2, -3), (-1, -2, -3)], [(100, 200, 300), (50, 100, 150)], [(1, 1, 1), (0, 0, 0)], [(1, 2), (1, 2, 3)], [(1, 2, 3), (1,)]]", "gpt-4o-mini": "[[(1, 2, 3), (1, 1, 1)], [(10, 20, 30), (5, 10, 15)]]"}}
{"task_id": "Mbpp/274", "requirement": "def even_binomial_Coeff_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\"\"\"", "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return 1 << (n - 1)", "input_output_examples": "[[[4]], [[8]]]", "starter_code": "def even_binomial_Coeff_Sum(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [10], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [10], [20]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [10], [20], [100]]"}}
{"task_id": "Mbpp/276", "requirement": "def volume_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n\"\"\"", "entry_point": "volume_cylinder", "canonical_solution": "import math\ndef volume_cylinder(r,h):\n  return math.pi * r * r * h", "input_output_examples": "[[[10, 5]], [[1570.7500000000002]]]", "starter_code": "def volume_cylinder(r: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10.0, 5.0], [0.0, 5.0], [10.0, 0.0], [-10.0, 5.0], [10.0, -5.0], [1.5, 3.5], [100.0, 200.0], [0.001, 0.001]]", "qwen2.5-coder-32b-instruct": "[[10, 5], [0, 5], [10, 0], [0, 0], [1, 1], [3.5, 7.2], [-1, 5], [10, -5], [-1, -1], [1000000, 1000000], [0.0001, 0.0001]]", "gpt-4o-mini": "[[5.0, 10.0], [3.5, 7.0], [0.0, 10.0], [5.0, 0.0], [0.0, 0.0], [100.0, 250.0], [1.5, 2.5], [3.14159, 5.0], [-4.0, 10.0], [2.0, -3.0]]"}}
{"task_id": "Mbpp/277", "requirement": "def dict_filter(dict1: dict, n: int) -> dict:\n\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\"\"\"", "entry_point": "dict_filter", "canonical_solution": "def dict_filter(dict1, n):\n    return {key : value for (key, value) in dict1.items() if value >=n}", "input_output_examples": "[[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170]], [[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}]]]", "starter_code": "def dict_filter(dict1: dict, n: int) -> dict:", "llm_generated_inputs": {"deepseek-v3": "[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170], [{'Alice': 100, 'Bob': 200, 'Charlie': 150}, 120], [{'John': 50, 'Jane': 60, 'Doe': 70}, 80], [{'A': 10, 'B': 20, 'C': 30}, 10], [{'X': 5, 'Y': 5, 'Z': 5}, 5], [{'One': 1, 'Two': 2, 'Three': 3}, 0], [{}, 5], [{'Empty': 0}, 1], [{'Negative': -5, 'Positive': 5}, 0]]", "qwen2.5-coder-32b-instruct": "[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170], [{'Alice': 150, 'Bob': 200, 'Charlie': 190}, 200], [{'Anna': 160, 'Elsa': 160, 'Olaf': 160}, 160], [{}, 100], [{'Single': 150}, 150], [{'Single': 150}, 151], [{'Negative': -10, 'Zero': 0, 'Positive': 10}, -5], [{'Negative': -10, 'Zero': 0, 'Positive': 10}, 0], [{'Negative': -10, 'Zero': 0, 'Positive': 10}, 5]]", "gpt-4o-mini": "[[{'a': 1, 'b': 2, 'c': 3}, 2], [{'x': 10, 'y': 5, 'z': 0}, 5], [{'apple': 5, 'banana': 2, 'cherry': 10}, 3], [{'key1': 1, 'key2': 1, 'key3': 1}, 1], [{'one': -1, 'two': 0, 'three': 2}, 1], [{}, 0], [{'test1': 5, 'test2': 15, 'test3': 25}, 10], [{'singleEntry': 5}, 5]]"}}
{"task_id": "Mbpp/278", "requirement": "from typing import Tuple\n\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n\"\"\"", "entry_point": "count_first_elements", "canonical_solution": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return count", "input_output_examples": "[[[(1, 5, 7, (4, 6), 10)]], [[3]]]", "starter_code": "from typing import Tuple\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 2, 3, (4, 5), 6)], [((1, 2), 3, 4, 5)], [(1, (2, 3), 4, 5)], [(1, 2, 3, 4, 5)], [((1, 2), (3, 4), (5, 6))], [()], [(1,)], [((1, 2),)]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, (4, 6), 10)], [((1, 2), 3, 4, 5)], [(1, 2, 3, 4, (5, 6))], [(1, 2, 3, 4, 5)], [((), 1, 2, 3)], [(1, 2, 3, ())], [(1, (2, 3), 4, 5)], [(1,)], [(1, 2, 3, 4, 5, (6, 7, 8), 9, 10)], [(1, 2, 3, 4, 5, (6, 7, 8), (9, 10))]]", "gpt-4o-mini": "[[((1, 2, 3, 1, 4, 1), 1)], [((5, 6, 5, 5, 7), 5)], [((1, 2, 3), 4)], [((10, 10, 20, 20, 30), 10)], [((1,), 1)], [((2, 3, 4, 5), 2)], [((None, 'a', None, 'b'), None)], [((1.1, 2.2, 3.3), 2.2)], [((-1, -2, -1, -3), -1)], [((1, 1, 1, 1), 1)]]"}}
{"task_id": "Mbpp/279", "requirement": "def is_num_decagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth decagonal number.\n\"\"\"", "entry_point": "is_num_decagonal", "canonical_solution": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n", "input_output_examples": "[[[3]], [[27]]]", "starter_code": "def is_num_decagonal(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [10], [0], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10], [100]]", "gpt-4o-mini": "[[1], [2], [3], [10], [100], [0], [-5], [20]]"}}
{"task_id": "Mbpp/280", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\"\"\"", "entry_point": "sequential_search", "canonical_solution": "def sequential_search(dlist, item):\n    return item in dlist, (dlist.index(item) if item in dlist else -1)", "input_output_examples": "[[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31]], [[(True, 3)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:", "llm_generated_inputs": {"deepseek-v3": "[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 99], [[], 5], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 11], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 19], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19, 31], 31]]", "qwen2.5-coder-32b-instruct": "[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 11], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 19], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 99], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 65], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 12], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 77], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 43], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 56], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 58], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 23], [[], 31], [[31], 31], [[31], 32]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 6], [[10, 20, 30, 40, 50], 10], [[10, 20, 30, 40, 50], 50], [[], 1], [[100], 100], [[100], 200], [[1, 2, 3, 2, 4], 2], [[5, 5, 5, 5], 5], [[5, 5, 5, 5], 1]]"}}
{"task_id": "Mbpp/281", "requirement": "from typing import List\n\n\ndef all_unique(test_list: List[int]) -> bool:\n\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\n\"\"\"", "entry_point": "all_unique", "canonical_solution": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]", "starter_code": "from typing import List\ndef all_unique(test_list: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[1, 2, 3, 2, 4]], [[]], [[42]], [[1, 1, 1, 1, 1]], [[-1, 0, 1, -1]], [[1000000, 1000000, 1000001]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[1, 2, 2]], [[]], [[10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 1]], [[100, 200, 300, 400, 500]], [[100, 200, 300, 400, 500, 100]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[1, 1, 2, 3, 4]], [[10]], [[]], [[1, 2, 2, 3, 4, 5]], [[0, -1, -2, -3, -4]]]"}}
{"task_id": "Mbpp/282", "requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\n\"\"\"", "entry_point": "sub_list", "canonical_solution": "def sub_list(nums1,nums2):\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]", "input_output_examples": "[[[[1, 2, 3], [4, 5, 6]]], [[[-3, -3, -3]]]]", "starter_code": "from typing import List\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [1, 2, 3]], [[-1, -2, -3], [1, 2, 3]], [[0, 0, 0], [0, 0, 0]], [[5, -5, 10], [-5, 5, -10]], [[1], [1]], [[100, 200], [50, 150]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [1, 2, 3]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-4, -5, -6]], [[1, 2], [1, 2, 3]], [[1, 2, 3], [1, 2]], [[100, 200, 300], [100, 200, 300]], [[1], [1]], [[], []]]", "gpt-4o-mini": "[[[1, 2, 3], [3, 2, 1]], [[5, 10, 15], [3, 6, 9]], [[10, 20, 30], [10, 10, 10]], [[], []], [[1, 2, 3], []], [[], [1, 2, 3]], [[1], [1]], [[1, 2], [1]], [[0, 0, 0], [0, 0, 0]], [[7, 8, 9], [0, 0, 0]]]"}}
{"task_id": "Mbpp/283", "requirement": "def validate(n: int) -> bool:\n\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\"\"\"", "entry_point": "validate", "canonical_solution": "def validate(n): \n    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)", "input_output_examples": "[[[1234]], [[True]]]", "starter_code": "def validate(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1234], [112233], [111223], [0], [123321], [1111111111], [222222], [1234567890], [1234567899], [111222333]]", "qwen2.5-coder-32b-instruct": "[[1234], [112233], [0], [9876543210], [111], [2222], [33333], [444444], [5555555], [66666666], [777777777], [8888888888], [9999999999], [1000000000], [98765], [11233445566778899], [1223334444]]", "gpt-4o-mini": "[[0], [121], [123], [221], [333], [4444], [55555], [9876543210], [100000], [111222333]]"}}
{"task_id": "Mbpp/284", "requirement": "from typing import List\n\n\ndef check_element(list1: List, element: Any) -> bool:\n\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\"\"\"", "entry_point": "check_element", "canonical_solution": "def check_element(list1, element):\n  return all(v == element for v in list1)", "input_output_examples": "[[[['green', 'orange', 'black', 'white'], 'blue']], [[False]]]", "starter_code": "from typing import List\ndef check_element(list1: List, element: Any) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[['green', 'orange', 'black', 'white'], 'blue'], [['red', 'red', 'red'], 'red'], [[], 'any'], [['same', 'same', 'same'], 'same'], [[1, 1, 1, 1], 1], [[True, True, True], True], [['mixed', 1, True], 'mixed'], [[None, None, None], None], [['element'], 'element'], [['different', 'elements', 'here'], 'here']]", "qwen2.5-coder-32b-instruct": "[[['green', 'orange', 'black', 'white'], 'blue'], [[1, 1, 1, 1], 1], [['a', 'a', 'a'], 'a'], [[True, True, True], True], [[None, None, None], None], [[], 'anything'], [[100], 100], [[1.5, 1.5, 1.5], 1.5], [[[], [], []], []], [[{}, {}, {}], {}]]", "gpt-4o-mini": "[[[1, 1, 1], 1], [['a', 'a', 'a'], 'a'], [[True, True, True], True], [[1.0, 1.0, 1.0], 1.0], [[None, None, None], None], [[1, 2, 1], 1], [[], 1], [[0, 0, 0], 1], [['test', 'test', 'test'], 'test'], [[5, 5, 5, 5, 5], 5]]"}}
{"task_id": "Mbpp/285", "requirement": "def text_match_two_three(text: str) -> bool:\n\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\"\"\"", "entry_point": "text_match_two_three", "canonical_solution": "import re\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None", "input_output_examples": "[[['ac']], [[False]]]", "starter_code": "def text_match_two_three(text: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['ac'], ['abb'], ['abbb'], ['ab'], ['abbbb'], ['aabbb'], ['xyzabb'], ['abbbxyz'], ['aabbxyz'], ['abc'], ['abbbc'], ['a'], ['b'], ['abab'], ['aabb'], ['abbbbbb'], [' '], ['123']]", "qwen2.5-coder-32b-instruct": "[['ac'], ['aab'], ['aabb'], ['aaab'], ['aaaab'], ['abb'], ['abbb'], ['abbbb'], ['a'], ['b'], ['bb'], ['bbb'], ['ab'], ['ba'], ['abc'], ['bab'], ['baba'], ['aaaa'], ['bbbb'], ['ababab'], ['bbabb'], ['aabbabbb']]", "gpt-4o-mini": "[['ab'], ['abb'], ['abbb'], ['a'], ['abcd'], ['aabbb'], ['abbbbb'], ['cabb'], ['aaabb'], ['ab aabb'], [''], ['a b'], ['a bbb'], ['ab     ']]"}}
{"task_id": "Mbpp/286", "requirement": "from typing import List\n\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\"\"\"", "entry_point": "max_sub_array_sum_repeated", "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \n\tmodifed = a * k\n\tpre = 0\t# dp[i-1]\n\tres = modifed[0]\n\tfor n in modifed:\n\t\tpre = max(pre + n, n)\n\t\tres = max(pre, res)\n\treturn res", "input_output_examples": "[[[[10, 20, -30, -1], 4, 3]], [[30]]]", "starter_code": "from typing import List\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 20, -30, -1], 4, 3], [[1, 2, 3], 3, 1], [[-1, -2, -3], 3, 2], [[5, -2, 3, 1], 4, 4], [[0, 0, 0], 3, 5], [[-1, 2, -1], 3, 3], [[1], 1, 10], [[-1, -1, -1], 3, 1], [[2, -1, 2], 3, 2], [[3, -2, 3, -2, 3], 5, 2]]", "qwen2.5-coder-32b-instruct": "[[[10, 20, -30, -1], 4, 3], [[1, 10, 1], 3, 2], [[1, -10, 1], 3, 1], [[0, 0, 0], 3, 3], [[5, 5, 5, 5], 4, 2], [[-1, -2, -3, -4], 4, 1], [[-1, -2, -3, -4], 4, 2], [[1], 1, 10], [[1, -2, 3, 5, -3, 2], 6, 2], [[3, -2, 3, 4, -1, 2, 1, -5, 4], 9, 3]]", "gpt-4o-mini": "[[[1, 2, 3], 3, 2], [[-1, -2, -3], 3, 1], [[1, -2, 3, 4], 4, 2], [[5, -1, 2, 3], 4, 4], [[0, 0, 0], 3, 5], [[-1, -2, -3], 3, 2], [[2, 3, -2, 5], 4, 3], [[1, 2, 3, 4, 5], 5, 1], [[], 0, 2], [[4, -1, 2, 1], 4, 0]]"}}
{"task_id": "Mbpp/287", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\"\"\"", "entry_point": "square_Sum", "canonical_solution": "def square_Sum(n):  \n    return 2 * n * (n + 1) * (2 * n + 1) /3", "input_output_examples": "[[[2]], [[20]]]", "starter_code": "def square_Sum(n: int) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [5], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[2], [0], [1], [-5], [10]]", "gpt-4o-mini": "[[0], [1], [2], [5], [10], [100], [-1], [3]]"}}
{"task_id": "Mbpp/290", "requirement": "from typing import List\n\n\ndef max_length(list1: List[List]) -> List:\n\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\n\"\"\"", "entry_point": "max_length", "canonical_solution": "def max_length(list1):\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])", "input_output_examples": "[[[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]]], [[(3, [13, 15, 17])]]]", "starter_code": "from typing import List\ndef max_length(list1: List[List]) -> List:", "llm_generated_inputs": {"deepseek-v3": "[[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[], [1], [2, 3], [4, 5, 6]]], [[[1, 2, 3, 4], [5, 6], [7]]], [[[1], [2], [3], [4], [5]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[[], [], []]]]", "qwen2.5-coder-32b-instruct": "[[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1, 2, 3], [4, 5], [6]]], [[[], [], []]], [[[1]]], [[]], [[[1, 2], [3, 4], [5, 6], [7, 8, 9, 10]]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]]]", "gpt-4o-mini": "[[[[], [], []]], [[[1, 2], [3, 4, 5], [6]]], [[[1], [2, 3, 4, 5, 6]]], [[[1, 2], [3, 4], [5, 6]]], [[[1, 2, 3, 4], [5], [6, 7, 8]]], [[[1], [2], [3]]], [[[1, 2], [3, 4, 5], []]], [[[1, 2, 3], [4, 5, 6, 7, 8, 9], [10]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9, 10]]]]"}}
{"task_id": "Mbpp/292", "requirement": "def find(n: int, m: int) -> int:\n\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\"\"\"", "entry_point": "find", "canonical_solution": "def find(n,m):  \n    return n // m", "input_output_examples": "[[[10, 3]], [[3]]]", "starter_code": "def find(n: int, m: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10, 3], [9, 3], [0, 5], [5, 1], [4, 5], [-10, 3], [10, -3], [-10, -3]]", "qwen2.5-coder-32b-instruct": "[[10, 3], [9, 3], [10, 2], [7, 3], [0, 5], [-10, 3], [10, -3], [-10, -3], [1, 1], [10, 10], [100, 1], [1, 100]]", "gpt-4o-mini": "[[10, 3], [9, 2], [15, 5], [7, 4], [100, 20], [0, 1], [5, 0], [-10, 3], [10, -3], [-10, -3], [1, 100], [9, 0]]"}}
{"task_id": "Mbpp/293", "requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"", "entry_point": "otherside_rightangle", "canonical_solution": "import math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w * w + h * h)", "input_output_examples": "[[[7, 8]], [[10.63014581273465]]]", "starter_code": "def otherside_rightangle(w: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[7.0, 8.0], [3.0, 4.0], [5.0, 12.0], [0.0, 0.0], [-3.0, 4.0], [3.0, -4.0], [1.0, 1.0], [1.4142135623730951, 1.4142135623730951]]", "qwen2.5-coder-32b-instruct": "[[7, 8], [3, 4], [5, 12], [8, 15], [0, 0], [0, 5], [5, 0], [-3, 4], [3, -4], [-3, -4]]", "gpt-4o-mini": "[[3.0, 4.0], [5.0, 12.0], [8.0, 6.0], [0.0, 5.0], [5.0, 0.0], [0.0, 0.0], [1.0, 1.0], [7.0, 24.0], [10.0, 10.0], [3.0, 3.0]]"}}
{"task_id": "Mbpp/294", "requirement": "def max_val(listval: list) -> int:\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\n\"\"\"", "entry_point": "max_val", "canonical_solution": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[5]]]", "starter_code": "def max_val(listval: list) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[['Python', 3, 2, 4, 5, 'version']], [[10, 20, 30, 40, 50]], [['apple', 'banana', 'cherry']], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0, 0]], [['a', 'b', 'c', 100, 'd']], [[1.5, 2.3, 3.7, 4.2]], [[]], [[True, False, 1, 0]], [[None, 10, 'test', 20]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0, 0]], [[100, 200, 300, 400, 500]], [[5, 'a', 3, 'b', 2]], [[3.5, 2, 5, 'x', 1]], [[True, False, 1, 0, -1]], [[[], {}, (), set(), 1]], [[1]], [[]]]", "gpt-4o-mini": "[[[3, 'apple', 7, 2.5, 5]], [['banana', 1, -4, 2.2, 0]], [[-1, -2, -3, -4]], [[1.1, 2.2, 3.3]], [[None, 1, 'yes', 9]], [['text', 0, 10, 'string', 15.5]], [['mixed', 'values', 'here']], [[]], [[42]]]"}}
{"task_id": "Mbpp/296", "requirement": "from typing import List\n\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to count inversions in an array.\n\"\"\"", "entry_point": "get_Inv_Count", "canonical_solution": "def get_Inv_Count(arr): \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count", "input_output_examples": "[[[[1, 20, 6, 4, 5]]], [[5]]]", "starter_code": "from typing import List\ndef get_Inv_Count(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 20, 6, 4, 5]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[]], [[1]], [[1, 1, 1, 1, 1]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]], [[100, 90, 80, 70, 60, 50, 40, 30, 20, 10]], [[1, 3, 5, 2, 4, 6]]]", "qwen2.5-coder-32b-instruct": "[[[1, 20, 6, 4, 5]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1]], [[]], [[1, 1, 1, 1, 1]], [[10, 20, 30, 25, 35, 40, 45]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[4, 3, 2, 1]], [[1, 3, 2, 4]], [[1, 5, 3, 2, 4]], [[-1, 2, -3, 4, 0]], [[1, 1, 1, 1]], [[]], [[5]], [[2, 3, 8, 6, 1]]]"}}
{"task_id": "Mbpp/297", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n\"\"\"\nWrite a function to flatten a given nested list structure.\n\"\"\"", "entry_point": "flatten_list", "canonical_solution": "def flatten_list(list1):\n\tresult = []\n\tfor item in list1:\n\t\tif isinstance(item, list):\n\t\t\tresult.extend(flatten_list(item))\n\t\telse:\n\t\t\tresult.append(item)\n\treturn result", "input_output_examples": "[[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]]], [[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]], [[1, [2, [3, [4, 5]]]]], [[[]]], [[[1], [2], [3], [4]]], [[1, 2, 3, 4, 5]], [[[], 1, [], 2, [], 3]], [[[1, 2], [3, 4], [5, 6]]], [[1, [2, 3], [4, [5, 6]], 7]]]", "qwen2.5-coder-32b-instruct": "[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]], [[]], [[1, 2, 3, 4, 5]], [[[1, 2, [3, 4]], 5]], [[[], [], []]], [[1, [2, [3, [4, [5]]]]]], [[100, [200, [300, [400, [500, [600]]]]]]], [[1, [2, 3], [[4, 5], [6, 7]], [[[8, 9], [10, 11]], [[12, 13], [14, 15]]]]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[[1, 2], [3, 4], [5]]], [[1, [2, [3, 4]], 5]], [[[], [1, 2], 3]], [[[[1], [2]], [[3], [4]]]], [[1, [2, [3, [4, [5]]]]]], [[[1, 2, 3], [4, 5], 6]], [[1, 'string', [2, 3]]], [[]], [[1, None, [2, [3]]]]]"}}
{"task_id": "Mbpp/299", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\n\"\"\"", "entry_point": "max_aggregate", "canonical_solution": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "input_output_examples": "[[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]]], [[('Juan Whelan', 212)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:", "llm_generated_inputs": {"deepseek-v3": "[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]], [[('Alice', 50), ('Bob', 60), ('Alice', 70), ('Bob', 40)]], [[('John', 100)]], [[('Anna', 200), ('Anna', 300), ('Anna', 400)]], [[('Chris', 10), ('Chris', 20), ('Chris', 30), ('Chris', 40)]], [[('Dave', 0), ('Dave', 0), ('Dave', 0)]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]], [[('Alice', 100), ('Bob', 200), ('Alice', 50)]], [[('Charlie', 150)]], [[]], [[('Dave', 0), ('Eve', 0)]], [[('Frank', -50), ('Grace', -100), ('Frank', 50)]]]", "gpt-4o-mini": "[[[('A', 10), ('B', 20), ('C', 30)]], [[('X', 50), ('Y', 40), ('Z', 60)]], [[('A', -5), ('B', -10), ('C', -3)]], [[('Apple', 0), ('Banana', 0), ('Cherry', 0)]], [[('Single', 100)]], [[(None, 10), ('Valid', 20)]], [[(1, 10), (2, 20)]], [[('Max', 100), ('max', 100)]], [[('Empty', 0), ('Tuple', 50), ('Test', 50)]], [[('Combined', 150), ('multiple', 100), ('values', 200)]]]"}}
{"task_id": "Mbpp/300", "requirement": "def count_binary_seq(n: int) -> int:\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\"\"\"", "entry_point": "count_binary_seq", "canonical_solution": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res", "input_output_examples": "[[[1]], [[2.0]]]", "starter_code": "def count_binary_seq(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [10]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10]]"}}
{"task_id": "Mbpp/301", "requirement": "def dict_depth(d: dict) -> int:\n\"\"\"\nWrite a function to find the depth of a dictionary.\n\"\"\"", "entry_point": "dict_depth", "canonical_solution": "def dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    return dict_depth_aux(d)", "input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}]], [[4]]]", "starter_code": "def dict_depth(d: dict) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[{'a': 1}], [{'a': {'b': 1}}], [{'a': {'b': {'c': 1}}}], [{'a': {'b': {'c': {'d': 1}}}}], [{'a': {'b': {'c': {'d': {}}}}}], [{}], [{'a': 1, 'b': 2, 'c': 3}], [{'a': {'b': 1}, 'c': {'d': {'e': 2}}}], [{'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': 1}}}}}}}}], [{'a': {'b': {'c': {}}, 'd': {'e': {'f': {}}}}}]]", "qwen2.5-coder-32b-instruct": "[[{'a': 1, 'b': {'c': {'d': {}}}}], [{}], [{'a': 1, 'b': 2, 'c': 3}], [{'a': {'b': {'c': {'d': {'e': {}}}}}}], [{'a': {'b': 1}, 'c': {'d': {'e': 2}}, 'f': 3}], [{'a': {'b': {'c': {'d': {'e': {'f': {'g': {}}}}}}}}], [{'a': {'b': {'c': 1}}, 'd': 2}]]", "gpt-4o-mini": "[[{}], [{'a': 1}], [{'a': {'b': 2}}], [{'a': {'b': {'c': 3}}}], [{'a': 1, 'b': 2}], [{'a': {'b': 2, 'c': {'d': 4}}}], [{'a': {'b': {'c': {'d': {'e': 5}}}}}], [{'a': {'b': {'c': {}}}}], [{'a': None}]]"}}
{"task_id": "Mbpp/305", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\n\"\"\"", "entry_point": "start_withp", "canonical_solution": "import re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "input_output_examples": "[[[['Python PHP', 'Java JavaScript', 'c c++']]], [[('Python', 'PHP')]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef start_withp(words: List[str]) -> Tuple[str, str]:", "llm_generated_inputs": {"deepseek-v3": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['Pandas', 'Pytest', 'Flask', 'PySpark']], [['Java', 'JavaScript', 'C++', 'Python']], [['Perl', 'PHP', 'Prolog', 'Pascal']], [['Ruby', 'Rust', 'Go', 'Swift']], [['Python', 'PHP', 'Java', 'C++']], [['Pizza', 'Pasta', 'Burger', 'Sandwich']], [['Python', 'Pandas', 'Pytest', 'PySpark']], [[]], [['Python', 'PHP', 'Pandas', 'Pytest', 'PySpark']]]", "qwen2.5-coder-32b-instruct": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['pandas', 'programming', 'python']], [['apple', 'banana', 'cherry']], [['Pineapple', 'peach', 'plum']], [['', 'p', 'pp']], [['no p here', 'nothing', 'still nothing']], [['P P P', 'P Q R', 'Q P R']]]", "gpt-4o-mini": "[[['pencil', 'paper', 'apple', 'plane']], [['apple', 'banana', 'grape']], [['potato', 'peach', 'pear']], [['orange', 'kiwi', 'plum', 'pluto']], [['piano', 'piper']], [['pear', 'peach', 'plum', 'grapefruit']], [['p', 'p']], [['']], [['potato', '']], [['pasta', 'notare', 'pest']]]"}}
{"task_id": "Mbpp/306", "requirement": "from typing import List\n\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\"\"\"", "entry_point": "max_sum_increasing_subseq", "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], [[11]]]", "starter_code": "from typing import List\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[10, 20, 30, 40, 50], 5, 2, 4], [[5, 4, 3, 2, 1], 5, 1, 3], [[1, 2, 3, 4, 5], 5, 0, 4], [[1], 1, 0, 0], [[100, 10, 20, 30, 40, 50], 6, 1, 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5, 9], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10, 7, 9], [[1, 3, 5, 2, 4, 6], 6, 2, 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 8, 9]]", "qwen2.5-coder-32b-instruct": "[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[3, 4, 5, 10], 4, 2, 3], [[10, 5, 4, 3], 4, 0, 1], [[1, 2, 3, 4, 5], 5, 0, 4], [[5, 4, 3, 2, 1], 5, 1, 3], [[1, 1, 1, 1, 1], 5, 2, 4], [[10, 22, 9, 33, 21, 50, 41, 60, 80], 9, 3, 8], [[1], 1, 0, 0], [[1, 2], 2, 0, 1], [[1, 2, 3], 3, 1, 2]]", "gpt-4o-mini": "[[[1, 101, 2, 3, 100, 4, 5], 7, 2, 5], [[3, 4, 5, 10], 4, 0, 3], [[3, 2], 2, 0, 1], [[10, 5, 4, 3, 2, 1], 6, 0, 5], [[1, 2, 3, 4, 5], 5, 3, 4]]"}}
{"task_id": "Mbpp/308", "requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\"\"\"", "entry_point": "large_product", "canonical_solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], [[[60, 54, 50]]]]", "starter_code": "from typing import List\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2], [3, 4], 2], [[10, 20, 30], [1, 2, 3], 1], [[-1, -2, -3], [-4, -5, -6], 2], [[0, 0, 0], [1, 2, 3], 3], [[1, 2, 3], [0, 0, 0], 2], [[], [1, 2, 3], 0], [[1, 2, 3], [], 0], [[1], [1], 1], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2], [3, 4], 1], [[10, 20, 30], [1, 2, 3], 2], [[5, 5, 5], [5, 5, 5], 3], [[-1, -2, -3], [-4, -5, -6], 2], [[0, 0, 0], [0, 0, 0], 1], [[100, 200], [1, 2], 3], [[1, 2, 3], [4, 5, 6], 0], [[1, 2, 3], [4, 5, 6], 5], [[1, 2, 3], [], 2], [[], [1, 2, 3], 2]]", "gpt-4o-mini": "[[[1, 2, 3], [4, 5, 6], 2], [[7, 8, 9], [1, 2, 3], 3], [[0, 0, 0], [0, 0, 0], 1], [[1, -1, 2], [2, -2, 3], 2], [[-1, -2, -3], [-4, -5, -6], 2], [[10, 20, 30], [5, 15, 25], 0], [[5, 10], [1, 2, 3, 4, 5], 3]]"}}
{"task_id": "Mbpp/309", "requirement": "def maximum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the maximum of two numbers.\n\"\"\"", "entry_point": "maximum", "canonical_solution": "def maximum(a,b):   \n    return max(a, b)", "input_output_examples": "[[[5, 10]], [[10]]]", "starter_code": "def maximum(a: int, b: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[5, 10], [-3, -7], [0, 0], [-5, 5], [100, 100], [-100, 100], [0, 100], [-100, 0], [999999, 1000000], [-999999, -1000000]]", "qwen2.5-coder-32b-instruct": "[[5, 10], [10, 5], [-5, -10], [-10, -5], [0, 0], [0, 1], [1, 0], [1000000, 1000000], [1000000, 999999], [999999, 1000000]]", "gpt-4o-mini": "[[3, 5], [-1, 1], [0, 0], [-10, -5], [100, 99], [1, 1], [2, 2], [999, 1000]]"}}
{"task_id": "Mbpp/310", "requirement": "def string_to_tuple(str1: str) -> tuple:\n\"\"\"\nWrite a function to convert a given string to a tuple of characters.\n\"\"\"", "entry_point": "string_to_tuple", "canonical_solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "input_output_examples": "[[['python 3.0']], [[('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')]]]", "starter_code": "def string_to_tuple(str1: str) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[['hello'], ['12345'], [''], ['a'], ['spaces  here'], ['!@#$%'], ['python 3.0'], ['   leading spaces'], ['trailing spaces   '], ['mixedCASE123']]", "qwen2.5-coder-32b-instruct": "[['python 3.0'], [''], ['a'], ['1234567890'], ['!@#$%^&*()'], ['A quick brown fox jumps over the lazy dog'], ['\\n\\t ']]", "gpt-4o-mini": "[[''], ['a'], ['abc'], ['a b c'], ['hello world'], ['123'], ['!@#'], ['longer string with multiple characters'], ['special characters !@#$%^&*()']]"}}
{"task_id": "Mbpp/311", "requirement": "def set_left_most_unset_bit(n: int) -> int:\n\"\"\"\nWrite a python function to set the left most unset bit.\n\"\"\"", "entry_point": "set_left_most_unset_bit", "canonical_solution": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos)))", "input_output_examples": "[[[10]], [[14]]]", "starter_code": "def set_left_most_unset_bit(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[10], [255], [1], [0], [123456789], [-1]]", "qwen2.5-coder-32b-instruct": "[[10], [0], [1], [2], [7], [8], [15], [31], [64], [127]]", "gpt-4o-mini": "[[0], [1], [2], [3], [15], [16], [31], [32], [63], [64], [255], [256], [511], [512], [1023], [1024]]"}}
{"task_id": "Mbpp/312", "requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"", "entry_point": "volume_cone", "canonical_solution": "import math\ndef volume_cone(r,h):\n  return (1.0 / 3) * math.pi * r * r * h", "input_output_examples": "[[[5, 12]], [[314.15926535897927]]]", "starter_code": "def volume_cone(r: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[5.0, 12.0], [0.0, 12.0], [5.0, 0.0], [0.0, 0.0], [1.0, 1.0], [10.0, 20.0], [2.5, 3.5], [-5.0, 12.0], [5.0, -12.0], [-5.0, -12.0]]", "qwen2.5-coder-32b-instruct": "[[5, 12], [0, 12], [5, 0], [0, 0], [3.5, 7.2], [-5, 12], [5, -12], [-5, -12], [1000000.0, 1000000.0], [1e-06, 1e-06]]", "gpt-4o-mini": "[[5.0, 10.0], [3.5, 7.2], [0.0, 10.0], [5.0, 0.0], [0.0, 0.0], [-3.0, 5.0], [4.5, -2.5], [100.0, 5.0]]"}}
{"task_id": "Mbpp/388", "requirement": "def highest_Power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n\"\"\"", "entry_point": "highest_Power_of_2", "canonical_solution": "def highest_Power_of_2(n): \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))", "input_output_examples": "[[[10]], [[8]]]", "starter_code": "def highest_Power_of_2(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [16], [17], [1024], [1025], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[10], [1], [0], [16], [31], [32], [-5], [1023], [1024]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [15], [16], [17], [31], [32], [33], [0], [-1]]"}}
{"task_id": "Mbpp/389", "requirement": "def find_lucas(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th lucas number.\n\"\"\"", "entry_point": "find_lucas", "canonical_solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2)", "input_output_examples": "[[[9]], [[76]]]", "starter_code": "def find_lucas(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [5], [9], [10], [-1], [20]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [2], [5], [10], [15], [20], [-1], [100]]"}}
{"task_id": "Mbpp/390", "requirement": "from typing import List\n\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\n\"\"\"", "entry_point": "add_string", "canonical_solution": "def add_string(list_, string):\n    return [string.format(i) for i in  list_]", "input_output_examples": "[[[[1, 2, 3, 4], 'temp{0}']], [[['temp1', 'temp2', 'temp3', 'temp4']]]]", "starter_code": "from typing import List\ndef add_string(list_: List[Any], string: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4], 'temp{0}'], [['a', 'b', 'c'], 'prefix_{0}'], [[], 'empty{0}'], [[True, False], 'bool_{0}'], [[1.1, 2.2, 3.3], 'float_{0}'], [['hello', 'world'], '{0}_suffix'], [[None], 'none_{0}'], [[1, 'two', 3.0, True], 'mixed_{0}'], [['single'], 'single_{0}'], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'long_{0}']]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4], 'temp{0}'], [['a', 'b', 'c'], 'char{0}'], [[True, False], 'bool{0}'], [[], 'empty{0}'], [[0, -1, 100], 'num{0}'], [[1.1, 2.2, 3.3], 'float{0}'], [[None, None], 'none{0}']]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry'], 'fruit: {}'], [['1', '2', '3'], 'number: {}'], [[], 'empty list: {}'], [['hello'], 'greeting: {}'], [['test', 'case'], 'word: {}'], [['Python', 'is', 'fun'], 'Language: {}'], [[''], 'empty string: {}'], [[None], 'value: {}'], [[True, False], 'boolean: {}'], [[1, 2, 3], 'value: {}']]"}}
{"task_id": "Mbpp/391", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n\"\"\"\nWrite a function to convert more than one list to nested dictionary.\n\"\"\"", "entry_point": "convert_list_dictionary", "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "input_output_examples": "[[[[\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]]], [[[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]]]]", "starter_code": "from typing import List\nfrom typing import Dict\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:", "llm_generated_inputs": {"deepseek-v3": "[[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]], [['A001'], ['John Doe'], [100]], [[], [], []], [['B001', 'B002'], ['Alice Smith'], [90, 95]], [['C001', 'C002', 'C003'], ['Bob Johnson', 'Charlie Brown'], [80, 85, 90]], [['D001', 'D002'], ['Eve Adams', 'Frank Wright'], [75]]]", "qwen2.5-coder-32b-instruct": "[[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]], [[], [], []], [['A', 'B'], ['X', 'Y'], [1, 2]], [['A'], ['X'], [1]], [['A', 'B', 'C'], ['X', 'Y'], [1, 2]], [['A', 'B'], ['X', 'Y', 'Z'], [1, 2]], [['A', 'B'], ['X', 'Y'], [1]], [[1, 2, 3], ['one', 'two', 'three'], ['uno', 'dos', 'tres']]]", "gpt-4o-mini": "[[[1, 2, 3], ['a', 'b', 'c'], [True, False, True]], [['apple', 'banana', 'cherry'], [1, 2, 3], []], [[], [], []], [[1, 2], ['x', 'y'], [100, 200]], [['one', 'two', 'three'], ['uno', 'dos', 'tres'], ['1', '2', '3']], [[10], ['ten'], ['10']], [['key1', 'key2'], ['value1', 'value2'], ['extra1', 'extra2']], [[1, 2, 3], [None, None, None], ['a', 'b', 'c']], [[1, 2], ['a', 'b'], [1.1, 2.2]], [[], ['only_b'], ['only_c', 'only_d', 'only_e']]]"}}
{"task_id": "Mbpp/392", "requirement": "def get_max_sum(n: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\"\"\"", "entry_point": "get_max_sum", "canonical_solution": "def get_max_sum (n):\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]", "input_output_examples": "[[[60]], [[106]]]", "starter_code": "def get_max_sum(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[60], [1], [0], [100], [2], [1000]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [10], [12], [20], [30], [60], [100], [1000]]", "gpt-4o-mini": "[[1], [2], [5], [10], [12], [15], [20], [100], [1000], [0]]"}}
{"task_id": "Mbpp/394", "requirement": "def check_distinct(test_tup: tuple) -> bool:\n\"\"\"\nWrite a function to check if given tuple contains no duplicates.\n\"\"\"", "entry_point": "check_distinct", "canonical_solution": "def check_distinct(test_tup):\n  return len(test_tup) == len(set(test_tup))", "input_output_examples": "[[[(1, 4, 5, 6, 1, 4)]], [[False]]]", "starter_code": "def check_distinct(test_tup: tuple) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 2, 3, 4, 5)], [(1, 4, 5, 6, 1, 4)], [()], [(1,)], [(1, 1)], [('a', 'b', 'c', 'd')], [('a', 'b', 'a', 'c')], [(True, False, True)], [(1.0, 2.0, 3.0, 1.0)], [((1, 2), (3, 4), (1, 2))]]", "qwen2.5-coder-32b-instruct": "[[(1, 4, 5, 6, 1, 4)], [(1, 2, 3, 4, 5)], [(10, 20, 30, 40, 50, 60)], [(1, 1, 1, 1, 1)], [(1,)], [(1, 2)], [()], [(1, 2, 2, 3, 4, 4, 5)], [('a', 'b', 'c', 'a')], [('a', 'b', 'c')]]", "gpt-4o-mini": "[[((1, 2, 3),)], [((1, 2, 2),)], [((5, 5, 5, 5),)], [((1, 'a', 3.5),)], [((True, False, True),)], [((None, None, 1),)], [((1, 'test', 3.5, True),)], [((1,),)]]"}}
{"task_id": "Mbpp/395", "requirement": "def first_non_repeating_character(str1: str) -> Optional[str]:\n\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\n\"\"\"", "entry_point": "first_non_repeating_character", "canonical_solution": "def first_non_repeating_character(str1):\n  for ch in str1:\n    if str1.count(ch) == 1:\n      return ch\n  return None", "input_output_examples": "[[['abcabc']], [[None]]]", "starter_code": "def first_non_repeating_character(str1: str) -> Optional[str]:", "llm_generated_inputs": {"deepseek-v3": "[['abcabc'], ['aabbcc'], ['abacabad'], ['hello'], ['swiss'], ['a'], [''], ['aabbcdee'], ['xyzxyz'], ['aaabbbccc']]", "qwen2.5-coder-32b-instruct": "[['abcabc'], ['aabbcc'], ['abcd'], ['aabbccddee'], ['a'], [''], ['aabbccdde'], ['swiss'], ['repetition'], ['12345678901234567890'], ['1234567890']]", "gpt-4o-mini": "[[''], ['a'], ['aa'], ['ab'], ['abcabc'], ['abca'], ['abcdabc'], ['aabbccddeeffg'], ['swiss'], ['racecar'], ['level'], ['xyzzyx'], ['assiistent'], ['abacabadabacaba']]"}}
{"task_id": "Mbpp/397", "requirement": "def median_numbers(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the median of three numbers.\n\"\"\"", "entry_point": "median_numbers", "canonical_solution": "def median_numbers(a,b,c):\n    return sorted([a,b,c])[1]", "input_output_examples": "[[[25, 55, 65]], [[55.0]]]", "starter_code": "def median_numbers(a: int, b: int, c: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[25, 55, 65], [10, 20, 30], [30, 20, 10], [5, 5, 5], [0, 0, 0], [-1, -2, -3], [-100, 0, 100], [1, 2, 2], [2, 1, 2]]", "qwen2.5-coder-32b-instruct": "[[25, 55, 65], [10, 20, 30], [3, 1, 2], [-1, -2, -3], [0, 0, 0], [100, 100, 50], [5, 5, 5], [7, 8, 7], [9, 7, 8]]", "gpt-4o-mini": "[[1, 2, 3], [3, 1, 2], [-1, 0, 1], [5, 5, 5], [100, 200, 150], [0, 0, 0], [1, -1, 0], [-10, -20, -5]]"}}
{"task_id": "Mbpp/398", "requirement": "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\n\"\"\"", "entry_point": "sum_of_digits", "canonical_solution": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "input_output_examples": "[[[[10, 2, 56]]], [[14]]]", "starter_code": "from typing import List\ndef sum_of_digits(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 2, 56]], [[123, 456, 789]], [[0]], [[999, 1, 1]], [[-1, -2, -3]], [[1000, 2000, 3000]], [[111, 222, 333]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[10, 2, 56]], [[0, 0, 0]], [[99, 101, 111]], [[1234, 5678, 91011]], [[9, 99, 999]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[11111, 22222, 33333]], [[100, 200, 300]], [[0]], [[]]]", "gpt-4o-mini": "[[[123, 456, 789]], [[0, 0, 0]], [[1, 2, 3]], [[999, 1001]], [[-123, -456, -789]], [[10, 20, 30]], [[101, 202, 303]], [[]], [[7]], [[1000000000]]]"}}
{"task_id": "Mbpp/404", "requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"", "entry_point": "minimum", "canonical_solution": "def minimum(a,b):   \n    return min(a,b)", "input_output_examples": "[[[1, 2]], [[1]]]", "starter_code": "def minimum(a: int, b: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1, 2], [5, 3], [-1, -2], [0, 0], [-5, 5], [100, 100], [2147483647, -2147483648]]", "qwen2.5-coder-32b-instruct": "[[1, 2], [-1, -2], [0, 0], [100, 200], [-100, 100], [5, 5], [-5, -5], [2147483647, 2147483646], [-2147483648, -2147483647]]", "gpt-4o-mini": "[[1, 2], [-1, -2], [0, 5], [5, 0], [-5, 5], [100, 100], [-100, -50], [2147483647, -2147483648], [-2147483648, 2147483647]]"}}
{"task_id": "Mbpp/405", "requirement": "def check_tuplex(tuplex: tuple, element: object) -> bool:\n\"\"\"\nWrite a function to check whether an element exists within a tuple.\n\"\"\"", "entry_point": "check_tuplex", "canonical_solution": "def check_tuplex(tuplex, element): \n  return element in tuplex", "input_output_examples": "[[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r']], [[True]]]", "starter_code": "def check_tuplex(tuplex: tuple, element: object) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r'], [('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 's'], [('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'z'], [(1, 2, 3, 4, 5), 3], [(1, 2, 3, 4, 5), 6], [(True, False, True), False], [(True, False, True), True], [(1.1, 2.2, 3.3), 2.2], [(1.1, 2.2, 3.3), 4.4], [(None, 'None', 0), None], [(None, 'None', 0), 'None'], [(), 'empty'], [((1, 2), (3, 4), (5, 6)), (1, 2)], [((1, 2), (3, 4), (5, 6)), (7, 8)]]", "qwen2.5-coder-32b-instruct": "[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r'], [(1, 2, 3, 4, 5), 3], [(1, 2, 3, 4, 5), 6], [(1, 2, 3, 4, 5), '1'], [(1, 2, 3, 4, 5), None], [(None, None, None), None], [(True, False, True), True], [(True, False, True), False], [(True, False, True), 'False']]", "gpt-4o-mini": "[[(1, 2, 3), 2], [('a', 'b', 'c'), 'b'], [((1, 2), (3, 4)), (3, 4)], [((1, 2), 5), 5], [((), 'test'), 'test']]"}}
{"task_id": "Mbpp/406", "requirement": "def find_Parity(x: int) -> bool:\n\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\n\"\"\"", "entry_point": "find_Parity", "canonical_solution": "def find_Parity(x): \n    return x % 2 != 0", "input_output_examples": "[[[12]], [[False]]]", "starter_code": "def find_Parity(x: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[12], [13], [0], [-1], [-2], [1], [2]]", "qwen2.5-coder-32b-instruct": "[[12], [3], [0], [-1], [-4], [1], [2147483647], [-2147483648]]", "gpt-4o-mini": "[[1], [2], [-1], [-2], [0], [999], [-999]]"}}
{"task_id": "Mbpp/409", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n\"\"\"", "entry_point": "min_product_tuple", "canonical_solution": "def min_product_tuple(list1):\n    return min(x * y for x, y in list1)", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[8]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(1, 1), (2, 2), (3, 3)]], [[(-1, 5), (-2, 3), (0, 0)]], [[(10, -10), (20, -20), (30, -30)]], [[(0, 0), (0, 0), (0, 0)]], [[(-1, -1), (-2, -2), (-3, -3)]], [[(100, 1), (50, 2), (25, 4)]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(3, 3), (5, 5), (1, 1)]], [[(-1, -1), (-2, -2), (0, 1)]], [[(0, 10), (10, 0), (5, 5)]], [[(100, 1), (50, 2), (25, 4)]], [[(1, 1)]], [[]]]", "gpt-4o-mini": "[[[(-1, -2), (3, 1), (0, 5)]], [[(5, 5), (2, 3), (4, 1)]], [[(0, 0), (0, 2), (2, 3)]], [[(7, 1), (2, 4), (-3, 10)]], [[(-1, 2), (-2, -3), (0, -4)]], [[(1, 1), (2, 2), (3, 3)]], [[(10, 0), (2, 2), (-5, -5)]], [[(0, 3), (4, 0), (1, -1)]]]"}}
{"task_id": "Mbpp/410", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"", "entry_point": "min_val", "canonical_solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[2]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef min_val(listval: List[Union[int, Any]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 2, 1, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[10, 'hello', 20, 30, 'world']], [[-5, -10, -1, -3]], [[0, 0, 0, 0]], [[100]], [[]], [['a', 'b', 'c']], [[True, False, 1, 0]], [[None, 5, 3, 7]], [[1.5, 2.3, 0.9, 3.1]]]", "qwen2.5-coder-32b-instruct": "[[[3, 1, 4, 1, 5, 9]], [['apple', 100, 200, 'banana', 50]], [[0, -1, -2, 'zero', 'negative']], [[True, False, 1, 0, 'true', 'false']], [[3.14, 2.71, 'pi', 'e', 1.618]], [[1000000, 999999, 'large', 'number']], [[1]], [[]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[-10, -20, -30]], [[5.5, 3.2, 4.8]], [['a', 'b', 'c']], [[None, 3, 1]], [['apple', 10, 3.1]], [[-1, 0, 1]], [[1, 'text', 3.5, True]], [['a', 2, 3.14, 'z']], [[1, 2, -2, -3, -4, 0]]]"}}
{"task_id": "Mbpp/412", "requirement": "from typing import List\n\n\ndef remove_odd(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\n\"\"\"", "entry_point": "remove_odd", "canonical_solution": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]", "input_output_examples": "[[[[1, 2, 3]]], [[[2]]]]", "starter_code": "from typing import List\ndef remove_odd(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[2, 4, 6, 8]], [[1, 3, 5, 7]], [[]], [[0, -1, -2, -3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[4, 5, 6, 7]], [[10, 15, 20, 25]], [[]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10]], [[0, 1, 2, 3, 4, 5]], [[11, 22, 33, 44, 55]], [[100, 101, 102, 103, 104]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[10, 15, 20, 25, 30]], [[0, 2, 4, 6, 8]], [[1, 1, 1, 1]], [[-1, -2, -3, -4, -5]], [[0]], [[]], [[2, 3, 5, 7, 9, 10]]]"}}
{"task_id": "Mbpp/413", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List\n\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\n\"\"\"", "entry_point": "extract_nth_element", "canonical_solution": "def extract_nth_element(list1, n):\n    return [x[n] for x in list1]", "input_output_examples": "[[[[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0]], [[['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef extract_nth_element(list1: List[Tuple], n: int) -> List", "llm_generated_inputs": {"deepseek-v3": "[[[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2], [[('Alice', 85), ('Bob', 90), ('Charlie', 95)], 0], [[('Alice', 85), ('Bob', 90), ('Charlie', 95)], 1], [[('Alice',), ('Bob',), ('Charlie',)], 0], [[], 0], [[('Single', 100)], 0], [[('Single', 100)], 1]]", "qwen2.5-coder-32b-instruct": "[[[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 3], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], -1], [[()], 0], [[('SingleElement',)], 0], [[('SingleElement',)], 1], [[('SingleElement',)], -1]]", "gpt-4o-mini": "[[[(1, 2), (3, 4), (5, 6), (7, 8)], 0], [[(1, 2), (3, 4), (5, 6), (7, 8)], 1], [[(10, 20), (30, 40), (50, 60)], 0], [[(10, 20), (30, 40), (50, 60)], 2], [[], 0], [[(1, 2)], 0], [[(1, 2)], 1], [[('a', 'b'), ('c', 'd')], 0], [[('a', 'b'), ('c', 'd')], 2], [[('x', 'y', 'z'), ('a', 'b', 'c')], 1]]"}}
{"task_id": "Mbpp/414", "requirement": "from typing import List\n\n\ndef overlapping(list1: List, list2: List) -> bool:\n\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\"\"\"", "entry_point": "overlapping", "canonical_solution": "def overlapping(list1,list2):  \n    return any(v in list2 for v in list1)", "input_output_examples": "[[[[1, 2, 3, 4, 5], [6, 7, 8, 9]]], [[False]]]", "starter_code": "from typing import List\ndef overlapping(list1: List, list2: List) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [3, 4, 5]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3], [1, 2, 3]], [['a', 'b', 'c'], ['c', 'd', 'e']], [['a', 'b', 'c'], ['d', 'e', 'f']], [[1.1, 2.2, 3.3], [3.3, 4.4, 5.5]], [[True, False], [False, True]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5], [6, 7, 8, 9]], [[1, 2, 3, 4, 5], [5, 6, 7, 8]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3], [4, 5, 1]], [['a', 'b', 'c'], ['x', 'y', 'z', 'a']], [[True, False], [False, True]], [[None, 1, 2], [3, 4, None]], [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]], [[1.1, 2.2, 3.3], [3.3, 4.4, 5.5]]]", "gpt-4o-mini": "[[[1, 2, 3], [3, 4, 5]], [['apple', 'banana'], ['banana', 'cherry']], [[1, 2, 3], [4, 5, 6]], [[True, False], [False, True]], [[1], [1]], [[], [1, 2, 3]], [[1, 2, 3], []], [['a', 'b', 'c'], ['C', 'B', 'A']], [[1.0, 2.0], [2, 3]], [[None], [None, 1]]]"}}
{"task_id": "Mbpp/415", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\n\"\"\"", "entry_point": "max_Product", "canonical_solution": "def max_Product(arr): \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])", "input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]]], [[(7, 8)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_Product(arr: List[int]) -> Tuple[int, int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 7, 0, 8, 4]], [[-1, -2, -3, -4, -7, 0, -8, -4]], [[-1, 2, -3, 4, -7, 0, 8, -4]], [[1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 0, 0, 0]], [[5]], [[5, 10]], [[]], [[3, -1, 4, -1, 5, -9, 2, 6]], [[-10, -3, -5, -6, -20]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 7, 0, 8, 4]], [[10, -10, 20, -20, 3, 2]], [[1, 1, 1, 1, 1]], [[0, 0, 0, 0]], [[1, 2]], [[-1, -2, -3, -4]], [[5]], [[-1, 0, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[0, 1, 2, 3, 4]], [[10, 20, 30, 40]], [[-10, -20, 0, 10, 20]], [[1, 2, -1, -2, -3]], [[5]], [[]], [[-1, -2, -3, 1, 2, 3]], [[2, 2, 3, 4]]]"}}
{"task_id": "Mbpp/418", "requirement": "from typing import List\n\n\ndef Find_Max(lst: List[str]) -> str:\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\n\"\"\"", "entry_point": "Find_Max", "canonical_solution": "def Find_Max(lst): \n    return max(lst, key = len)", "input_output_examples": "[[[[['A'], ['A', 'B'], ['A', 'B', 'C']]]], [[['A', 'B', 'C']]]]", "starter_code": "from typing import List\ndef Find_Max(lst: List[str]) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[[['A'], ['A', 'B'], ['A', 'B', 'C']]], [[['apple'], ['banana'], ['cherry', 'date']]], [[['one'], ['two', 'three'], ['four', 'five', 'six']]], [[['a'], ['b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i', 'j']]], [[['x'], ['y', 'z'], ['w', 'x', 'y', 'z']]], [[['short'], ['longer'], ['longest', 'of', 'all']]], [[['single']]], [[[], ['not', 'empty'], ['longer', 'list']]], [[['a', 'b', 'c'], ['d', 'e'], ['f']]], [[['1'], ['2', '3'], ['4', '5', '6'], ['7', '8', '9', '10']]]]", "qwen2.5-coder-32b-instruct": "[[['apple', 'banana', 'cherry']], [['dog', 'elephant', 'cat']], [['a', 'ab', 'abc']], [['same', 'size', 'list']], [[]], [['oneelement']], [['longestwordinthislist', 'short', 'tiny']], [['equal', 'equal', 'equal']]]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry']], [['short', 'medium', 'longerword']], [['single', 'double', 'triplet', 'quadruple']], [['', 'non-empty', '']], [['a', 'ab', 'abc', 'abcd', 'abcde']], [['same', 'size', 'word']], [['', '']]]"}}
{"task_id": "Mbpp/419", "requirement": "from typing import List\n\n\ndef round_and_sum(list1: List[float]) -> float:\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"", "entry_point": "round_and_sum", "canonical_solution": "def round_and_sum(list1):\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l", "input_output_examples": "[[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]]], [[243]]]", "starter_code": "from typing import List\ndef round_and_sum(list1: List[float]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[0.0, 0.0, 0.0]], [[-1.5, 2.5, 3.6]], [[1.1, 2.2, 3.3, 4.4, 5.5]], [[-10.9, 10.9]], [[100.499, 200.501]], [[]], [[0.4999999999999999]], [[0.5000000000000001]], [[-999.999, 999.999]]]", "qwen2.5-coder-32b-instruct": "[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[1.5, 2.5, 3.5]], [[0.0, 0.0, 0.0]], [[-1.1, -2.9, 3.3]], [[100.0, 200.0, 300.0]], [[1.49, 2.51, 3.49]], [[1e-09, 2e-09, 3e-09]], [[1.0, 2.0, 3.0]], [[1.1, 1.9, 2.1, 2.9]], [[]]]", "gpt-4o-mini": "[[[1.5, 2.5, 3.5]], [[-1.2, -2.6, -3.4]], [[0.1, 0.9, 2.2]], [[1.1, 2.2, 3.3, 4.4]], [[0, 1, 2, 3]], [([5.5, 6.6],)], [[]], [[10000000000.0, 20000000000.0, 30000000000.0]], [[-10000000000.0, -20000000000.0, -30000000000.0]], [[3.14159, 2.71828, 1.61803]]]"}}
{"task_id": "Mbpp/420", "requirement": "def cube_Sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\n\"\"\"", "entry_point": "cube_Sum", "canonical_solution": "def cube_Sum(n): \n    return 2 * (n ** 2) * ((n + 1) ** 2)", "input_output_examples": "[[[2]], [[72]]]", "starter_code": "def cube_Sum(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[2], [1], [0], [5], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [0], [-1], [10], [100]]", "gpt-4o-mini": "[[1], [2], [3], [0], [-1], [10], [100], [50]]"}}
{"task_id": "Mbpp/421", "requirement": "def concatenate_tuple(test_tup: tuple) -> str:\n\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\n\"\"\"", "entry_point": "concatenate_tuple", "canonical_solution": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res))", "input_output_examples": "[[[('ID', 'is', 4, 'UTS')]], [['ID-is-4-UTS']]]", "starter_code": "def concatenate_tuple(test_tup: tuple) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[('ID', 'is', 4, 'UTS')], [('Hello', 'World')], [(1, 2, 3, 4, 5)], [('SingleElement',)], [()], [('Python', 3.9, 'is', 'awesome')], [('', '', '')], [(None, 'None', 0)]]", "qwen2.5-coder-32b-instruct": "[[('ID', 'is', 4, 'UTS')], [(1, 2, 3, 4)], [('Hello', 'World')], [(True, False, True)], [(1,)], [(None, 'value')], [([], {})], [()]]", "gpt-4o-mini": "[[('apple', 'banana', 'cherry')], [(1, 2, 3)], [(True, False, True)], [(None, 'text', 42)], [('Hello', ' ', 'World')], [(1.1, 2.2, 3.3)], [()]]"}}
{"task_id": "Mbpp/422", "requirement": "def find_Average_Of_Cube(n: int) -> float:\n\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\n\"\"\"", "entry_point": "find_Average_Of_Cube", "canonical_solution": "def find_Average_Of_Cube(n):  \n    return sum([(i ** 3) for i in range(1, n + 1)]) / n", "input_output_examples": "[[[2]], [[4.5]]]", "starter_code": "def find_Average_Of_Cube(n: int) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [10], [0], [-3]]", "qwen2.5-coder-32b-instruct": "[[2], [1], [3], [0], [-1], [10]]", "gpt-4o-mini": "[[1], [2], [3], [10], [100], [1000], [0]]"}}
{"task_id": "Mbpp/424", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\n\"\"\"", "entry_point": "extract_rear", "canonical_solution": "def extract_rear(test_tuple):\n  return [ele[-1] for ele in test_tuple]", "input_output_examples": "[[[('Mers', 'for', 'Vers')]], [[['s', 'r', 's']]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[('Mers', 'for', 'Vers')], [('Python', 'Java', 'C++', 'Go')], [('a', 'b', 'c')], [('hello', 'world')], [('', '', '')], ['a'], [()], [('longstring', 'short')]]", "qwen2.5-coder-32b-instruct": "[[('Mers', 'for', 'Vers')], [('a', 'b', 'c')], [('hello', 'world')], [('single',)], [(('',),)], [(('multi', 'char', 'strings'),)], [(('one', 'two', ''),)], [('123', '456', '789')], [('!', '@', '#')]]", "gpt-4o-mini": "[[(('apple', 'banana', 'cherry'),)], [(('dog', 'cat', 'mouse'),)], [(('hello', 'world'),)], [(('single',),)], [(('', 'non-empty', 'empty'),)], [(('123', '456', '789'),)], [(('space ', ' test', 'end '),)]]"}}
{"task_id": "Mbpp/425", "requirement": "from typing import List\n\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\n\"\"\"", "entry_point": "count_element_in_list", "canonical_solution": "def count_element_in_list(list1, x): \n    return sum(x in sublist for sublist in list1)", "input_output_examples": "[[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1]], [[3]]]", "starter_code": "from typing import List\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [[[], [1, 2], [3, 4], [5, 6]], 2], [[[1, 1, 1], [2, 2], [3, 3, 3]], 1], [[[1, 2], [3, 4], [5, 6]], None], [[[None, None], [1, 2], [3, 4]], None], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3], [[[1], [2], [3], [4], [5]], 1], [[[1, 1], [2, 2], [3, 3]], 1], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]]", "qwen2.5-coder-32b-instruct": "[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1], [[[2, 4], [6, 8], [10, 12]], 3], [[], 1], [[[1, 1, 1], [1, 2, 3], [4, 5, 1]], 1], [[[1, 2], [2, 3], [3, 4], [4, 1]], 1], [[[1, 2], [2, 3], [3, 4], [4, 1]], 2], [[[None, None], [None, 1], [1, None]], None], [[[True, False], [False, True], [True, True]], True], [[[1.1, 2.2], [2.2, 3.3], [3.3, 1.1]], 1.1], [[[[1], [2]], [[2], [3]], [[3], [1]]], [1]]]", "gpt-4o-mini": "[[[[1, 2, 3], [4, 5, 6], [1, 7, 8]], 1], [[['apple', 'banana'], ['orange', 'apple'], ['grape']], 'apple'], [[[], ['empty'], ['not empty']], 'not empty'], [[[True, False], [False, True], [True]], True], [[[None, 1], [2, 3], [None, 4]], None], [[[1, 1], [2, 3], [1, 4]], 1], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [[[1, 2, 3], [3, 2, 1], [1, 2]], 2]]"}}
{"task_id": "Mbpp/426", "requirement": "from typing import List\n\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to filter odd numbers.\n\"\"\"", "entry_point": "filter_oddnumbers", "canonical_solution": "def filter_oddnumbers(nums):\n    return [n for n in nums if n % 2 == 1]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 3, 5, 7, 9]]]]", "starter_code": "from typing import List\ndef filter_oddnumbers(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[]], [[0]], [[-1, -2, -3, -4, -5]], [[11, 13, 15, 17, 19]], [[1, 1, 2, 2, 3, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[]], [[0]], [[-1, -2, -3, -4, -5]], [[11, 22, 33, 44, 55]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[2, 4, 6, 8]], [[1, 3, 5, 7]], [[0, -1, -2, -3]], [[10, 21, 32, 43, 54]], [[]], [[2]], [[1]], [[3, 5, 7, 9]], [[2, 4, 6, 8, 10]]]"}}
{"task_id": "Mbpp/427", "requirement": "def change_date_format(dt: str) -> str:\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"", "entry_point": "change_date_format", "canonical_solution": "import re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "input_output_examples": "[[['2026-01-02']], [['02-01-2026']]]", "starter_code": "def change_date_format(dt: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['2026-01-02'], ['1999-12-31'], ['2000-01-01'], ['2020-02-29'], ['0001-01-01'], ['9999-12-31'], ['2023-11-30'], ['2023-04-15'], ['2023-07-04'], ['2023-10-31']]", "qwen2.5-coder-32b-instruct": "[['2026-01-02'], ['2000-12-31'], ['1999-01-01'], ['2023-10-05'], ['2023-02-28'], ['2024-02-29'], ['2023-04-30'], ['2023-06-15'], ['2023-11-11'], ['2023-07-04'], ['2023-03-00'], ['2023-13-01'], ['abcd-ef-gh'], ['2023-0-12'], ['2023-12-0'], ['2023-00-12'], ['2023-12-00'], ['2023--12'], ['2023-12-'], ['2023-12-123'], ['2023-1-1']]", "gpt-4o-mini": "[['2023-01-15'], ['2000-12-31'], ['1995-07-04'], ['2022-02-28'], ['2020-02-29'], ['2023-10-01'], ['1900-01-01'], ['2020-12-15'], ['2021-06-30'], ['2019-04-10'], ['2023-10-31']]"}}
{"task_id": "Mbpp/428", "requirement": "from typing import List\n\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given array by using shell sort.\n\"\"\"", "entry_point": "shell_sort", "canonical_solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list", "input_output_examples": "[[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]]], [[[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]]]]", "starter_code": "from typing import List\ndef shell_sort(my_list: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[42]], [[]], [[10, 5, 15, 10, 5, 15]], [[-3, -1, -2, -4, -5]], [[0, 0, 0, 0]], [[1000000, 1, 100, 10000, 10]]]", "qwen2.5-coder-32b-instruct": "[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[5, 2, 9, 1, 5, 6]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[]], [[42]], [[3, 3, 3, 3, 3]], [[100, -20, 0, 5, 3]]]", "gpt-4o-mini": "[[[5, 2, 9, 1, 5, 6]], [[3]], [[3, 1, 2]], [[-1, -5, 3, 0, 2]], [[]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 3, 2, 1]], [[10, 7, 8, 9, 1, 5]]]"}}
{"task_id": "Mbpp/429", "requirement": "from typing import Tuple\n\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\n\"\"\"", "entry_point": "and_tuples", "canonical_solution": "def and_tuples(test_tup1, test_tup2):\n  return tuple(x & y for x, y in zip(test_tup1, test_tup2))", "input_output_examples": "[[[(10, 4, 6, 9), (5, 2, 3, 3)]], [[(0, 0, 2, 1)]]]", "starter_code": "from typing import Tuple\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(0, 1, 2), (1, 0, 2)], [(15, 255), (255, 15)], [(128, 64, 32), (255, 255, 255)], [(), ()], [(1,), (0,)], [(255, 255, 255), (0, 0, 0)], [(7, 7, 7), (7, 7, 7)]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(1, 1, 1, 1), (1, 1, 1, 1)], [(0, 0, 0, 0), (0, 0, 0, 0)], [(15, 8, 12, 7), (1, 0, 4, 3)], [(255, 128, 64, 32), (1, 1, 1, 1)], [(-1, -2, -3, -4), (-1, -2, -3, -4)], [(100, 200, 300, 400), (0, 0, 0, 0)], [(1, 2, 3, 4), (0, 0, 0, 0)]]", "gpt-4o-mini": "[[(1, 2, 3), (4, 5, 6)], [(1, 0, 3), (4, 0, 6)], [(1,), (2,)], [(1, 2, 3), ()], [(1, 2), (3, 4, 5)]]"}}
{"task_id": "Mbpp/430", "requirement": "def parabola_directrix(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the directrix of a parabola.\n\"\"\"", "entry_point": "parabola_directrix", "canonical_solution": "def parabola_directrix(a, b, c): \n  return ((int)(c - ((b * b) + 1) * 4 * a ))", "input_output_examples": "[[[5, 3, 2]], [[-198]]]", "starter_code": "def parabola_directrix(a: int, b: int, c: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[5, 3, 2], [0, 0, 0], [-1, -2, -3], [1, 0, 0], [1000000, 2000000, 3000000], [-5, 3, -2], [1, 1, 1], [2, -4, 6]]", "qwen2.5-coder-32b-instruct": "[[5, 3, 2], [1, 0, 0], [0, 1, 0], [1, 2, 1], [-1, -2, -1], [2, 4, 4], [1, -4, 4], [1, 0, -1], [1, 0, 1], [0, 0, 0]]", "gpt-4o-mini": "[[1, 0, 0], [1, 2, 1], [2, 4, 1], [1, -1, 1], [0, 0, 0], [-1, -2, -1], [10, 5, 2], [-5, 3, 2]]"}}
{"task_id": "Mbpp/432", "requirement": "def median_trapezium(base1: float, base2: float, height: float) -> float:\n\"\"\"\nWrite a function to find the median length of a trapezium.\n\"\"\"", "entry_point": "median_trapezium", "canonical_solution": "def median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2", "input_output_examples": "[[[15, 25, 35]], [[20]]]", "starter_code": "def median_trapezium(base1: float, base2: float, height: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[15.0, 25.0, 35.0], [10.0, 20.0, 30.0], [5.0, 15.0, 25.0], [0.0, 10.0, 20.0], [-5.0, 5.0, 15.0], [100.0, 200.0, 300.0], [0.5, 1.5, 2.5], [0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [1.0, 2.0, 3.0]]", "qwen2.5-coder-32b-instruct": "[[15, 25, 35], [0, 0, 0], [10, 10, 10], [5.5, 10.5, 7.2], [-5, -10, 15], [100, 200, 300], [1000000000.0, 2000000000.0, 3000000000.0], [1.1, 2.2, 3.3], [1000, 500, 0], [1, 1000000.0, 1000000.0]]", "gpt-4o-mini": "[[4.0, 6.0, 5.0], [10.0, 20.0, 15.0], [0.0, 10.0, 5.0], [-5.0, 5.0, 3.0], [7.5, 7.5, 10.0], [3.5, 1.5, 2.0], [100000.0, 1000000.0, 1000.0]]"}}
{"task_id": "Mbpp/433", "requirement": "from typing import List\n\n\ndef check_greater(arr: List[int], number: int) -> bool:\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\n\"\"\"", "entry_point": "check_greater", "canonical_solution": "def check_greater(arr, number):\n  return all(number > el for el in arr)", "input_output_examples": "[[[[1, 2, 3, 4, 5], 4]], [[False]]]", "starter_code": "from typing import List\ndef check_greater(arr: List[int], number: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], 4], [[10, 20, 30], 25], [[5, 5, 5, 5], 5], [[], 10], [[1], 0], [[100, 200, 300], 150], [[-1, -2, -3], -2], [[0, 0, 0], 0], [[1, 2, 3], 6]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5], 4], [[1, 2, 3, 4, 5], 6], [[10, 20, 30], 25], [[100, 200, 300], 301], [[5, 5, 5, 5], 5], [[5, 5, 5, 5], 4], [[], 1], [[1], 1], [[1], 2], [[-1, -2, -3], 0], [[-1, -2, -3], -2]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 6], [[10, 20, 30], 25], [[5, 5, 5, 5], 5], [[-1, -2, -3], 0], [[], 1], [[100, 50, 25], 101], [[0, 0, 0], 0], [[3, 3, 3], 2]]"}}
{"task_id": "Mbpp/435", "requirement": "def last_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"", "entry_point": "last_Digit", "canonical_solution": "def last_Digit(n) :\n    if n < 0: \n        n = -n\n    return n % 10", "input_output_examples": "[[[123]], [[3]]]", "starter_code": "def last_Digit(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[123], [0], [10], [987654321], [-123], [-1], [9999999999], [1]]", "qwen2.5-coder-32b-instruct": "[[123], [0], [-456], [9], [1000000], [-1]]", "gpt-4o-mini": "[[-1], [0], [5], [10], [123456789], [1000], [9999], [42], [1000000], [-987654321]]"}}
{"task_id": "Mbpp/436", "requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\n\"\"\"", "entry_point": "neg_nos", "canonical_solution": "def neg_nos(list1):\n  return [i for i in list1 if i < 0]", "input_output_examples": "[[[[-1, 4, 5, -6]]], [[[-1, -6]]]]", "starter_code": "from typing import List\ndef neg_nos(list1: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[-1, 4, 5, -6]], [[0, 1, 2, 3]], [[-10, -20, -30]], [[100, -200, 300, -400]], [[]], [[-1, -1, -1, -1]], [[1, 2, 3, -4, -5, 6]]]", "qwen2.5-coder-32b-instruct": "[[[-1, 4, 5, -6]], [[0, 2, 3, 4]], [[-1, -2, -3, -4]], [[1, 2, 3, 4]], [[]], [[0]], [[-1, 0, 1]]]", "gpt-4o-mini": "[[[]], [[1, 2, 3]], [[-1, -2, -3]], [[0, 1, -1, 2, -2]], [[-5, -10, 0, 5, 10]], [[100, -50, -25, 0, -100]], [[-3, -1, -4, -2, -5]], [[0]], [[-10]]]"}}
{"task_id": "Mbpp/437", "requirement": "def remove_odd(s: str) -> str:\n\"\"\"\nWrite a function to remove odd characters in a string.\n\"\"\"", "entry_point": "remove_odd", "canonical_solution": "def remove_odd(str1):\n    return str1[1::2]", "input_output_examples": "[[['python']], [['yhn']]]", "starter_code": "def remove_odd(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['python'], ['abcdef'], ['123456'], ['a1b2c3'], [''], ['a'], ['ab'], ['abcde'], ['!@#$%^'], ['Hello, World!']]", "qwen2.5-coder-32b-instruct": "[['python'], ['abcdefg'], ['1234567890'], ['a'], [''], ['AeIoU'], ['12345'], ['!@#$%^&*()'], ['pYtHoN']]", "gpt-4o-mini": "[['abcdef'], ['123456'], ['aabbcc'], ['abcde'], [''], ['a'], ['aa'], ['abcdefghij'], ['!@#$%^&*()'], ['A1B2C3D4']]"}}
{"task_id": "Mbpp/439", "requirement": "from typing import List\n\n\ndef multiple_to_single(L: List[int]) -> int:\n\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\n\"\"\"", "entry_point": "multiple_to_single", "canonical_solution": "def multiple_to_single(L):\n  return int(''.join(map(str,L)))", "input_output_examples": "[[[[11, 33, 50]]], [[113350]]]", "starter_code": "from typing import List\ndef multiple_to_single(L: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[11, 33, 50]], [[1, 2, 3, 4, 5]], [[0, 0, 0]], [[9]], [[10, 20, 30, 40]], [[100, 200, 300]], [[7, 77, 777]], [[123, 456, 789]], [[0]], [[99, 999, 9999]]]", "qwen2.5-coder-32b-instruct": "[[[11, 33, 50]], [[1, 2, 3, 4, 5]], [[0, 0, 0]], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], [[123]], [[]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[0, 4, 5]], [[9, 8, 7, 6]], [[1, 0, 2, 3]], [[5]], [[0]], [[10, 20, 30]], [[-1, -2, -3]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1]]]"}}
{"task_id": "Mbpp/440", "requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\n\"\"\"", "entry_point": "find_adverb_position", "canonical_solution": "import re\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))", "input_output_examples": "[[['clearly!! we can see the sky']], [[(0, 7, 'clearly')]]]", "starter_code": "from typing import Tuple\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:", "llm_generated_inputs": {"deepseek-v3": "[['clearly!! we can see the sky'], ['She quickly ran to the store'], ['He spoke softly to avoid waking the baby'], ['The car suddenly stopped at the intersection'], ['They happily accepted the invitation'], ['The dog barked loudly at the stranger'], ['She carefully placed the vase on the table'], ['The sun slowly set behind the mountains'], ['He quietly left the room'], ['The bird flew swiftly across the sky'], ['The teacher patiently explained the concept'], ['The child eagerly opened the gift'], ['The wind blew gently through the trees'], ['The cat silently crept towards the mouse'], ['The boy bravely faced the challenge'], ['The audience clapped enthusiastically after the performance'], ['The river flowed smoothly through the valley'], ['The man confidently delivered his speech'], ['The woman gracefully danced across the stage'], ['The team successfully completed the project']]", "qwen2.5-coder-32b-instruct": "[['clearly!! we can see the sky'], ['we can see the sky clearly!!'], ['she sings beautifully'], ['quickly and quietly he left'], ['no adverbs here'], [' '], [''], ['adverbially speaking, this is correct'], ['this sentence has an adverb too quickly'], ['evenly distributed adverbs are tricky']]", "gpt-4o-mini": "[['Quickly, she ran to the store.'], ['He sings beautifully and dances gracefully.'], ['She spoke softly to the frightened child.'], ['The cat sat silently on the mat.'], ['Unfortunately, we missed the train.'], ['This is a simple sentence without an adverb.'], ['Happily, he accepted the award.'], [''], ['Adverbs are words that modify verbs, adjectives, or other adverbs.'], ['She quickly said that everything was fine.']]"}}
{"task_id": "Mbpp/441", "requirement": "def surfacearea_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the surface area of a cube of a given size.\n\"\"\"", "entry_point": "surfacearea_cube", "canonical_solution": "def surfacearea_cube(l):\n  return 6 * l * l", "input_output_examples": "[[[5]], [[150]]]", "starter_code": "def surfacearea_cube(l: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[5], [1], [0], [10], [-3]]", "qwen2.5-coder-32b-instruct": "[[5], [1], [0], [-1], [10]]", "gpt-4o-mini": "[[1], [2], [3], [10], [0], [-1], [100]]"}}
{"task_id": "Mbpp/445", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n\"\"\"", "entry_point": "index_multiplication", "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))", "input_output_examples": "[[[[(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)]]], [[((6, 21), (12, 45), (2, 9), (7, 30))]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:", "llm_generated_inputs": {"deepseek-v3": "[[[(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)]], [[(1, 2, 3), (4, 5, 6)], [(7, 8, 9), (10, 11, 12)]], [[(1,)], [(2,)]], [[], []], [[(1, 2), (3, 4)], [(5, 6), (7, 8)]], [[(10, 20, 30)], [(1, 2, 3)]], [[(0, 0), (0, 0)], [(1, 1), (1, 1)]], [[(1, 2, 3, 4)], [(0, 0, 0, 0)]], [[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]], [[(1, 2, 3, 4, 5)], [(5, 4, 3, 2, 1)]]]", "qwen2.5-coder-32b-instruct": "[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((0, 0), (0, 0)), ((1, 1), (1, 1))], [((-1, -2), (-3, -4)), ((1, 2), (3, 4))], [((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))], [((1, 2), (3, 4), (5, 6)), ((1, 2), (3, 4), (5, 6))], [((1,), (2,)), ((3,), (4,))]]", "gpt-4o-mini": "[[(1, 2, 3), (4, 5, 6)], [(-1, -2, -3), (4, 5, 6)]]"}}
{"task_id": "Mbpp/446", "requirement": "def count_Occurrence(tup: tuple, lst: list) -> int:\n\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\n\"\"\"", "entry_point": "count_Occurrence", "canonical_solution": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    return sum(tup.count(ele) for ele in lst)", "input_output_examples": "[[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']]], [[3]]]", "starter_code": "def count_Occurrence(tup: tuple, lst: list) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']], [(1, 2, 3, 4, 2, 2, 1), [2, 1]], [(), ['a', 'b']], [('a', 'b', 'c'), []], [(1, 1, 1, 1), [1]], [('x', 'y', 'z'), ['a', 'b', 'c']], [(True, False, True, True), [True]], [(None, None, 'None'), [None]], [(1.1, 2.2, 1.1, 3.3), [1.1, 3.3]], [(('a', 'b'), ('a', 'b'), ['a', 'b']), [('a', 'b'), ['a', 'b']]]]", "qwen2.5-coder-32b-instruct": "[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']], [(1, 2, 3, 4, 5), [1, 6]], [(1, 1, 1, 1, 1), [1]], [(1, 2, 3, 4, 5), []], [(1, 2, 3, 4, 5), [6, 7, 8]], [(1, 2, 2, 3, 2), [2]], [(1, 2, 3, 4, 5), [1, 2, 3, 4, 5]], [(1, 2, 3, 4, 5), [1, 1, 1, 1, 1]], [(None, None, None), [None]], [(True, False, True), [True]]]", "gpt-4o-mini": "[[(1, 2, 3, 4), [1, 1, 2, 3]], [('a', 'b', 'c'), ['a', 'b', 'a', 'a', 'c', 'b']]]"}}
{"task_id": "Mbpp/447", "requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\n\"\"\"", "entry_point": "cube_nums", "canonical_solution": "def cube_nums(nums):\n    return [n**3 for n in nums]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]]]]", "starter_code": "from typing import List\ndef cube_nums(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[0, -1, -2, -3]], [[]], [[10]], [[-5, 5]], [[100, 200, 300]], [[-100, -200, -300]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[0]], [[1, -1, 2, -2]], [[100, 200, 300]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[0, -1, -2]], [([-3, -2, -1],)], [[10, 5, 0]], [([],)], [([2],)], [([1, 1, 1],)]]"}}
{"task_id": "Mbpp/448", "requirement": "def cal_sum(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\n\"\"\"", "entry_point": "cal_sum", "canonical_solution": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum", "input_output_examples": "[[[9]], [[49]]]", "starter_code": "def cal_sum(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [5], [9], [10], [-1], [20]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [15], [20], [-1]]"}}
{"task_id": "Mbpp/450", "requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\n\"\"\"", "entry_point": "extract_string", "canonical_solution": "def extract_string(str1, l):\n    return [e for e in str1 if len(e) == l]", "input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]], [[['practice', 'solution']]]]", "starter_code": "from typing import List\ndef extract_string(str1: List[str], l: int) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['hello', 'world', 'foo', 'bar', 'baz'], 3], [['a', 'bb', 'ccc', 'dddd', 'eeeee'], 1], [['short', 'medium', 'longer', 'longest'], 10], [[], 5], [['one', 'two', 'three', 'four'], 0], [['single'], 6], [['multiple', 'words', 'with', 'different', 'lengths'], 7]]", "qwen2.5-coder-32b-instruct": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['short', 'longer', 'longest', 'tiny'], 5], [['equal', 'equal', 'equal'], 5], [[], 3], [['a', 'ab', 'abc'], 1], [['one', 'two', 'three'], 4], [['boundary', 'condition', 'test'], 7], [['same', 'size', 'test'], 4]]", "gpt-4o-mini": "[[['apple', 'banana', 'cherry'], 5], [['cat', 'dog', 'elephant'], 3], [['short', 'tiny', 'huge'], 4], [['longerthanfive', 'five', 'short'], 5], [[], 3], [['a', 'b', 'c'], 1], [['123', '456', '789'], 3], [['equal', 'equal', 'equal'], 6], [['apple', 'banana', 'kiwi', 'orange'], 6], [['', 'notempty', ''], 0]]"}}
{"task_id": "Mbpp/451", "requirement": "def remove_whitespaces(text1: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from the given string.\n\n\n\"\"\"", "entry_point": "remove_whitespaces", "canonical_solution": "import re\ndef remove_whitespaces(text1):\n  return text1.replace(' ', '')", "input_output_examples": "[[[' Google    Flutter ']], [['GoogleFlutter']]]", "starter_code": "def remove_whitespaces(text1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[[' Google    Flutter '], ['Hello World'], ['  Python  Programming  '], ['NoSpacesHere'], ['   '], [''], [' \\t\\n\\r\\x0c\\x0b '], ['Mixed\\tWhitespaces\\nAre\\rHere']]", "qwen2.5-coder-32b-instruct": "[[' Google    Flutter '], ['Hello World'], ['   Leading and trailing spaces   '], ['NoSpacesHere'], ['  Multiple   spaces   between words  '], ['SingleWord'], [''], [' '], ['\\tWhitespace\\tcharacters\\n']]", "gpt-4o-mini": "[[''], ['   '], ['Hello World'], ['  Multiple   spaces  '], ['NoWhitespaceHere'], ['Line1\\nLine2\\tLine3'], ['   Leading and trailing spaces    '], ['   123  456   ']]"}}
{"task_id": "Mbpp/453", "requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"", "entry_point": "sumofFactors", "canonical_solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])", "input_output_examples": "[[[18]], [[26]]]", "starter_code": "def sumofFactors(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[18], [1], [2], [7], [20], [0], [-12]]", "qwen2.5-coder-32b-instruct": "[[18], [1], [2], [3], [12], [100], [0], [-5], [49], [36]]", "gpt-4o-mini": "[[0], [1], [2], [10], [15], [20], [100], [37], [64], [50]]"}}
{"task_id": "Mbpp/454", "requirement": "def text_match_wordz(text: str) -> bool:\n\"\"\"\nWrite a function that matches a word containing 'z'.\n\"\"\"", "entry_point": "text_match_wordz", "canonical_solution": "import re\ndef text_match_wordz(text):\n        return 'z' in text", "input_output_examples": "[[['pythonz.']], [[True]]]", "starter_code": "def text_match_wordz(text: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['pythonz.'], ['zebra'], ['amazing'], ['fizz'], ['hello world'], ['Zoo'], ['buzz'], ['no match here'], ['z'], ['zephyr']]", "qwen2.5-coder-32b-instruct": "[['pythonz.'], ['fizz'], ['buzz'], ['zebra'], ['amazing'], ['puzzle'], ['jazz'], ['fuzzy'], ['pizzazz'], ['quiz'], ['moo'], ['noz'], ['z'], ['Z'], [''], ['abcde'], ['Python'], ['12345z67890'], ['!@#$%^&*()_+z']]", "gpt-4o-mini": "[['buzz'], ['fizz'], ['hello'], ['zippy'], ['lazy dog'], [''], ['123z456'], ['noz'], ['a quick brown fox'], ['lazy']]"}}
{"task_id": "Mbpp/455", "requirement": "def check_monthnumb_number(monthnum2: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\n\"\"\"", "entry_point": "check_monthnumb_number", "canonical_solution": "def check_monthnumb_number(monthnum2):\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "input_output_examples": "[[[5]], [[True]]]", "starter_code": "def check_monthnumb_number(monthnum2: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [13], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [13], [-1], [31]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [13], [-1]]"}}
{"task_id": "Mbpp/456", "requirement": "from typing import List\n\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n\"\"\"\nWrite a function to reverse each string in a given list of string values.\n\"\"\"", "entry_point": "reverse_string_list", "canonical_solution": "def reverse_string_list(stringlist):\n    return [x[::-1] for x in stringlist]", "input_output_examples": "[[[['Red', 'Green', 'Blue', 'White', 'Black']]], [[['deR', 'neerG', 'eulB', 'etihW', 'kcalB']]]]", "starter_code": "from typing import List\ndef reverse_string_list(stringlist: List[str]) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[[['Red', 'Green', 'Blue', 'White', 'Black']], [['Hello', 'World']], [['a', 'b', 'c']], [['123', '456', '789']], [['']], [['racecar', 'madam', 'level']], [['Python', 'Java', 'C++']], [[]]]", "qwen2.5-coder-32b-instruct": "[[['Red', 'Green', 'Blue', 'White', 'Black']], [['abc', 'def', 'ghi']], [['123', '456', '789']], [['', '', '']], [['a', 'b', 'c']], [['singleword']], [['A man', 'a plan', 'a canal', 'Panama']], [['racecar', 'level', 'deified']], [['Spaces    ', '   Leading', 'Trailing    ']]]", "gpt-4o-mini": "[[['hello', 'world']], [['foo', 'bar', 'baz']], [['apple', 'banana', 'cherry']], [['single']], [['', 'empty', 'string']], [['123', '456', '789']], [['a', 'b', 'c']], [['!@#', '$%^', '&*()']]]"}}
{"task_id": "Mbpp/457", "requirement": "from typing import List\n\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to find the sublist having minimum length.\n\"\"\"", "entry_point": "Find_Min", "canonical_solution": "def Find_Min(lst): \n    return min(lst, key=len)", "input_output_examples": "[[[[[1], [1, 2], [1, 2, 3]]]], [[[1]]]]", "starter_code": "from typing import List\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1], [1, 2], [1, 2, 3]]], [[[], [1], [1, 2]]], [[[1, 2, 3], [1, 2], [1]]], [[[1]]], [[[]]], [[[1, 2], [3, 4], [5, 6]]], [[[1, 2, 3], [], [4, 5]]]]", "qwen2.5-coder-32b-instruct": "[[[[1], [1, 2], [1, 2, 3]]], [[[1, 2, 3], [4, 5], [6]]], [[[], [1], [1, 2]]], [[[1, 2], [3, 4], [5, 6]]], [[[1]]], [[]], [[[1, 2, 3, 4, 5], [6, 7, 8], [9]]]]", "gpt-4o-mini": "[[[[], []]], [[[1, 2, 3], [4, 5], [6]]], [[[10], [20, 30], [40, 50, 60]]], [[[True, False], [None], [1, 2, 3]]], [[[1, 2], [], [3]]], [[[1], [2], [3], [-1, -2, -3]]], [[[], [0, 0], [], []]], [[[1, 2, 3, 4, 5], [6, 7, 8], [9]]]]"}}
{"task_id": "Mbpp/458", "requirement": "def rectangle_area(l: float, b: float) -> float:\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"", "entry_point": "rectangle_area", "canonical_solution": "def rectangle_area(l,b):\n  return l * b", "input_output_examples": "[[[10, 20]], [[200]]]", "starter_code": "def rectangle_area(l: float, b: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[10, 20], [0, 20], [10, 0], [0, 0], [15.5, 25.5], [-10, 20], [10, -20], [-10, -20], [1000000, 1000000], [0.0001, 0.0001]]", "qwen2.5-coder-32b-instruct": "[[10, 20], [0, 5], [5, 0], [0, 0], [3.5, 4.2], [-1, 5], [5, -1], [-3, -7], [1000000, 1000000]]", "gpt-4o-mini": "[[5.0, 3.0], [7.5, 2.0], [0.0, 10.0], [10.0, 0.0], [0.0, 0.0], [4.5, 4.5], [-5.0, 3.0], [5.0, -3.0], [-5.0, -3.0]]"}}
{"task_id": "Mbpp/459", "requirement": "def remove_uppercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove uppercase substrings from a given string.\n\n\n\"\"\"", "entry_point": "remove_uppercase", "canonical_solution": "def remove_uppercase(str1):\n  return ''.join(c for c in str1 if c.islower())", "input_output_examples": "[[['cAstyoUrFavoRitETVshoWs']], [['cstyoravoitshos']]]", "starter_code": "def remove_uppercase(str1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['cAstyoUrFavoRitETVshoWs'], ['HELLOworld'], ['helloWORLD'], ['hello'], ['HELLO'], ['123abcDEF'], [''], ['!@#$%^&*()abcABC']]", "qwen2.5-coder-32b-instruct": "[['cAstyoUrFavoRitETVshoWs'], ['HELLOworld'], ['python'], ['PYTHON'], ['123abcDEF456'], ['noUPPERCASEhere'], [''], ['ALLUPPERCASE'], ['alllowercase'], ['MiXeDCase123']]", "gpt-4o-mini": "[['Hello World'], ['This is a Test'], ['no uppercase'], ['UPPERCASE TEXT'], ['mixed Case Here'], ['1234 !@#$%^&*()'], [''], ['NoUPPERCASEHERE'], ['Test123WithoutUPPERCASE']]"}}
{"task_id": "Mbpp/460", "requirement": "from typing import List\n\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to get the first element of each sublist.\n\"\"\"", "entry_point": "Extract", "canonical_solution": "def Extract(lst): \n    return [item[0] for item in lst]", "input_output_examples": "[[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]]], [[[1, 3, 6]]]]", "starter_code": "from typing import List\ndef Extract(lst: List[List[Any]]) -> List[Any]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[], [1, 2, 3], [4]]], [[[7], [8], [9]]], [[[1, 2, 3, 4, 5]]], [[[], [], []]], [[[10, 20], [30], [40, 50, 60]]], [[[0], [0], [0]]], [[[-1, -2], [-3, -4, -5], [-6]]], [[['a', 'b'], ['c', 'd', 'e'], ['f']]], [[[1.1, 2.2], [3.3, 4.4, 5.5], [6.6]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[10], [20], [30]]], [[[], [], []]], [[[1, 2, 3], [4, 5], [6]]], [[]], [[[True, False], [None, 1], ['a', 'b']]]]", "gpt-4o-mini": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[['apple', 'banana'], ['cherry', 'date'], ['fig', 'grape']]], [[[True, False], [False, True], [True, True]]], [[[1], [2], [3]]], [[[None, 'test'], [], ['only_one_element']]], [[[1, 2], [3], ['hello', 'world']]], [[[]]], [[[0]]]]"}}
{"task_id": "Mbpp/462", "requirement": "from typing import List\n\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\n\"\"\"", "entry_point": "combinations_list", "canonical_solution": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "input_output_examples": "[[[['orange', 'red', 'green', 'blue']]], [[[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]", "starter_code": "from typing import List\ndef combinations_list(lst: List[int]) -> List[List[int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2]], [[-1, 0, 1]], [[]], [[10]], [[1, 2, 3, 4]], [['a', 'b', 'c']]]", "qwen2.5-coder-32b-instruct": "[[[1, 2]], [[1, 2, 3]], [[]], [[1]], [[1, 1, 2]], [[1, 2, 2]], [[0, 0, 0]]]", "gpt-4o-mini": "[[[1, 2]], [[1, 2, 3]], [[1]], [[]], [[1, 2, 2]], [[1, 2, 3, 4]], [[0]], [[5, 6, 7, 8, 9]]]"}}
{"task_id": "Mbpp/463", "requirement": "from typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\n\"\"\"", "entry_point": "max_subarray_product", "canonical_solution": "def max_subarray_product(arr):\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far", "input_output_examples": "[[[[1, -2, -3, 0, 7, -8, -2]]], [[112]]]", "starter_code": "from typing import List\ndef max_subarray_product(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0, 0]], [[1, -2, -3, 0, 7, -8, -2]], [[-2, 3, -4]], [[2, 3, -2, 4]], [[-1, 0, -2, 2, -3]], [[1]], [[-1]], [[0]], [[1, -1, 1, -1, 1]], [[2, -1, 3, -2, 4, -3, 5]]]", "qwen2.5-coder-32b-instruct": "[[[1, -2, -3, 0, 7, -8, -2]], [[0, 2]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4]], [[1]], [[-1]], [[0]], [[0, 0, 0, 0]], [[2, 3, -2, 4]], [[-2, 0, -1]]]", "gpt-4o-mini": "[[[2, 3, -2, 4]], [[-2, 0, -1]], [[0, 1, -2, 3, -4, 0]], [[1, 2, 3, 4]], [[-1, -3, -10, 0, 60]], [[-2, -3, 0, -2, -40]], [[1]], [[-1]], [[0]], [[2, -5, -2, -4, 3]], [[-1, -2, -3, -4]]]"}}
{"task_id": "Mbpp/465", "requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\n\"\"\"", "entry_point": "drop_empty", "canonical_solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "input_output_examples": "[[[{'c1': 'Red', 'c2': 'Green', 'c3': None}]], [[{'c1': 'Red', 'c2': 'Green'}]]]", "starter_code": "def drop_empty(dict1: dict) -> dict:", "llm_generated_inputs": {"deepseek-v3": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{'a': 1, 'b': [], 'c': '', 'd': {}, 'e': 0}], [{'x': 'Hello', 'y': None, 'z': 'World'}], [{'key1': False, 'key2': True, 'key3': None}], [{'name': 'Alice', 'age': 25, 'city': ''}], [{}], [{'a': None, 'b': None, 'c': None}], [{'x': 0, 'y': 0.0, 'z': '0'}]]", "qwen2.5-coder-32b-instruct": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{'a': '', 'b': ' ', 'c': None, 'd': False}], [{'key1': 'value1', 'key2': [], 'key3': {}, 'key4': ()}], [{'key1': 'value1', 'key2': 'value2'}], [{}], [{'empty': None, 'zero': 0, 'blank': ''}]]", "gpt-4o-mini": "[[{}], [{'key1': 'value1', 'key2': ''}], [{'key1': '', 'key2': 'value2', 'key3': None}], [{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}], [{'key1': [], 'key2': {}, 'key3': 'value3'}], [{'key1': 0, 'key2': 'value2', 'key3': False}], [{'key1': None, 'key2': None, 'key3': None}], [{'key1': 'some value', 'key2': '', 'key3': 'another value'}], [{'a': '1', 'b': [], 'c': {}, 'd': '2'}]]"}}
{"task_id": "Mbpp/468", "requirement": "from typing import List\n\n\ndef max_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\"\"\"", "entry_point": "max_product", "canonical_solution": "def max_product(arr):   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]", "input_output_examples": "[[[[3, 100, 4, 5, 150, 6]]], [[3000]]]", "starter_code": "from typing import List\ndef max_product(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 100, 4, 5, 150, 6]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10]], [[]], [[1, 5, 10, 2, 3, 4]], [[1, 2, 3, 0, 4, 5]], [[-1, -2, -3, -4]], [[-1, 2, -3, 4, -5, 6]], [[2, 3, -2, 4]]]", "qwen2.5-coder-32b-instruct": "[[[3, 100, 4, 5, 150, 6]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10, 22, 9, 33, 21, 50, 41, 60]], [[0, 0, 0, 0]], [[1]], [[]], [[10]], [[1, 10, 100, 1000]], [[1000, 100, 10, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[3, 2, 6, 5, 0, 4]], [[-1, -2, -3, -4]], [[5]], [[1, 0, 0, 1]], [[-1, 2, -3, 4]], [[2, 3, 5, 10]], [[3, 5, 6, 7, 8]], [[-10, -20, 5, 1, 10]], [[1, 2, 3, 0, 4, 5]], [[0, 0, 0, 0]], [[10, 1, 2, 3, 4]]]"}}
{"task_id": "Mbpp/470", "requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\"\"\"", "entry_point": "add_pairwise", "canonical_solution": "def add_pairwise(test_tup):\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(6, 12, 15, 18)]]]", "starter_code": "from typing import Tuple\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0)], [(1,)], [(-1, 1, -1, 1)], [(100, 200, 300)], [(3, -3, 3, -3)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(0,)], [(1000000, 2000000, 3000000, 4000000)], [(-100, -200, -300, -400)]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0)], [(-1, -2, -3, -4)], [(10, 20)], [(5,)], [(1,)], [()]]", "gpt-4o-mini": "[[(1, 2, 3, 4)], [(5, -1, 0, 3)], [(-2, -3, -4, -5)], [(10, 20)], [(1,)], [()], [(0, 0, 0, 0)]]"}}
{"task_id": "Mbpp/471", "requirement": "from typing import List\n\n\ndef find_remainder(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\n\"\"\"", "entry_point": "find_remainder", "canonical_solution": "def find_remainder(arr, n): \n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n", "input_output_examples": "[[[[100, 10, 5, 25, 35, 14], 11]], [[9]]]", "starter_code": "from typing import List\ndef find_remainder(arr: List[int], n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[100, 10, 5, 25, 35, 14], 11], [[1, 2, 3, 4, 5], 7], [[10, 20, 30], 5], [[1], 1], [[0, 1, 2, 3], 4], [[2, 3, 5, 7], 1], [[1000000000, 1000000000], 1000000007], [[], 10]]", "qwen2.5-coder-32b-instruct": "[[[100, 10, 5, 25, 35, 14], 11], [[1, 2, 3, 4, 5], 3], [[7, 14, 21, 28], 5], [[0, 1, 2, 3], 1], [[1, 1, 1, 1], 2], [[10, 20, 30], 0], [[13, 26, 39], 13], [[5, 5, 5, 5], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11], [[123456789], 987654321]]", "gpt-4o-mini": "[[[1, 2, 3, 4], 5], [[10, 20, 30], 7], [[0, 5, 10, 15], 3], [[-1, -2, -3, -4], 10], [[1, 2, 3, 4], 1], [[1, 2, 3, 4], 0], [[], 5], [[1000000, 999999, 500000], 123456], [[1], 4], [[7, 14, 21], 7]]"}}
{"task_id": "Mbpp/472", "requirement": "from typing import List\n\n\ndef check_Consecutive(l: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\n\"\"\"", "entry_point": "check_Consecutive", "canonical_solution": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1))", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[True]]]", "starter_code": "from typing import List\ndef check_Consecutive(l: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 3, 5, 7, 9]], [[10, 11, 12, 13, 14]], [[]], [[1]], [[1, 2, 2, 3, 4]], [[10, 9, 8, 7, 6]], [[1, 2, 4, 5, 6]], [[100, 101, 102, 103, 104]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5]], [[5, 3, 2, 4, 1]], [[10, 11, 12, 13, 14]], [[1, 2, 4, 5]], [[1]], [[]], [[7, 6, 5, 8, 9]], [[100, 101, 102, 103, 99]], [[2, 2, 3, 4, 5]], [[-1, 0, 1, 2, 3]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10, 9, 8, 7, 6]], [[3, 2, 1, 4, 5]], [[7, 8, 9, 10, 11, 12]], [[1, 3, 2, 5, 4]], [[1]], [[]], [[1, 2, 4, 5]], [[0, 1, 2, 3, 4, 5]]]"}}
{"task_id": "Mbpp/473", "requirement": "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\"\"\"", "entry_point": "tuple_intersection", "canonical_solution": "def tuple_intersection(test_list1, test_list2):\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])", "input_output_examples": "[[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]]], [[{(4, 5), (5, 6), (3, 4)}]]]", "starter_code": "from typing import List\nfrom typing import Set\nfrom typing import Tuple\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:", "llm_generated_inputs": {"deepseek-v3": "[[[(1, 2), (3, 4), (5, 6)], [(3, 4), (5, 6), (7, 8)]], [[(1, 2), (2, 3)], [(3, 2), (1, 2)]], [[], [(1, 2), (3, 4)]], [[(1, 2), (3, 4)], []], [[(1, 2), (2, 1)], [(2, 1), (1, 2)]], [[(1, 1)], [(1, 1)]], [[(1, 2), (3, 4), (5, 6)], [(6, 5), (4, 3), (2, 1)]], [[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10)]]]", "qwen2.5-coder-32b-instruct": "[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]], [[], []], [[(1, 2)], [(2, 1)]], [[(1, 2), (3, 4)], [(5, 6), (7, 8)]], [[(1, 2), (3, 4)], [(4, 3), (2, 1), (1, 2)]], [[(1, 2), (3, 4)], [(1, 2), (3, 4)]], [[(1, 2), (3, 4)], [(2, 1), (4, 3)]], [[(1, 2), (3, 4), (5, 6)], [(6, 5), (4, 3), (2, 1), (1, 2)]]]", "gpt-4o-mini": "[[[('a', 1), ('b', 2), ('c', 3)], [('b', 2), ('d', 4), ('a', 1)]], [[('x', 5), ('y', 6)], [('a', 1), ('b', 2)]], [[(), (1,)], [(1,), (2,)]], [[('apple',), ('banana',)], [('banana',), ('apple',)]], [[], []], [[('test', 1), ('example', 2)], [('test', 1), ('example', 2), ('sample', 3)]], [[('same',)], [('same',)]], [[('tuple', 'intersection')], [('intersection', 'tuple')]]]"}}
{"task_id": "Mbpp/474", "requirement": "def replace_char(str1: str, ch: str, newch: str) -> str:\n\"\"\"\nWrite a function to replace characters in a string.\n\"\"\"", "entry_point": "replace_char", "canonical_solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)", "input_output_examples": "[[['polygon', 'y', 'l']], [['pollgon']]]", "starter_code": "def replace_char(str1: str, ch: str, newch: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['polygon', 'y', 'l'], ['hello', 'l', 'x'], ['banana', 'a', 'o'], ['example', 'e', 'a'], ['', 'a', 'b'], ['aaaaa', 'a', 'b'], ['case', 'z', 'x'], ['case', 'c', ''], ['case', 'e', 'E'], ['12345', '3', '9'], ['special!@#', '!', '*'], ['multiple words', ' ', '_']]", "qwen2.5-coder-32b-instruct": "[['polygon', 'y', 'l'], ['hello', 'l', 'z'], ['test', 't', 'x'], ['', 'a', 'b'], ['abc', '', 'd'], ['abc', 'd', ''], ['racecar', 'r', 's'], ['banana', 'a', 'o'], ['12345', '3', '9'], ['!@#$%', '#', '&']]", "gpt-4o-mini": "[['hello', 'e', 'o'], ['world', 'o', 'a'], ['abcdef', 'c', 'x'], ['test', 't', 'T'], ['replace', 'r', 'R'], ['', 'a', 'b'], ['abcdef', 'z', 'y'], ['character', 'a', ''], ['python', 'o', 'oo'], ['aaaaaa', 'a', 'b']]"}}
{"task_id": "Mbpp/475", "requirement": "def sort_counter(dict1: dict) -> list:\n\"\"\"\nWrite a function to sort a dictionary by value.\n\"\"\"", "entry_point": "sort_counter", "canonical_solution": "def sort_counter(dict1):\n return sorted(dict1.items(), key=lambda x: x[1], reverse=True)", "input_output_examples": "[[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}]], [[[('Chemistry', 87), ('Physics', 83), ('Math', 81)]]]]", "starter_code": "def sort_counter(dict1: dict) -> list:", "llm_generated_inputs": {"deepseek-v3": "[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}], [{'A': 10, 'B': 5, 'C': 20}], [{'X': 100, 'Y': 100, 'Z': 100}], [{'One': 1}], [{}], [{'Alpha': 90, 'Beta': 90, 'Gamma': 90, 'Delta': 80}], [{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}], [{'x': 99, 'y': 101, 'z': 98}]]", "qwen2.5-coder-32b-instruct": "[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}], [{'a': 1, 'b': 2, 'c': 3}], [{'apple': 5, 'orange': 2, 'banana': 4}], [{'x': 10, 'y': 10, 'z': 10}], [{}], [{'single': 1}]]", "gpt-4o-mini": "[[{'a': 3, 'b': 1, 'c': 2}], [{'apple': 5, 'banana': 2, 'cherry': 8}], [{'one': 1}], [{'x': 0, 'y': -1, 'z': 2}], [{}], [{'A': 2, 'b': 2, 'C': 1}]]"}}
{"task_id": "Mbpp/476", "requirement": "from typing import List\n\n\ndef big_sum(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"", "entry_point": "big_sum", "canonical_solution": "def big_sum(nums):\n      return max(nums) + min(nums)", "input_output_examples": "[[[[1, 2, 3]]], [[4]]]", "starter_code": "from typing import List\ndef big_sum(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[-1, 0, 1]], [[10]], [[5, 5, 5, 5]], [[-10, -20, -30]], [[100, 200, 300, 400, 500]], [[0, 0, 0, 0, 0]], [[-5, 0, 5]], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]], [[-100, 100, 0, 50, -50]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[5, 5, 5]], [[10]], [[]], [[-1, -2, -3]], [[0, 2, 5, -11, 3]], [[100, 200, 300, 400, 500]], [[1, 1000000]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[10, 20, 30, -5, 0]], [[-10, -5, -1, -20]], [[5]], [[]], [[100, 200, 300, 400]]]"}}
{"task_id": "Mbpp/477", "requirement": "def is_lower(string: str) -> str:\n\"\"\"\nWrite a python function to convert the given string to lower case.\n\"\"\"", "entry_point": "is_lower", "canonical_solution": "def is_lower(string):\n    return string.lower()", "input_output_examples": "[[['InValid']], [['invalid']]]", "starter_code": "def is_lower(string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['InValid'], ['VALID'], ['valid'], ['123abc'], ['!@#ABC'], [''], ['MixedCase123!@#']]", "qwen2.5-coder-32b-instruct": "[['InValid'], ['VALID'], ['invalid'], ['123abcDEF'], ['123456'], ['!@#$%^&*()'], [''], ['aBcDeFgHiJkLmNoPqRsTuVwXyZ']]", "gpt-4o-mini": "[['HELLO'], ['Hello'], ['hello'], [('123', '456')], [('!@#$%', '!@#$%')], [('UpperCaseWithSpaces and 123', 'UPPERCASEWITHSPACES AND 123')], [('mixedCASE123!@#', 'miXeDcAsE123!@#')]]"}}
{"task_id": "Mbpp/478", "requirement": "def remove_lowercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\n\n\"\"\"", "entry_point": "remove_lowercase", "canonical_solution": "import re\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)", "input_output_examples": "[[['PYTHon']], [['PYTH']]]", "starter_code": "def remove_lowercase(str1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['PYTHon'], ['HELLO'], ['hello'], ['123ABCdef'], [''], ['!@#$%^&*()'], ['AaAaAa'], ['Python3.8']]", "qwen2.5-coder-32b-instruct": "[['PYTHon'], ['helloWorld'], ['123abcDEF'], ['NoLowerCase'], ['ALLUPPER'], ['alllower'], ['123456'], [''], ['MixedCASE123'], ['lowerCASElower']]", "gpt-4o-mini": "[['Hello World'], ['Python123'], ['1234ABC'], ['mixedCase123'], ['lowercase'], ['UPPERCASE'], [''], ['123456'], ['A1B2C3'], ['TestWithLowerAndUpper']]"}}
{"task_id": "Mbpp/479", "requirement": "def first_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the first digit of a given number.\n\"\"\"", "entry_point": "first_Digit", "canonical_solution": "def first_Digit(n) :  \n    return int(str(n)[0])", "input_output_examples": "[[[123]], [[1]]]", "starter_code": "def first_Digit(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[123], [-456], [0], [987654321], [-987654321], [5], [-7]]", "qwen2.5-coder-32b-instruct": "[[123], [0], [-4567], [987654321], [5], [-9]]", "gpt-4o-mini": "[[0], [5], [12345], [-9876], [100000], [0.00123], [400], [-5], [9], [123456789]]"}}
{"task_id": "Mbpp/554", "requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\n\"\"\"", "entry_point": "Split", "canonical_solution": "def Split(l): \n    return list(filter(lambda x: x % 2 == 1, l))", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6]]], [[[1, 3, 5]]]]", "starter_code": "from typing import List\ndef Split(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6]], [[]], [[2, 4, 6, 8]], [[1, 3, 5, 7]], [[0, 1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[1]], [[2]], [[1, 1, 1, 1]], [[2, 2, 2, 2]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8]], [[1, 3, 5, 7, 9]], [[]], [[0]], [[11, 22, 33, 44, 55]], [[-1, -2, -3, -4, -5]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[2, 4, 6, 8, 10]], [[7, 9, 11, 13]], [[0, -1, -2, -3]], [[1, 3, 5, 7, 9, 11]], [[-1, -3, -5]], [[0]], [[2, 3, 4, 5, 6]], [[]]]"}}
{"task_id": "Mbpp/555", "requirement": "def difference(n: int) -> int:\n\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\"\"\"", "entry_point": "difference", "canonical_solution": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;", "input_output_examples": "[[[3]], [[30]]]", "starter_code": "def difference(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [10], [0], [-1], [-5]]", "gpt-4o-mini": "[[1], [2], [3], [10], [100], [0], [-5]]"}}
{"task_id": "Mbpp/556", "requirement": "from typing import List\n\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\n\"\"\"", "entry_point": "find_Odd_Pair", "canonical_solution": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair", "input_output_examples": "[[[[5, 4, 7, 2, 1], 5]], [[6]]]", "starter_code": "from typing import List\ndef find_Odd_Pair(A: List[int], N: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 4, 7, 2, 1], 5], [[1, 2, 3, 4, 5], 5], [[0, 0, 0, 0, 0], 5], [[1, 3, 5, 7, 9], 5], [[2, 4, 6, 8, 10], 5], [[1, 2], 2], [[3], 1], [[1, 1, 1, 1, 1], 5], [[2, 2, 2, 2, 2], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]", "qwen2.5-coder-32b-instruct": "[[[5, 4, 7, 2, 1], 5], [[1, 2, 3, 4, 5], 5], [[0, 0, 0, 0], 4], [[1, 1, 1, 1], 4], [[1, 2, 4, 8, 16], 5], [[1], 1], [[1, 3], 2], [[2, 4, 6, 8], 4], [[1, 3, 5, 7, 9], 5], [[10, 20, 30, 40, 50], 5]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 5], [[2, 4, 6, 8], 4], [[1, 3, 5, 7], 4], [[], 0], [[0, 1], 2], [[1, 1, 2, 2], 4], [[1, 0, 3, 2], 4], [[100, 3, 2, 5], 4], [[15, 15, 15, 15], 4]]"}}
{"task_id": "Mbpp/557", "requirement": "def toggle_string(string: str) -> str:\n\"\"\"\nWrite a function to toggle the case of all characters in a string.\n\"\"\"", "entry_point": "toggle_string", "canonical_solution": "def toggle_string(string):\n return string.swapcase()", "input_output_examples": "[[['Python']], [['pYTHON']]]", "starter_code": "def toggle_string(string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Python'], ['hello WORLD'], ['12345'], ['!@#$%'], ['AaBbCc'], [''], ['   '], ['PyThOn 3.10'], ['UPPERCASE'], ['lowercase']]", "qwen2.5-coder-32b-instruct": "[['Python'], ['pYTHON'], ['HelloWorld'], ['hELLOwORLD'], ['123abcXYZ'], ['123ABCxyz'], [''], [' '], ['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['AbCdEfGhIjKlMnOpQrStUvWxYz']]", "gpt-4o-mini": "[['Hello World'], ['python programming'], ['PYTHON PROGRAMMING'], [''], ['123456'], ['!@#$%^&*()'], ['Mixed CASE String'], ['singlecase']]"}}
{"task_id": "Mbpp/558", "requirement": "def digit_distance_nums(n1: int, n2: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\n\"\"\"", "entry_point": "digit_distance_nums", "canonical_solution": "def digit_distance_nums(n1, n2):\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])", "input_output_examples": "[[[1, 2]], [[1]]]", "starter_code": "def digit_distance_nums(n1: int, n2: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[123, 456], [1, 2], [987, 321], [0, 0], [100, 1], [999, 111], [123456789, 987654321], [987654321, 123456789], [123123123, 321321321], [111111, 222222]]", "qwen2.5-coder-32b-instruct": "[[1, 2], [123, 456], [0, 0], [100, 200], [987, 789], [12345, 54321], [1000, 1], [9999, 1111], [123, 123], [10, 100]]", "gpt-4o-mini": "[[1234, 5678], [0, 0], [9999, 1111], [-123, -321], [1000, 2000], [2147483647, 2147483647], [123456789, 987654321], [5, 25], [-50, 50], [0, 1]]"}}
{"task_id": "Mbpp/559", "requirement": "from typing import List\n\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n\"\"\"", "entry_point": "max_sub_array_sum", "canonical_solution": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far", "input_output_examples": "[[[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], [[7]]]", "starter_code": "from typing import List\ndef max_sub_array_sum(a: List[int], size: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[1, 2, 3, 4, 5], 5], [[-1, -2, -3, -4, -5], 5], [[], 0], [[10], 1], [[-1, 2, 3, -4, 5, 10], 6], [[0, 0, 0, 0, 0], 5], [[5, -2, 3, -1, 2], 5], [[-5, -1, -3, -2, -4], 5], [[1, -2, 3, -4, 5, -6, 7], 7]]", "qwen2.5-coder-32b-instruct": "[[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[1, 2, 3, 4, 5], 5], [[-1, -2, -3, -4], 4], [[1], 1], [[0, 0, 0, 0], 4], [[1, -1, 1, -1, 1], 5], [[-2, 1, -3, 4, -1, 2, 1, -5, 4], 9], [[5, -1, 5], 3]]", "gpt-4o-mini": "[[[1, -2, 3, 4, -1, 2, 1, -5, 4], 9], [[-2, -3, -1], 3], [[0, 0, 0, 0, 0], 5], [[3, 4, -1, 2, -2, 1, 5, -3], 8], [[], 0], [[10, 20, -30, 40, 50, -10], 6], [[1], 1], [[-1, -2, -3, -4, -5], 5], [[5, 4, -1, 7, 8], 5], [[1, 2, 3, 4, 5, 6], 6]]"}}
{"task_id": "Mbpp/560", "requirement": "from typing import Tuple\n\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n\"\"\"", "entry_point": "union_elements", "canonical_solution": "def union_elements(test_tup1, test_tup2):\n  return tuple(sorted(set(test_tup1 + test_tup2)))", "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[(3, 4, 5, 6, 7, 10)]]]", "starter_code": "from typing import Tuple\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [(1, 2, 3), (4, 5, 6)], [(1, 2, 3), (1, 2, 3)], [(), (1, 2, 3)], [(1, 2, 3), ()], [(), ()], [(1, 1, 2, 2), (2, 3, 3, 4)], [(10, 20, 30), (30, 40, 50)], [(100,), (100,)], [(0, 0, 0), (0, 0, 0)]]", "qwen2.5-coder-32b-instruct": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [(1, 2, 3), (4, 5, 6)], [(1, 2, 2, 3), (2, 3, 4, 4)], [(10, 20, 30), (5, 15, 25)], [(-1, -2, -3), (-3, -4, -5)], [(1,), (1,)], [(1,), (2,)], [(1, 2, 3), ()], [(1, 2, 3), (1, 2, 3)], [(1, 2, 3), (3, 2, 1)]]", "gpt-4o-mini": "[[(1, 2, 3), (3, 4, 5)]]"}}
{"task_id": "Mbpp/562", "requirement": "from typing import List\n\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest sublists.\n\"\"\"", "entry_point": "Find_Max_Length", "canonical_solution": "def Find_Max_Length(lst):  \n    return len(max(lst, key = len))", "input_output_examples": "[[[[[1], [1, 4], [5, 6, 7, 8]]]], [[4]]]", "starter_code": "from typing import List\ndef Find_Max_Length(lst: List[List[Any]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[[1], [2, 3], [4, 5, 6]]], [[[], [1], [2, 3]]], [[[1, 2, 3], [4, 5], [6]]], [[[1], [2], [3]]], [[[1, 2, 3, 4, 5]]], [[]], [[[], [], []]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10]]], [[[1, 2, 3, 4], [5, 6], [7, 8, 9, 10, 11]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [13, 14]]]]", "qwen2.5-coder-32b-instruct": "[[[[1], [1, 4], [5, 6, 7, 8]]], [[]], [[[], [], []]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10]]], [[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]]", "gpt-4o-mini": "[[[[], [], []]], [[[1, 2], [3], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5], [6]]], [[[1], [2], [3, 4, 5, 6, 7]]], [[[1, 2, 3, 4], [5, 6], [], [7, 8, 9]]], [[[10, 11, 12, 13], [14, 15]]], [[[1], [2], [3], [4], [5]]], [[[10], [20, 30, 40], [50, 60, 70, 80]]], [[[1, 2], [3, 4, 5], [], [6, 7, 8, 9, 10, 11]]]]"}}
{"task_id": "Mbpp/563", "requirement": "from typing import List\n\n\ndef extract_values(text: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks from a string.\n\"\"\"", "entry_point": "extract_values", "canonical_solution": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))", "input_output_examples": "[[['Python', 'PHP', 'Java']], [['Python', 'PHP', 'Java']]]", "starter_code": "from typing import List\ndef extract_values(text: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['\"Python\", \"PHP\", \"Java\"'], ['\"Hello, World!\", \"123\", \"abc\"'], ['\"SingleWord\"'], ['\"\", \"Empty\", \"String\"'], ['\"NoQuotesHere\"'], ['\"Mixed\", \"Quotes\", \"And\", \"No Quotes\"'], ['\"Escaped \\\\\"Quote\\\\\"\"'], ['\"Multiple  Spaces\", \"Between\", \"Words\"']]", "qwen2.5-coder-32b-instruct": "[['\"Python\", \"PHP\", \"Java\"'], ['\"Hello\", \"World!\"'], ['\"SingleQuote\"'], ['\"\"'], ['NoQuotesHere'], ['\"Multiple\", \"quotes\", \"in\", \"one\", \"go\"'], ['\"Leading\", \"and\", \"trailing\", \"'], ['\"Embedded \"\" quotes\", \"normal\"'], ['\"Mixing \"\\' and \\\\\"\" styles\"']]", "gpt-4o-mini": "[['The quick \"brown\" fox jumps over the \"lazy\" dog.'], ['She said, \"Hello!\" and then left.'], ['This is a test with \"nested \"quotes\" inside\".'], ['\"Only one quote here.'], ['\"Quotes at the start\" and no end quote.'], ['No quotes here.'], ['\"Multiple\" \"sets\" of \"quotes\" in \"one\" string.'], ['\"Edge case with \"escaped \\\\\" quotes\" inside\".']]"}}
{"task_id": "Mbpp/564", "requirement": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\"\"\"", "entry_point": "count_Pairs", "canonical_solution": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt;", "input_output_examples": "[[[[1, 2, 1], 3]], [[2]]]", "starter_code": "from typing import List\ndef count_Pairs(arr: List[int], n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 1], 3], [[1, 2, 3, 4], 4], [[1, 1, 1, 1], 4], [[], 0], [[5, 5], 2], [[10, 20, 30, 40, 50], 5], [[1, 2, 3, 2, 1], 5], [[7, 7, 7, 7, 7, 7], 6], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 9], [[1, 3, 5, 7, 9, 2, 4, 6, 8, 10], 10]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 1], 3], [[1, 1, 1], 3], [[1, 2, 3, 4, 5], 5], [[10, 20, 10, 20, 10], 5], [[1], 1], [[1, 2], 2], [[5, 5, 5, 5, 5, 5], 6], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10], [[100, 200, 300, 400, 500], 5], [[1, 1, 2, 2, 3, 3], 6]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 5], [[1, 1, 1, 1], 4], [[1, 2, 2, 3], 4], [[0, -1, 1], 3], [[], 0], [[1], 1], [[1, 2, 3, 3, 4], 5], [[10, 20, 30, 10, 20, 30], 6], [[1, 2], 2]]"}}
{"task_id": "Mbpp/565", "requirement": "from typing import List\n\n\ndef split(word: str) -> List[str]:\n\"\"\"\nWrite a python function to split a string into characters.\n\"\"\"", "entry_point": "split", "canonical_solution": "def split(word): \n    return list(word)", "input_output_examples": "[[['python']], [[['p', 'y', 't', 'h', 'o', 'n']]]]", "starter_code": "from typing import List\ndef split(word: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['python'], ['hello'], ['a'], [''], ['12345'], ['!@#$%'], ['  '], ['Python Programming'], ['αβγδ']]", "qwen2.5-coder-32b-instruct": "[['python'], ['a'], [''], ['12345'], ['!@#$%'], ['PythonIsFun'], [' '], ['multiple words']]", "gpt-4o-mini": "[['hello'], ['abcdef'], [''], ['a'], ['12345'], ['!@#$%'], ['longer string with spaces']]"}}
{"task_id": "Mbpp/566", "requirement": "def sum_digits(n: int) -> int:\n\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\n\"\"\"", "entry_point": "sum_digits", "canonical_solution": "def sum_digits(n):\n  return sum(map(int, str(n)))", "input_output_examples": "[[[345]], [[12]]]", "starter_code": "def sum_digits(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[345], [0], [12345], [999], [10], [1000000], [123456789], [1]]", "qwen2.5-coder-32b-instruct": "[[0], [9], [10], [99], [123456789], [111111111], [987654321], [345]]", "gpt-4o-mini": "[[0], [5], [123], [999], [1001], [100000], [987654321], [10], [46]]"}}
{"task_id": "Mbpp/567", "requirement": "from typing import List\n\n\ndef issort_list(lst: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a specified list is sorted or not.\n\"\"\"", "entry_point": "issort_list", "canonical_solution": "def issort_list(list1):\n    return all(a <= b for a, b in zip(list1, list1[1:]))", "input_output_examples": "[[[[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]]], [[True]]]", "starter_code": "from typing import List\ndef issort_list(lst: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1]], [[]], [[1, 1, 1, 1]], [[1, 3, 2, 4, 5]], [[10, 20, 30, 40, 50, 60]], [[1, 2, 2, 3, 4, 5]], [[5, 5, 5, 5, 5, 5]], [[1, 2, 3, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]], [[1, 3, 2, 4, 5]], [[10, 9, 8, 7, 6, 5]], [[1, 1, 1, 1, 1]], [[]], [[42]], [[5, 5, 5, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 2, 2, 3, 4]], [[1]], [[]], [[3, 1, 2]], [[1, 2, 3, 4, 5, 5, 6]], [[-1, 0, 1, 2]], [[2, 2, 2, 2]]]"}}
{"task_id": "Mbpp/568", "requirement": "from typing import List\n\n\ndef empty_list(length: int) -> List[dict]:\n\"\"\"\nWrite a function to create a list of N empty dictionaries.\n\"\"\"", "entry_point": "empty_list", "canonical_solution": "def empty_list(length):\n return [{} for _ in range(length)]", "input_output_examples": "[[[5]], [[[{}, {}, {}, {}, {}]]]]", "starter_code": "from typing import List\ndef empty_list(length: int) -> List[dict]:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [5], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[5], [0], [1], [10], [-3]]", "gpt-4o-mini": "[[0], [1], [5], [10], [100]]"}}
{"task_id": "Mbpp/569", "requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"", "entry_point": "sort_sublists", "canonical_solution": "def sort_sublists(list1):\n    return list(map(sorted,list1))", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]", "starter_code": "from typing import List\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:", "llm_generated_inputs": {"deepseek-v3": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry'], ['date', 'elderberry', 'fig']]], [[['zebra', 'apple', 'mango'], ['grape', 'kiwi'], ['banana']]], [[['x', 'y', 'z'], ['a', 'c', 'b'], ['d']]], [[[''], ['a'], ['b', 'a']]], [[[], ['a', 'b'], ['c', 'd', 'e']]], [[['a', 'a', 'b'], ['c', 'c', 'c'], ['d', 'e', 'e']]]]", "qwen2.5-coder-32b-instruct": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry', 'date']]], [[['zebra', 'yak'], ['monkey', 'lion']]], [[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]], [[['single']]], [[[]]], [[[], []]], [[['same', 'same'], ['same']]], [[['one', 'two', 'three'], ['four', 'five']]]]", "gpt-4o-mini": "[[[['banana', 'apple', 'cherry'], ['dog', 'cat', 'bird'], ['zebra', 'ant', 'lion']]], [[['orange'], ['grape', 'pear'], []]], [[[], [], []]], [[['singleword'], ['anotherword']]], [[['apple', 'banana'], ['banana', 'apple'], ['apple']]], [[['a', 'b', 'c'], ['c', 'b', 'a'], ['b', 'a', 'c']]]]"}}
{"task_id": "Mbpp/572", "requirement": "from typing import List\n\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\n\"\"\"", "entry_point": "two_unique_nums", "canonical_solution": "def two_unique_nums(nums):\n  return [n for n in nums if nums.count(n)==1]", "input_output_examples": "[[[[1, 2, 3, 2, 3, 4, 5]]], [[[1, 4, 5]]]]", "starter_code": "from typing import List\ndef two_unique_nums(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 2, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[10, 20, 30, 40]], [[]], [[5, 5, 6, 6, 7, 7, 8, 8]], [[100]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 2, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[]], [[7, 8, 9, 9, 8, 7, 10]], [[10, 20, 30, 40, 50, 60]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[1, 1, 2, 3, 3, 4]], [[5, 5, 5, 5, 5]], [[10, 20, 30, 20, 10]], [[1, 2]], [[1]], [[]], [[0, 0, 0, 0, 1]]]"}}
{"task_id": "Mbpp/573", "requirement": "from typing import List\n\n\ndef unique_product(list_data: List[int]) -> int:\n\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\n\"\"\"", "entry_point": "unique_product", "canonical_solution": "def unique_product(list_data):\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))", "input_output_examples": "[[[[10, 20, 30, 40, 20, 50, 60, 40]]], [[720000000]]]", "starter_code": "from typing import List\ndef unique_product(list_data: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0, 0]], [[10, -10, 10, -10, 10]], [[1000000, 2000000, 3000000]], [[]], [[1]]]", "qwen2.5-coder-32b-instruct": "[[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 4, 5]], [[5, 5, 5, 5, 5]], [[]], [[0, 1, 2, 3]], [[1]], [[-1, -2, -3, -4]], [[10, 20, 0, 40, 50]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[1, 2, 2, 3, 4]], [[1, 1, 1, 1]], [[-1, -2, -3, -4]], [[0, 1, 2, 3]], [[1, 2, 3, 0, 0, 4]], [[5, 5, 6, 6, 7]], [[-1, 0, 1]], [[-1, -1, 0]], [[-10, -10, -5, 5, 10]]]"}}
{"task_id": "Mbpp/576", "requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\n\"\"\"", "entry_point": "is_Sub_Array", "canonical_solution": "def is_Sub_Array(A,B): \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)", "input_output_examples": "[[[[1, 4, 3, 5], [1, 2]]], [[False]]]", "starter_code": "from typing import List\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [1, 4]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], [3, 5]], [[1, 4, 3, 5], [1, 4, 3, 5]], [[1, 4, 3, 5], []], [[], [1, 2]], [[], []], [[1, 2, 3, 4, 5], [6, 7]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5], [2, 3, 4]], [[1, 2, 3, 4, 5], [5]]]", "qwen2.5-coder-32b-instruct": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], [1, 4, 3, 5]], [[1, 4, 3, 5], [5]], [[1, 4, 3, 5], []], [[], [1]], [[], []], [[1, 2, 3, 4, 5], [3, 4, 5]], [[10, 20, 30, 40, 50], [10, 20, 60]], [[1, 2, 3, 4, 5], [5, 4, 3]]]", "gpt-4o-mini": "[[[1, 2, 3], [2, 3]], [[1, 2, 3, 4], [2, 3]], [[1, 2, 3], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 2, 3], [4, 5]], [[1, 2, 3, 4, 5], [3, 4, 5]], [[], [1]], [[1], [1]], [[1, 1, 1], [1]], [[1, 2, 3, 4, 5], [1, 3, 5]]]"}}
{"task_id": "Mbpp/577", "requirement": "def last_Digit_Factorial(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\n\"\"\"", "entry_point": "last_Digit_Factorial", "canonical_solution": "def last_Digit_Factorial(n): \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0", "input_output_examples": "[[[4]], [[4]]]", "starter_code": "def last_Digit_Factorial(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [4], [5], [10], [15], [20], [25], [30]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [4], [5], [9], [10], [15], [20], [25], [30]]", "gpt-4o-mini": "[[0], [1], [2], [5], [10], [20], [25], [100], [-1], [3.5]]"}}
{"task_id": "Mbpp/578", "requirement": "from typing import List\n\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\n\"\"\"", "entry_point": "interleave_lists", "canonical_solution": "def interleave_lists(list1, list2, list3):\n    return [el for pair in zip(list1, list2, list3) for el in pair]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]], [[[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]]]]", "starter_code": "from typing import List\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], [[1, 'a', True], [2, 'b', False], [3, 'c', True]], [[], [], []], [[1], [2], [3]], [[1, 2], [3, 4], [5, 6]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [[None, None], [None, None], [None, None]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]], [[], [], []], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], [[True, False, True], [False, True, False], [True, True, True]], [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]]]", "gpt-4o-mini": "[[[1, 2, 3], ['a', 'b', 'c'], [True, False, True]], [[], [], []], [[], [1, 2, 3], ['x', 'y', 'z']], [['apple', 'banana'], [1, 2], [True, False]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [['x', 'y', 'z'], [1, 2, 3], ['a', 'b', 'c']], [['single'], ['value'], [42]], [['this', 'is'], ['a', 'test'], ['case', 'here']], [[1], ['two'], [3]]]"}}
{"task_id": "Mbpp/579", "requirement": "from typing import Tuple\n\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\n\"\"\"", "entry_point": "find_dissimilar", "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\n  return tuple(set(test_tup1) ^ set(test_tup2))", "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[(3, 6, 7, 10)]]]", "starter_code": "from typing import Tuple\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [(1, 2, 3), (4, 5, 6)], [(), ()], [(1, 2, 3), (1, 2, 3)], [(1, 2, 3, 4), (3, 4, 5, 6)], [(1, 'a', 3.5), (1, 'b', 3.5)], [(None, True, False), (None, False, True)], [(1, 2, 3, 4, 5), (5, 4, 3, 2, 1)], [((1, 2), (3, 4)), ((1, 2), (5, 6))], [([1, 2], [3, 4]), ([1, 2], [5, 6])]]", "qwen2.5-coder-32b-instruct": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [(1, 2, 3), (4, 5, 6)], [(1, 1, 1), (1, 1, 1)], [(1, 2, 3), (3, 2, 1)], [(1, 2, 3, None), (3, 2, 1, None)], [(1, 2, 3, 'a'), (3, 2, 1, 'b')], [(1, 2, 3, 4), ()], [(1,), (1, 2, 3)], [(1, 2, 3), (1, 2, 3, 4, 5)], [(None, None, None), (None, None, None)], [(True, False), (False, True)]]", "gpt-4o-mini": "[[(1, 2, 3), (3, 4, 5)], [('a', 'b', 'c'), ('c', 'd', 'e')], [((1, 2), (3, 4)), ((2, 3), (4, 5))], [((1, 'a'), (2, 'b', 3)), ((1, 'a', 3), (2, 'c'))], [(True, False), (False, True, True)], [((1, 2), (1, 2)), ((3, 4), (3, 4))], [((1, 2), (3, 2)), ((), (1, 2))]]"}}
{"task_id": "Mbpp/580", "requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\n\"\"\"", "entry_point": "extract_even", "canonical_solution": "def even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\treturn even_ele(test_tuple)", "input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)]], [[(4, (6, (2, 4)), 6, 8)]]]", "starter_code": "def extract_even(test_tuple: tuple) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(1, 2, (3, 4, (5, 6)), 7, 8)], [()], [(2, 4, 6, 8)], [(1, 3, 5, 7)], [((1, 2), (3, 4), (5, 6))], [(10, (11, 12, (13, 14)), 15)], [(0, (0, (0, 0)), 0)], [(-2, -4, (-6, -8))], [(2.5, 3.7, (4.0, 5.2))]]", "qwen2.5-coder-32b-instruct": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(1, 3, 5, 7)], [((2, 4, 6), (8, 10, 12))], [(11, (13, (15, 17)), 19)], [(2, (4, (6, (8, 10))), 12)], [((),)], [((2,),)], [(2, 4, 6, 8, 10)], [(1, (2, (3, (4, 5))), 6)]]", "gpt-4o-mini": "[[((1, 2, 3), (4, 5, 6), (7, 8, 9))], [((2, 4, 6), (1, 3, 5), (0, 8, 10))], [((-1, -2, -3), (4, 5, -6), (-7, 8))], [((1, 0, -1, 2), (3.5, 2.1, -2.2), (5, 6))], [((1.1, 2.2, 3.3), (4.4, 5.5, 6.6))], [((), ())], [(((1,), (2,)), ((3,), (4,)))], [(((1.0, 2.0), (3.0, 4.0)), (None,))]]"}}
{"task_id": "Mbpp/581", "requirement": "def surface_Area(b: float, s: float) -> float:\n\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\"\"\"", "entry_point": "surface_Area", "canonical_solution": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2)", "input_output_examples": "[[[3, 4]], [[33]]]", "starter_code": "def surface_Area(b: float, s: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[3, 4], [0, 0], [1, 1], [2.5, 3.5], [10, 0], [0, 10], [100, 200], [0.001, 0.001]]", "qwen2.5-coder-32b-instruct": "[[3, 4], [0, 0], [1, 1], [5, 12], [10, 0], [0, 10], [-3, 4], [3, -4], [-3, -4], [10.5, 5.2]]", "gpt-4o-mini": "[[5, 10], [3, 4], [0, 5], [5, 0], [7.5, 12.3], [1, 1], [100, 50], [-3, 7], [4.5, -2.1]]"}}
{"task_id": "Mbpp/583", "requirement": "def catalan_number(num: int) -> int:\n\"\"\"\nWrite a function which returns nth catalan number.\n\"\"\"", "entry_point": "catalan_number", "canonical_solution": "def catalan_number(num):\n    if num <= 1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num", "input_output_examples": "[[[10]], [[16796]]]", "starter_code": "def catalan_number(num: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [5], [10], [15], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [20]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [20]]"}}
{"task_id": "Mbpp/585", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\n\"\"\"", "entry_point": "expensive_items", "canonical_solution": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items", "input_output_examples": "[[[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1]], [[[{'name': 'Item-2', 'price': 555.22}]]]]", "starter_code": "from typing import List\nfrom typing import Dict\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:", "llm_generated_inputs": {"deepseek-v3": "[[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 300.5}], 2], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 300.5}, {'name': 'Item-4', 'price': 1000.0}], 3], [[{'name': 'Item-1', 'price': 101.1}], 1], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 0], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 5], [[], 1]]", "qwen2.5-coder-32b-instruct": "[[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 75.55}], 2], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 101.1}, {'name': 'Item-3', 'price': 101.1}], 3], [[{'name': 'Item-1', 'price': 101.1}], 1], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 0], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 5], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 75.55}, {'name': 'Item-4', 'price': 999.99}], 4]]", "gpt-4o-mini": "[[[{'name': 'item1', 'price': 10}, {'name': 'item2', 'price': 20}, {'name': 'item3', 'price': 5}], 2], [[{'name': 'itemA', 'price': 100}, {'name': 'itemB', 'price': 200}, {'name': 'itemC', 'price': 150}], 1], [[{'name': 'itemX', 'price': 300}, {'name': 'itemY', 'price': 100}, {'name': 'itemZ', 'price': 250}, {'name': 'itemW', 'price': 500}], 3], [[{'name': 'itemLow', 'price': 1}, {'name': 'itemMedium', 'price': 50}, {'name': 'itemHigh', 'price': 1000}], 2], [[], 0], [[{'name': 'item1', 'price': 100}], 1], [[{'name': 'item1', 'price': 200}, {'name': 'item2', 'price': 200}, {'name': 'item3', 'price': 200}], 3]]"}}
{"task_id": "Mbpp/586", "requirement": "from typing import List\n\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a python function to split a list at the nth element and add the first part to the end.\n\"\"\"", "entry_point": "split_Arr", "canonical_solution": "def split_Arr(l, n):\n  return l[n:] + l[:n]", "input_output_examples": "[[[[12, 10, 5, 6, 52, 36], 2]], [[[5, 6, 52, 36, 12, 10]]]]", "starter_code": "from typing import List\ndef split_Arr(arr: List[int], n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[12, 10, 5, 6, 52, 36], 2], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 5], [[7], 1], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 4], [[1, 2, 3, 4, 5], -1], [[1, 2, 3, 4, 5], 6], [[], 0]]", "qwen2.5-coder-32b-instruct": "[[[12, 10, 5, 6, 52, 36], 2], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 3], [[7, 8, 9], 1], [[7, 8, 9], 2], [[10, 20, 30, 40, 50], 4], [[10, 20, 30, 40, 50], -1], [[10, 20, 30, 40, 50], 6], [[5], 0], [[5], 1], [[5], 2]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 3], [[5, 10, 15, 20], 1], [[7], 0], [[], 0], [[1, 2, 3], 3], [[100, 200, 300, 400, 500], 5]]"}}
{"task_id": "Mbpp/587", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to convert a list to a tuple.\n\"\"\"", "entry_point": "list_tuple", "canonical_solution": "def list_tuple(listx):\n  return tuple(listx)", "input_output_examples": "[[[[5, 10, 7, 4, 15, 3]]], [[(5, 10, 7, 4, 15, 3)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[]], [['a', 'b', 'c']], [[True, False, True]], [[1.1, 2.2, 3.3]], [[[1, 2], [3, 4]]], [[(1, 2), (3, 4)]], [[{'key': 'value'}, {'another_key': 'another_value'}]], [[None, None, None]], [[1, 'a', True, 2.5, [1, 2], {'key': 'value'}, None]]]", "qwen2.5-coder-32b-instruct": "[[[5, 10, 7, 4, 15, 3]], [[]], [[1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [['a', 'b', 'c']], [[True, False, True]], [[None, None, None]], [[1.1, 2.2, 3.3]], [[[], [1], [1, 2]]], [[{}, {'key': 'value'}, {'a': 1, 'b': 2}]]]", "gpt-4o-mini": "[[[1, 2, 3]], [['a', 'b', 'c']], [[(1, 2), (3, 4)]], [[True, False, True]], [[None, 'text', 42]], [['single_element']], [[]]]"}}
{"task_id": "Mbpp/588", "requirement": "from typing import List\n\n\ndef big_diff(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\n\"\"\"", "entry_point": "big_diff", "canonical_solution": "def big_diff(nums):\n     return max(nums) - min(nums)", "input_output_examples": "[[[[1, 2, 3, 4]]], [[3]]]", "starter_code": "from typing import List\ndef big_diff(nums: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4]], [[10]], [[5, 5, 5, 5]], [[0, -1, -2, -3]], [[100, 200, 300, 400, 500]], [[-10, 0, 10]], [[1, 3, 5, 7, 9, 2, 4, 6, 8]], [[]], [[-1, -2, -3, -4, -5]], [[1000000, 999999]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4]], [[10, 3, 5, 6]], [[7, 7, 7, 7]], [[100]], [[]], [[-1, -2, -3, -4]], [[0, 0, 0, 0]], [[1, 1000000]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[5, 3, 9, 1, 7]], [[-10, -5, 0, 5, 10]], [[0]], [[100, 200, 300, 400, 500]], [[1, 1, 1, 1, 1]], [[-1, -1, -1, 0]], [[10, 20, 30, 40, 50]], [[1, 3, 2, -1, -3]], [[7]]]"}}
{"task_id": "Mbpp/589", "requirement": "from typing import List\n\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n\"\"\"\nWrite a function to find perfect squares between two given numbers.\n\"\"\"", "entry_point": "perfect_squares", "canonical_solution": "import math\ndef perfect_squares(a, b):\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))", "input_output_examples": "[[[1, 30]], [[[1, 4, 9, 16, 25]]]]", "starter_code": "from typing import List\ndef perfect_squares(a: int, b: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[1, 30], [10, 20], [0, 1], [50, 100], [25, 25], [17, 17], [-10, 10], [100, 50], [100, 1000], [1, 1]]", "qwen2.5-coder-32b-instruct": "[[1, 30], [0, 0], [1, 1], [2, 2], [24, 25], [30, 1], [-10, 10], [100, 200], [1000, 1100]]", "gpt-4o-mini": "[[1, 10], [16, 25], [0, 0], [5, 15], [-10, 10], [49, 100], [100, 1000], [10, 1]]"}}
{"task_id": "Mbpp/590", "requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"", "entry_point": "polar_rect", "canonical_solution": "import cmath\ndef polar_rect(x,y):\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)", "input_output_examples": "[[[3, 4]], [[((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]", "starter_code": "from typing import Tuple\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:", "llm_generated_inputs": {"deepseek-v3": "[[0, 0], [1, 0], [0, 1], [1, 1], [-1, -1], [3, 4], [-3, 4], [3, -4], [-3, -4], [10, 10], [-10, 10], [10, -10], [-10, -10], [0.5, 0.5], [-0.5, -0.5], [1000, 1000], [-1000, 1000]]", "qwen2.5-coder-32b-instruct": "[[3, 4], [0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [5, 12], [-3, -4], [1.5, 2.5], [-1.5, -2.5]]", "gpt-4o-mini": "[[1.0, 0.0], [0.0, 1.0]]"}}
{"task_id": "Mbpp/591", "requirement": "from typing import List\n\n\ndef swap_List(newList: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to interchange the first and last elements in a list.\n\"\"\"", "entry_point": "swap_List", "canonical_solution": "def swap_List(newList): \n    return newList[-1:] + newList[1:-1] + newList[:1]", "input_output_examples": "[[[[12, 35, 9, 56, 24]]], [[[24, 35, 9, 56, 12]]]]", "starter_code": "from typing import List\ndef swap_List(newList: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[12, 35, 9, 56, 24]], [[1]], [[10, 20]], [[5, 6, 7, 8, 9, 10]], [[0, 0, 0, 0]], [[-1, -2, -3, -4]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[12, 35, 9, 56, 24]], [[1, 2, 3, 4, 5]], [[10, 20]], [[1]], [[]], [[7, 7, 7, 7]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[10]], [[-1, 0, 1]], [[1, 2]], [['a', 'b', 'c', 'd']], [[1, 2, 3, 4]], [[]], [[100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6, 7]]]"}}
{"task_id": "Mbpp/592", "requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\"\"\"", "entry_point": "sum_Of_product", "canonical_solution": "def binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n, n - 1);", "input_output_examples": "[[[3]], [[15]]]", "starter_code": "def sum_Of_product(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[3], [0], [1], [5], [10]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [10], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [20], [-1], [100]]"}}
{"task_id": "Mbpp/593", "requirement": "def removezero_ip(ip: str) -> str:\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\n\n\"\"\"", "entry_point": "removezero_ip", "canonical_solution": "import re\ndef removezero_ip(ip):\n return re.sub('\\.[0]*', '.', ip)", "input_output_examples": "[[['216.08.094.196']], [['216.8.94.196']]]", "starter_code": "def removezero_ip(ip: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['216.08.094.196'], ['001.002.003.004'], ['010.020.030.040'], ['0.0.0.0'], ['255.255.255.255'], ['192.168.001.001'], ['127.0.0.1'], ['10.010.100.001'], ['000.000.000.000'], ['001.010.100.000']]", "qwen2.5-coder-32b-instruct": "[['216.08.094.196'], ['000.000.000.000'], ['192.168.001.001'], ['010.010.010.010'], ['10.0.0.1'], ['0.0.0.0'], ['255.255.255.255'], ['1.02.03.04'], ['001.002.003.004'], ['127.0.0.1']]", "gpt-4o-mini": "[['192.168.001.001'], ['10.0.0.1'], ['0.0.0.0'], ['255.255.255.255'], ['172.016.001.001'], ['001.001.001.001'], ['127.0.0.1'], ['001.0.0.1'], ['123.045.067.089']]"}}
{"task_id": "Mbpp/594", "requirement": "from typing import List\n\n\ndef diff_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\n\"\"\"", "entry_point": "diff_even_odd", "canonical_solution": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), -1)\n    first_odd = next((el for el in list1 if el%2!=0), -1)\n    return (first_even - first_odd)", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[3]]]", "starter_code": "from typing import List\ndef diff_even_odd(list1: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[]], [[10, 20, 30, 40, 50, 55]], [[11, 13, 15, 17, 19, 20]], [[0, 1, 2, 3, 4, 5]], [[2, 1, 4, 3, 6, 5]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[0, 1, 2, 3, 4]], [[11, 22, 33, 44, 55]], [[2, 1, 4, 3, 6, 5]], [[1]], [[2]], [[]], [[0]]]", "gpt-4o-mini": "[[[2, 4, 6, 8, 5, 10]], [[1, 3, 5, 7, 9, 10]], [[10, 20, 30]], [[1, 2, 3, 4, 5]], [[2, 1]], [[1, 2]], [[2]], [[1]], [[-2, -4, -6, -5]], [[0, 3, 5, 7]]]"}}
{"task_id": "Mbpp/596", "requirement": "def tuple_size(tuple_list: tuple) -> int:\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\n\"\"\"", "entry_point": "tuple_size", "canonical_solution": "import sys \ndef tuple_size(tuple_list):\n  return sys.getsizeof(tuple_list)", "input_output_examples": "[[[(\"A\", 1, \"B\", 2, \"C\", 3)]], [[88]]]", "starter_code": "def tuple_size(tuple_list: tuple) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[('A', 1, 'B', 2, 'C', 3)], [()], [(1,)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(True, False, True, False)], [(3.14, 2.71, 1.618)], [(('nested', 'tuple'), ('another', 'one'))], [(1, 'mixed', True, 3.14, ('nested',))]]", "qwen2.5-coder-32b-instruct": "[[('A', 1, 'B', 2, 'C', 3)], [(1, 2, 3, 4, 5)], [(1.1, 2.2, 3.3)], [(True, False, True)], [(('nested', 'tuple'), 123, [4, 5, 6])], [(1,)], [(None, None, None)], [()]]", "gpt-4o-mini": "[[(1, 2, 3)], [((1, 2), (3, 4))], [(True, False)], [('string', 1, 3.14)], [()], [((1, 2, 3, 4, 5, 6),)], [(None,)], [((), ('nested',), (1, 2, (3, 4)))], [((1,), (2,), (3,))]]"}}
{"task_id": "Mbpp/597", "requirement": "from typing import List\n\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\n\"\"\"", "entry_point": "find_kth", "canonical_solution": "def find_kth(arr1, arr2, k):\n\treturn sorted(arr1 + arr2)[k - 1]", "input_output_examples": "[[[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]], [[6]]]", "starter_code": "from typing import List\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5], [2, 4, 6], 4], [[1, 2, 3], [4, 5, 6], 5], [[4, 5, 6], [1, 2, 3], 5], [[1, 3, 5], [2, 4, 6], 1], [[1, 3, 5], [2, 4, 6], 6], [[1, 3, 5], [2, 4, 6], 3], [[1, 3, 5], [], 2], [[], [2, 4, 6], 2], [[1, 1, 1], [1, 1, 1], 4], [[1, 2, 3], [1, 2, 3], 4], [[1, 2, 3], [1, 2, 3], 6], [[1, 2, 3], [4, 5, 6], 7]]", "qwen2.5-coder-32b-instruct": "[[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10], [[1, 3, 5], [2, 4, 6], 2], [[1, 3, 5], [2, 4, 6], 5], [[1], [2], 1], [[1], [2], 2], [[], [1, 2, 3], 1], [[1, 2, 3], [], 2], [[], [], 1]]", "gpt-4o-mini": "[[[1, 3, 5], [2, 4, 6], 3], [[1, 2, 3], [4, 5, 6], 4], [[], [1, 2, 3], 2], [[1, 2, 3], [], 1], [[100, 200, 300], [150, 250, 350], 5], [[1, 2, 3, 4], [5, 6, 7, 8], 7], [[1], [2], 1], [[-5, 0, 5], [-10, -1, 1], 3], [[1, 2], [3, 4, 5, 6], 3], [[], [], 1]]"}}
{"task_id": "Mbpp/598", "requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"", "entry_point": "armstrong_number", "canonical_solution": "def armstrong_number(number):\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number", "input_output_examples": "[[[153]], [[True]]]", "starter_code": "def armstrong_number(number: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[153], [370], [9474], [123], [0], [1], [1634], [8208], [54748], [9475], [-153], [9999]]", "qwen2.5-coder-32b-instruct": "[[153], [0], [1], [9474], [9475], [370], [371], [407], [10], [999999]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [153], [370], [371], [407], [9474], [1634], [1000], [999], [100], [2147483647]]"}}
{"task_id": "Mbpp/599", "requirement": "from typing import Tuple\n\n\ndef sum_average(number: int) -> Tuple[int, float]:\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\n\"\"\"", "entry_point": "sum_average", "canonical_solution": "def sum_average(number):\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average", "input_output_examples": "[[[10]], [[(55, 5.5)]]]", "starter_code": "from typing import Tuple\ndef sum_average(number: int) -> Tuple[int, float]:", "llm_generated_inputs": {"deepseek-v3": "[[10], [1], [0], [100], [-5]]", "qwen2.5-coder-32b-instruct": "[[10], [1], [0], [5], [100]]", "gpt-4o-mini": "[[1], [5], [10], [100], [0], [-5]]"}}
{"task_id": "Mbpp/600", "requirement": "def is_Even(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number is even or not.\n\"\"\"", "entry_point": "is_Even", "canonical_solution": "def is_Even(n) : \n    return n % 2 == 0", "input_output_examples": "[[[1]], [[False]]]", "starter_code": "def is_Even(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [-1], [-2], [1000000], [-1000000]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [0], [-1], [-2], [100], [101]]", "gpt-4o-mini": "[[0], [2], [-4], [7], [100], [-1], [1], [999999998], [999999999]]"}}
{"task_id": "Mbpp/602", "requirement": "def first_repeated_char(str1: str) -> str:\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\n\"\"\"", "entry_point": "first_repeated_char", "canonical_solution": "def first_repeated_char(str1):\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None", "input_output_examples": "[[['abcabc']], [['a']]]", "starter_code": "def first_repeated_char(str1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['abcabc'], ['abcdef'], ['aabbcc'], ['123123'], [' '], [''], ['abacabad'], ['xyzxyz'], ['hellohello'], ['no_repeats']]", "qwen2.5-coder-32b-instruct": "[['abcabc'], ['abcdef'], ['aabbcc'], ['abacabad'], ['12345678901'], ['!!@@##$$%%^^&&'], [''], ['a'], ['ab'], ['racecar']]", "gpt-4o-mini": "[['hello'], ['swiss'], ['abcdef'], ['aabbcc'], ['1234567890'], ['!@#$%^&*()_+'], ['No repeats here'], [''], ['a'], ['aAaa'], ['abcdeedcba']]"}}
{"task_id": "Mbpp/603", "requirement": "from typing import List\n\n\ndef get_ludic(n: int) -> List[int]:\n\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\"\"\"", "entry_point": "get_ludic", "canonical_solution": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "input_output_examples": "[[[10]], [[[1, 2, 3, 5, 7]]]]", "starter_code": "from typing import List\ndef get_ludic(n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [10], [20], [0], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[10], [1], [0], [20], [30], [100]]", "gpt-4o-mini": "[[0], [1], [10], [20], [100], [200], [1000], [9999]]"}}
{"task_id": "Mbpp/604", "requirement": "def reverse_words(s: str) -> str:\n\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\n\"\"\"", "entry_point": "reverse_words", "canonical_solution": "def reverse_words(s):\n\treturn ' '.join(reversed(s.split()))", "input_output_examples": "[[['python program']], [['program python']]]", "starter_code": "def reverse_words(s: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['python program'], ['hello world'], ['a b c d e'], ['one'], [''], ['  leading spaces'], ['trailing spaces  '], ['  multiple   spaces  '], ['123 456 789'], ['!@# $%^ &*()']]", "qwen2.5-coder-32b-instruct": "[['python program'], ['hello world'], ['singleword'], [' '], [''], ['  leading and trailing spaces  '], ['multiple    spaces between words'], ['a b c d e f g']]", "gpt-4o-mini": "[['Hello World'], ['Python programming is fun'], ['  Leading and trailing spaces  '], ['SingleWord'], [''], ['     '], ['A B C D'], ['  multiple    spaces between  words  ']]"}}
{"task_id": "Mbpp/605", "requirement": "def prime_num(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given integer is a prime number.\n\"\"\"", "entry_point": "prime_num", "canonical_solution": "import math\ndef prime_num(num):\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True", "input_output_examples": "[[[13]], [[True]]]", "starter_code": "def prime_num(num: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[13], [2], [1], [0], [-7], [29], [30], [997], [1000]]", "qwen2.5-coder-32b-instruct": "[[2], [3], [4], [5], [10], [13], [17], [19], [20], [23], [24], [29], [1], [0], [-1], [-5], [-11]]", "gpt-4o-mini": "[[2], [3], [4], [17], [18], [19], [1], [0], [-5], [97]]"}}
{"task_id": "Mbpp/606", "requirement": "def radian_degree(degree: float) -> float:\n\"\"\"\nWrite a function to convert degrees to radians.\n\"\"\"", "entry_point": "radian_degree", "canonical_solution": "import math\ndef radian_degree(degree):\n    return degree * math.pi / 180", "input_output_examples": "[[[90]], [[1.5707963267948966]]]", "starter_code": "def radian_degree(degree: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[90.0], [180.0], [45.0], [0.0], [360.0], [-90.0], [270.0], [1.0], [90.5], [-180.0]]", "qwen2.5-coder-32b-instruct": "[[90], [0], [180], [360], [-90], [-180], [370], [-370], [45], [1.5707963267948966]]", "gpt-4o-mini": "[[0.0], [90.0], [180.0], [360.0], [45.0], [-90.0], [30.0], [120.0], [300.0], [1.0]]"}}
{"task_id": "Mbpp/607", "requirement": "from typing import Tuple\n\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\"\"\"", "entry_point": "find_literals", "canonical_solution": "import re\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "input_output_examples": "[[['The quick brown fox jumps over the lazy dog.', 'fox']], [[('fox', 16, 19)]]]", "starter_code": "from typing import Tuple\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:", "llm_generated_inputs": {"deepseek-v3": "[['The quick brown fox jumps over the lazy dog.', 'fox'], ['Hello world!', 'world'], ['Python is fun', 'is'], ['1234567890', '456'], ['Case sensitive', 'sensitive'], ['Multiple words in a sentence', 'words'], ['No match here', 'xyz'], ['', 'empty'], ['Special characters !@#$%^&*()', '!@#'], ['Repeated words words words', 'words'], ['Leading and trailing spaces ', 'spaces'], ['Mixed case TeSt', 'TeSt']]", "qwen2.5-coder-32b-instruct": "[['The quick brown fox jumps over the lazy dog.', 'fox'], ['Hello, world!', 'world'], ['Sample text with numbers 12345.', '12345'], ['No matches here.', 'absent'], ['Multiple matches of word word.', 'word'], ['Case sensitive Search.', 'search'], ['Case sensitive Search.', 'Search'], ['', 'empty'], ['Non-empty string', ''], ['Special $characters #are @here!', '@here!'], ['Overlapping patterns patpat.', 'patpat']]", "gpt-4o-mini": "[['hello world', 'world'], ['regex is cool!', 'cool'], ['123abc', '[0-9]+'], ['case sensitive', 'Sensitive'], ['test123test', 'test'], ['hello', 'bye'], ['', 'pattern'], ['abc', 'a'], ['abcabc', 'abc'], ['abcde', 'cde']]"}}
{"task_id": "Mbpp/608", "requirement": "def bell_Number(n: int) -> int:\n\"\"\"\nWrite a python function to find nth bell number.\n\"\"\"", "entry_point": "bell_Number", "canonical_solution": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0]", "input_output_examples": "[[[2]], [[2]]]", "starter_code": "def bell_Number(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [5], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [15], [20]]"}}
{"task_id": "Mbpp/610", "requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\"\"\"", "entry_point": "remove_kth_element", "canonical_solution": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[[1, 1, 3, 4, 4, 5, 1]]]]", "starter_code": "from typing import List\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 1], [[7, 8, 9], 3], [[1, 1, 1, 1], 4], [[], 1], [[5, 10, 15], 0], [[2, 4, 6, 8], 5], [[3, 6, 9], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[10, 20, 30, 40, 50], 0], [[10, 20, 30, 40, 50], 4], [[10, 20, 30, 40, 50], 2], [[1, 2, 3], 1], [[1, 2, 3], 2], [[1, 2, 3], 0], [[1], 0], [[1, 1, 1, 1, 1], 2], [[1, 1, 1, 1, 1], 4], [[1, 1, 1, 1, 1], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40], 0], [[100, 200, 300], 1], [[5], 0], [[], 0], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], -1]]"}}
{"task_id": "Mbpp/611", "requirement": "from typing import List\n\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\"\"\"", "entry_point": "max_of_nth", "canonical_solution": "def max_of_nth(test_list, N):\n  return max([sub[N] for sub in test_list])", "input_output_examples": "[[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], [[19]]]", "starter_code": "from typing import List\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1], [[[10, 20], [30, 40], [50, 60]], 0], [[[1], [2], [3]], 0], [[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]], 2], [[[], [], []], 0], [[[1, 2], [3, 4]], 3]]", "qwen2.5-coder-32b-instruct": "[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[10, 20], [30, 40], [50, 60]], 1], [[[100]], 0], [[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]], 2], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], 0], [[[1, 2], [3, 4], [5, 6]], 0], [[[1]], 0]]", "gpt-4o-mini": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2], [[[10, 20, 30], [40, 50, 60]], 1], [[[5], [10], [15]], 0], [[[1, 4, 5], [1, 2, 6], [3, 4, 9]], 0], [[[0, 0, 0], [0, 1, 0], [0, 2, 0]], 1], [[], 0], [[[1, 2], [3]], 0], [[[5, 10, 15], [20, 25, 30], [35, 40, 45]], 2]]"}}
{"task_id": "Mbpp/612", "requirement": "from typing import List\n\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\"\"\"", "entry_point": "merge", "canonical_solution": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))]", "input_output_examples": "[[[[['x', 'y'], ['a', 'b'], ['m', 'n']]]], [[[['x', 'a', 'm'], ['y', 'b', 'n']]]]]", "starter_code": "from typing import List\ndef merge(lst: List[List[int]]) -> List[List[int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2], [3, 4], [5, 6]]], [[['x', 'y'], ['a', 'b'], ['m', 'n']]], [[[10, 20], [30, 40]]], [[[-1, -2], [-3, -4], [-5, -6]]], [[[0, 0], [0, 0], [0, 0]]], [[[100], [200]]], [[[], []]], [[[1, 2], []]], [[[], [3, 4]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]]]", "qwen2.5-coder-32b-instruct": "[[[['x', 'y'], ['a', 'b'], ['m', 'n']]], [[[1, 2], [3, 4], [5, 6]]], [[['p', 1], ['q', 2], ['r', 3]]], [[['single']]], [[]], [[['onlyoneelement']]]]", "gpt-4o-mini": "[[[[1, 2], [3, 4], [5, 6]]], [[[0, -1], [2, -3], [4, -5]]], [[[], []]], [[[10, 20], [30, 40]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[1, 2]]], [[[1, 1], [1, 1], [1, 1]]], [[[1, 2, 3], [4, 5, 6]]]]"}}
{"task_id": "Mbpp/614", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"", "entry_point": "cummulative_sum", "canonical_solution": "def cummulative_sum(test_list):\n  return sum(map(sum, test_list))", "input_output_examples": "[[[[(1, 3), (5, 6, 7), (2, 6)]]], [[30]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[(1, 3), (5, 6, 7), (2, 6)]], [[]], [[(10,)]], [[(1, 2, 3), (4, 5), (6, 7, 8, 9)]], [[(-1, -2, -3), (4, 5), (-6, 7, 8, 9)]], [[(0, 0, 0), (0, 0)]]]", "qwen2.5-coder-32b-instruct": "[[[(1, 3), (5, 6, 7), (2, 6)]], [[]], [[(0, 0, 0)]], [[(10, -5, 3)]], [[(-1, -2, -3, -4)]], [[(100, 200, 300)]], [[(1,)]]]", "gpt-4o-mini": "[[[(1, 2), (3, 4), (5, 6)]], [[(10, 20), (30,)]], [[(0, 0), (0, 0), (0, 0)]], [[(1, -1), (2, -2), (3, -3)]], [[(100, 200), (300, 400), (500, 600), (700, 800)]], [[(1, 2), (3, 3), (-1, -2)]], [[]], [[(123, 456)]], [[(1, 2, 3), (4, 5)]]]"}}
{"task_id": "Mbpp/615", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\"\"\"", "entry_point": "average_tuple", "canonical_solution": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))]], [[[30.5, 34.25, 27.0, 23.25]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:", "llm_generated_inputs": {"deepseek-v3": "[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [((1.5, 2.5, 3.5), (4.5, 5.5, 6.5))], [((),)], [((0, 0, 0), (0, 0, 0))], [((10,), (20,), (30,))], [((100, 200, 300), (400, 500, 600), (700, 800, 900))], [((-1, -2, -3), (1, 2, 3))], [((1.2, 3.4, 5.6), (7.8, 9.0, 1.1))], [((1,), (2,), (3,), (4,), (5,))], [((10, 20, 30, 40, 50), (60, 70, 80, 90, 100))]]", "qwen2.5-coder-32b-instruct": "[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [((1, 2, 3), (4, 5, 6), (7, 8, 9))], [((5, 5, 5, 5), (10, 10, 10, 10))], [((0, 0, 0), (0, 0, 0), (0, 0, 0))], [((-1, -2, -3), (-4, -5, -6))], [((100,), (200,), (300,))], [()], [((1.5, 2.5, 3.5), (4.5, 5.5, 6.5))]]", "gpt-4o-mini": "[[((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))], [((10.0, 20.0), (30.0, 40.0))], [((-1.0, -2.0), (-3.0, -4.0))], [((100.0, 200.0, 300.0), (400.0, 500.0, 600.0))], [((0.0, 0.0), (0.0, 0.0))], [((5.5,), (6.5,), (7.5,))], [((1.1, 2.2, 3.3),)], [((-1.5, 2.5), (3.0, -3.0), (4.5, -4.5))]]"}}
{"task_id": "Mbpp/616", "requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\"\"\"", "entry_point": "tuple_modulo", "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res)", "input_output_examples": "[[[(10, 4, 5, 6), (5, 6, 7, 5)]], [[(0, 4, 5, 1)]]]", "starter_code": "from typing import Tuple\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(15, 20, 25), (3, 4, 5)], [(0, 0, 0), (1, 1, 1)], [(1, 2, 3), (1, 2, 3)], [(7, 14, 21), (7, 7, 7)], [(5, 10, 15), (6, 11, 16)], [(10, 20, 30), (5, 10, 15)], [(1, 1, 1), (2, 2, 2)], [(100, 200, 300), (50, 100, 150)], [(-10, -4, -5), (5, 6, 7)], [(10, 4, 5), (-5, -6, -7)], [(-10, -4, -5), (-5, -6, -7)]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(1, 2, 3), (1, 1, 1)], [(0, 0, 0), (1, 2, 3)], [(9, 8, 7), (3, 3, 3)], [(-10, -20, -30), (3, 4, 5)], [(100, 200, 300), (10, 20, 30)], [(1, 1, 1), (2, 2, 2)], [(1, 0, 1), (1, 1, 1)]]", "gpt-4o-mini": "[[(10, 20, 30), (3, 4, 5)], [(5, 15, 25), (2, 5, 10)], [(10, 10, 10), (1, 1, 1)], [(1,), (1,)]]"}}
{"task_id": "Mbpp/618", "requirement": "from typing import List\n\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n\"\"\"\nWrite a function to divide two lists element wise.\n\"\"\"", "entry_point": "div_list", "canonical_solution": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "input_output_examples": "[[[[4, 5, 6], [1, 2, 3]]], [[[4.0, 2.5, 2.0]]]]", "starter_code": "from typing import List\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:", "llm_generated_inputs": {"deepseek-v3": "[[[4, 5, 6], [1, 2, 3]], [[10, 20, 30], [2, 5, 10]], [[0, 0, 0], [1, 1, 1]], [[1, 2, 3], [0, 0, 0]], [[-4, -6, -8], [2, 3, 4]], [[1.5, 2.5, 3.5], [0.5, 1.0, 1.5]], [[1], [1]], [[1, 2, 3, 4], [1, 2]], [[], []]]", "qwen2.5-coder-32b-instruct": "[[[4, 5, 6], [1, 2, 3]], [[10, 20, 30], [2, 4, 5]], [[0, 0, 0], [1, 1, 1]], [[1, 2, 3], [0, 0, 0]], [[1.5, 2.5, 3.5], [0.5, 0.5, 0.5]], [[], []], [[1, 2], [1]], [[-1, -2, -3], [1, 2, 3]], [[100, 200, 300], [0.1, 0.2, 0.3]]]", "gpt-4o-mini": "[[[10.0, 20.0, 30.0], [2.0, 4.0, 5.0]], [[5.0, 10.0, 15.0], [0.5, 2.0, 3.0]], [[1.0, 2.5, 3.0], [1.0, 0.0, 3.0]], [[10.0, 15.0], [0.0, 0.0]], [[], [1.0, 2.0]], [[1.0], [2.0]], [[25.5, 0.0], [5.0, 0.0]], [[0.0, 1.0], [1.0, 0.0]], [[7.0, -14.0, 3.0], [1.0, 2.0, -1.0]]]"}}
{"task_id": "Mbpp/619", "requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\n\"\"\"", "entry_point": "move_num", "canonical_solution": "def move_num(test_str):\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str", "input_output_examples": "[[['I1love143you55three3000thousand']], [['Iloveyouthreethousand1143553000']]]", "starter_code": "def move_num(test_str: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['I1love143you55three3000thousand'], ['Hello123World456'], ['1234567890'], ['NoNumbersHere'], ['1a2b3c4d5e6f7g8h9i0j'], [''], ['Special!Chars@123'], ['123abc!@#']]", "qwen2.5-coder-32b-instruct": "[['I1love143you55three3000thousand'], ['123abc456'], ['abc'], ['123'], ['a1b2c3'], ['noNumbersHere!'], ['9876543210'], ['single9'], ['9single'], ['']]", "gpt-4o-mini": "[['hello123'], ['abc456def'], ['789xyz'], ['test1test2test3'], ['numbers1234atend'], ['noNumbersHere'], ['1122334455'], ['!@#$$%^&*()123'], ['Mixed1234Chars'], ['']]"}}
{"task_id": "Mbpp/620", "requirement": "from typing import List\n\n\ndef largest_subset(a: List[int]) -> int:\n\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\"\"\"", "entry_point": "largest_subset", "canonical_solution": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for _ in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "input_output_examples": "[[[[1, 3, 6, 13, 17, 18]]], [[4]]]", "starter_code": "from typing import List\ndef largest_subset(a: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 6, 13, 17, 18]], [[1, 2, 4, 8, 16]], [[1, 1, 1, 1]], [[2, 4, 6, 8, 10]], [[3, 9, 27, 81]], [[1]], [[]], [[5, 10, 15, 20, 25, 30]], [[7, 14, 21, 28, 35]], [[1, 2, 3, 5, 7, 11, 13, 17, 19, 23]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 6, 13, 17, 18]], [[1, 2, 3, 4, 5, 6]], [[4, 8, 10, 240]], [[1, 2, 4, 8, 16]], [[10, 5, 3, 15, 20]], [[1]], [[]], [[7, 14, 28, 35]], [[3, 9, 27, 81]], [[5, 10, 15, 20, 25]]]", "gpt-4o-mini": "[[[1, 2, 4, 8]], [[3, 6, 12, 24]], [[5, 10, 15, 30]], [[2, 4, 8, 16, 32]], [[1, 3, 5, 7]], [[0, 2, 4, 8, 16]], [[9, 27, 81, 243]], [[10, 2, 5, 20, 25]], [[]], [[1]], [[2, 4, 6, 8, 9]], [[2, 3, 4, 6, 8]], [[8, 4, 12, 24, 48]], [[17, 34, 102]]]"}}
{"task_id": "Mbpp/622", "requirement": "from typing import List\n\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n\"\"\"\nWrite a function to find the median of two sorted lists of same size.\n\"\"\"", "entry_point": "get_median", "canonical_solution": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], [[16.0]]]", "starter_code": "from typing import List\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[1, 3, 5], [2, 4, 6], 3], [[1, 2], [3, 4], 2], [[1], [2], 1], [[], [], 0], [[1, 3, 8, 9, 15], [7, 11, 18, 19, 21], 5], [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 6], [[1, 1, 1, 1], [2, 2, 2, 2], 4], [[1, 5, 10], [2, 7, 12], 3], [[10, 20, 30, 40], [15, 25, 35, 45], 4]]", "qwen2.5-coder-32b-instruct": "[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], 5], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], 5], [[1], [2], 1], [[1, 3], [2, 4], 2], [[1, 3, 5], [2, 4, 6], 3], [[1, 2, 3, 4], [5, 6, 7, 8], 4], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], 6]]", "gpt-4o-mini": "[[[1, 3], [2], 2], [[1, 2], [3, 4], 2], [[0, 0], [0, 0], 2], [[], [], 0], [[5, 10], [1, 2], 2], [[-1, 3], [1, 2], 2], [[1, 5], [2, 3], 2], [[1], [2], 1], [[1, 2, 3], [4, 5, 6], 3], [[1, 2], [3, 4, 5], 3]]"}}
{"task_id": "Mbpp/623", "requirement": "from typing import List\n\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function to compute the n-th power of each number in a list.\n\"\"\"", "entry_point": "nth_nums", "canonical_solution": "def nth_nums(nums, n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "starter_code": "from typing import List\ndef nth_nums(nums: List[int], n: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[0, 1, 2, 3], 3], [[-1, -2, -3], 2], [[1, 2, 3], 0], [[], 2], [[5, 10, 15], 1], [[2, 4, 6], -2], [[1, 1, 1, 1], 5], [[-1, 0, 1], 4], [[10, 20, 30, 40], 2]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[0, 1, 2, 3], 3], [[-1, -2, -3, -4], 2], [[2, 4, 6, 8], 0], [[1, 1, 1, 1], 5], [[10, 20, 30], 1], [[5, 10, 15], -1], [[2, 3, 4], 4], [[], 2], [[2], 3]]", "gpt-4o-mini": "[[[1, 2, 3], 2], [[4, 5, 6], 3], [[0, 1, 2, 3], 0], [[-1, -2, -3], 1], [[10], 4], [[], 2], [[2, 3, 5, 7], 1], [[-2, 0, 2], 3]]"}}
{"task_id": "Mbpp/624", "requirement": "def is_upper(string: str) -> str:\n\"\"\"\nWrite a python function to convert a given string to uppercase.\n\"\"\"", "entry_point": "is_upper", "canonical_solution": "def is_upper(string):\n  return string.upper()", "input_output_examples": "[[['person']], [['PERSON']]]", "starter_code": "def is_upper(string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['person'], ['Hello World'], ['123abc'], ['!@#$%^&*()'], [''], ['already UPPER'], ['mixed CASE123']]", "qwen2.5-coder-32b-instruct": "[['person'], ['Hello World'], ['123abcDEF'], [''], ['ALLUPPER'], ['lowercase'], ['MiXeD CaSe'], ['1234567890'], ['!@#$%^&*()']]", "gpt-4o-mini": "[['hello'], ['HELLO'], ['Hello World'], ['12345'], ['!@#$%'], ['lowercase and UPPERCASE'], ['mixed CASE testing 123'], ['      spaces      '], ['singlecharacter'], ['']]"}}
{"task_id": "Mbpp/626", "requirement": "def triangle_area(radius: float) -> float:\n\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\"\"\"", "entry_point": "triangle_area", "canonical_solution": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r", "input_output_examples": "[[[-1]], [[None]]]", "starter_code": "def triangle_area(radius: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[5.0], [0.0], [-1.0], [10.5], [0.001], [1000000.0]]", "qwen2.5-coder-32b-instruct": "[[5.0], [10.0], [0.0], [-1], [1.5]]", "gpt-4o-mini": "[[1.0], [2.5], [0.0], [10.5], [100.0], [-5.0], [3.14], [7.0], [1e-05]]"}}
{"task_id": "Mbpp/628", "requirement": "def replace_spaces(string: str) -> str:\n\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\n\"\"\"", "entry_point": "replace_spaces", "canonical_solution": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "input_output_examples": "[[['My Name is Dawood']], [['My%20Name%20is%20Dawood']]]", "starter_code": "def replace_spaces(string: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['My Name is Dawood'], ['Hello World'], ['NoSpacesHere'], ['   LeadingSpaces'], ['TrailingSpaces   '], ['   Multiple   Spaces   '], [''], [' '], ['%20'], ['This is a test']]", "qwen2.5-coder-32b-instruct": "[['My Name is Dawood'], ['Hello World'], ['Python  Programming'], ['NoSpacesHere'], [' Leading and trailing '], ['  Multiple   spaces  '], [''], [' '], ['    ']]", "gpt-4o-mini": "[['Hello World'], ['   Leading and trailing spaces   '], ['NoSpaces'], ['Multiple    spaces    here'], [''], ['       '], ['Single space'], ['Space at end '], ['Replace   spaces   in   between']]"}}
{"task_id": "Mbpp/629", "requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to find even numbers from a list of numbers.\n\"\"\"", "entry_point": "Split", "canonical_solution": "def Split(l): \n    return [num for num in l if num % 2 == 0]", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[[2, 4]]]]", "starter_code": "from typing import List\ndef Split(l: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[2, 4, 6, 8]], [[1, 3, 5, 7]], [[]], [[0]], [[-2, -1, 0, 1, 2]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5]], [[10, 15, 20, 25, 30]], [[11, 13, 17, 19]], [[2, 4, 6, 8, 10]], [[]], [[0, 1, 2, 3, 4]], [[100, 200, 300, 400, 500]], [[1, 3, 5, 7, 9, 11, 13, 15]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5, 6]], [[10, 15, 20, 25]], [[0, -2, 3, -4]], [[-1, -2, -3, -4]], [[7, 9, 11]], [[-10, -20, 0, 20, 30]], [[2, 4, 6, 8, 10]], [[1]], [[2]], [[]]]"}}
{"task_id": "Mbpp/630", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"", "entry_point": "get_coordinates", "canonical_solution": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "input_output_examples": "[[[(3, 4)]], [[[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:", "llm_generated_inputs": {"deepseek-v3": "[[(3, 4)], [(0, 0)], [(-1, -1)], [(1, 1, 1)], [(5, 5, 5, 5)], [(2, 3, 4)], [(10, 10)], [(100, 100)], [(0, 1)], [(1, 0)]]", "qwen2.5-coder-32b-instruct": "[[(3, 4)], [(0, 0)], [(-1, -1)], [(1, 0)], [(0, 1)], [(10, 10)], [(100, 100)]]", "gpt-4o-mini": "[[((0, 0),)], [((1, 2),)], [((-1, -1),)], [((5, 5),)], [((10, 5),)], [((0, 1),)], [((-3, 3),)], [((2, 2),)], [((-5, -5),)], [((0, 0, 0),)], [((2,),)]]"}}
{"task_id": "Mbpp/631", "requirement": "def replace_spaces(text: str) -> str:\n\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\"\"\"", "entry_point": "replace_spaces", "canonical_solution": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "input_output_examples": "[[['Jumanji The Jungle']], [['Jumanji_The_Jungle']]]", "starter_code": "def replace_spaces(text: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Jumanji The Jungle'], ['Jumanji_The_Jungle'], ['Jumanji_The Jungle'], ['JumanjiTheJungle'], [' Jumanji The Jungle '], ['__Jumanji_The_Jungle__'], ['  Jumanji  The  Jungle  '], [''], [' '], ['_']]", "qwen2.5-coder-32b-instruct": "[['Jumanji The Jungle'], ['Hello World'], ['Python_is_fun'], ['noSpacesHere'], [' '], ['_'], ['Multiple   spaces'], ['Single_Single'], ['Start_and_End '], [' End_with_space'], ['Start_with_space '], ['']]", "gpt-4o-mini": "[['Hello World'], ['  Leading and trailing spaces  '], ['NoSpacesHere'], ['Multiple    Spaces'], ['_Underscore_In_Between'], ['This_has_spaces_and_underscores'], [''], ['    '], ['Space at the end '], ['Space at the start']]"}}
{"task_id": "Mbpp/632", "requirement": "from typing import List\n\n\ndef move_zero(num_list: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\n\"\"\"", "entry_point": "move_zero", "canonical_solution": "def move_zero(num_list):\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros", "input_output_examples": "[[[[1, 0, 2, 0, 3, 4]]], [[[1, 2, 3, 4, 0, 0]]]]", "starter_code": "from typing import List\ndef move_zero(num_list: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 0, 2, 0, 3, 4]], [[0, 0, 0, 1, 2, 3]], [[1, 2, 3, 4, 5]], [[0, 0, 0, 0, 0]], [[]], [[1, 0, 0, 0, 2, 0, 3, 0, 4, 0]], [[0, 1, 0, 2, 0, 3, 0, 4, 0, 5]]]", "qwen2.5-coder-32b-instruct": "[[[1, 0, 2, 0, 3, 4]], [[0, 0, 0, 1, 2, 3]], [[1, 2, 3, 4, 5]], [[0, 0, 0, 0, 0]], [[]], [[0]], [[1]], [[1, 0, 0, 0, 0, 0, 0, 0, 2]], [[9, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, 2, 0, 0, 0, 3, 0, 0, 4]]]", "gpt-4o-mini": "[[[0, 1, 0, 3, 12]], [[0, 0, 1, 2, 0, 3]], [[1, 2, 3, 0, 0]], [[]], [[1, 2, 3]], [[0]], [[0, 0, 0]], [[1, 0, 2, 0, 3, 0, 4]], [[4, 5, 6, 7]]]"}}
{"task_id": "Mbpp/633", "requirement": "from typing import List\n\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\"\"\"", "entry_point": "pair_xor_Sum", "canonical_solution": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans", "input_output_examples": "[[[[5, 9, 7, 6], 4]], [[47]]]", "starter_code": "from typing import List\ndef pair_xor_Sum(arr: List[int], n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[5, 9, 7, 6], 4], [[1, 2, 3], 3], [[0, 0, 0], 3], [[1], 1], [[10, 20, 30, 40, 50], 5], [[2, 2, 2, 2], 4], [[-1, -2, -3], 3], [[1000000, 2000000], 2]]", "qwen2.5-coder-32b-instruct": "[[[5, 9, 7, 6], 4], [[1, 2, 3, 4, 5], 5], [[0, 0, 0, 0], 4], [[10, 10, 10, 10], 4], [[1, 1, 1, 1, 1, 1], 6], [[1, 2], 2], [[1], 1], [[1, 0], 2]]", "gpt-4o-mini": "[[[1, 2, 3], 3], [[5, 1, 2], 3], [[0, 1, 2], 3], [[4, 4, 4], 3], [[10, 20, 30], 3], [[1, 1, 1, 1], 4], [[10], 1]]"}}
{"task_id": "Mbpp/635", "requirement": "from typing import List\n\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given list.\n\"\"\"", "entry_point": "heap_sort", "canonical_solution": "import heapq as hq\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]", "input_output_examples": "[[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]]]", "starter_code": "from typing import List\ndef heap_sort(iterable: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[5, 3, 8, 1, 9, 4, 7, 2, 6, 0]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1]], [[]], [[1, 1, 1, 1, 1]], [[2, 2, 3, 3, 1, 1]], [[-1, -3, -2, -5, -4]], [[0, 0, 0, 0, 0]], [[100, -100, 50, -50, 0]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[]], [[42]], [[5, 3, 8, 4, 2]], [[0, -1, -2, -3, -4]], [[100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "gpt-4o-mini": "[[[4, 3, 1, 2]], [[10, -1, 2, 0, 5]], [[0, 0, 0, 0]], [[5]], [[-3, -1, -2, -5]], [[2, 1]], [[-1, 2, 0, 1, -1, 3]], [[]]]"}}
{"task_id": "Mbpp/637", "requirement": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\n\"\"\"", "entry_point": "noprofit_noloss", "canonical_solution": "def noprofit_noloss(actual_cost, sale_amount): \n  return actual_cost == sale_amount", "input_output_examples": "[[[1500, 1200]], [[False]]]", "starter_code": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[1500, 1200], [1000, 1000], [500, 500], [0, 0], [2000, 2500], [-100, -100], [-500, -400], [12345, 12345], [999, 1000], [1000, 999]]", "qwen2.5-coder-32b-instruct": "[[1500, 1200], [1500, 1500], [2000, 2000], [0, 0], [1000, 1001], [1000, 999], [-1000, -1000], [-1000, -999], [-1000, -1001]]", "gpt-4o-mini": "[[100, 100], [150, 150], [200, 150], [150, 200], [0, 0], [-50, -50], [100, 50], [50, 100], [100, 0], [0, 100]]"}}
{"task_id": "Mbpp/638", "requirement": "def wind_chill(v: float, t: float) -> int:\n\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\"\"\"", "entry_point": "wind_chill", "canonical_solution": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "input_output_examples": "[[[120, 35]], [[40]]]", "starter_code": "def wind_chill(v: float, t: float) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[120.0, 35.0], [0.0, 25.0], [50.0, -10.0], [100.0, 0.0], [200.0, 40.0], [10.0, 15.0], [30.0, -20.0], [80.0, 5.0]]", "qwen2.5-coder-32b-instruct": "[[120, 35], [0, 0], [-5, 30], [10, -10], [50, 10], [200, -50], [60, 15], [10, 0], [1.2, -20], [120, -30]]", "gpt-4o-mini": "[[10.0, 0.0], [20.0, -5.0], [5.0, -10.0], [15.0, 30.0], [25.0, 20.0], [0.0, -20.0], [8.0, -15.0], [30.0, 0.0], [10.5, -10.5], [50.0, -30.0]]"}}
{"task_id": "Mbpp/639", "requirement": "from typing import List\n\n\ndef sample_nam(sample_names: List[str]) -> int:\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"", "entry_point": "sample_nam", "canonical_solution": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "input_output_examples": "[[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']]], [[16]]]", "starter_code": "from typing import List\ndef sample_nam(sample_names: List[str]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']], [['Alice', 'Bob', 'Charlie', 'david', 'Eve']], [['john', 'mary', 'peter', 'Paul', 'linda']], [['aaron', 'Bella', 'carl', 'Dennis', 'emily']], [['Zoe', 'Xander', 'yara', 'Wendy', 'Victor']], [[]], [['ALICE', 'BOB', 'CHARLIE', 'DAVID', 'EVE']], [['a', 'b', 'c', 'D', 'E']], [['A', 'B', 'C', 'd', 'e']], [['A', 'B', 'C', 'D', 'E']]]", "qwen2.5-coder-32b-instruct": "[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']], [['Alice', 'Bob', 'Charlie']], [['alice', 'bob', 'charlie']], [['Alex', 'alex', 'ALEX']], [[]], [['A', 'b', 'C', 'd']], [['Anna', 'Elsa', 'olaf', 'Kristoff']]]", "gpt-4o-mini": "[[['Alice', 'bob', 'Charlie', 'dave']], [['eve', 'Chris', 'Samantha', 'zara']], [['john', 'doe', 'Micheal', 'Taylor', 'jack']], [['', 'Hello', 'world']], [['ANOTHER', 'test', 'for', 'UPPERCASE']], [['single']], [['', '']], [['cap', 'lock', 'CAP', 'LOCK']], [['lowercase', 'UPPERCASE', 'mIXEDcase']]]"}}
{"task_id": "Mbpp/641", "requirement": "def is_nonagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth nonagonal number.\n\"\"\"", "entry_point": "is_nonagonal", "canonical_solution": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2)", "input_output_examples": "[[[10]], [[325]]]", "starter_code": "def is_nonagonal(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [10], [0], [-1], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [5], [10], [0], [-1], [100]]", "gpt-4o-mini": "[[1], [2], [10], [15], [20], [-1], [0], [100], [1000]]"}}
{"task_id": "Mbpp/643", "requirement": "def text_match_wordz_middle(text: str) -> bool:\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\"\"\"", "entry_point": "text_match_wordz_middle", "canonical_solution": "import re\ndef text_match_wordz_middle(text):\n\treturn re.search(r'\\Bz\\B',  text) is not None", "input_output_examples": "[[['pythonzabc.']], [[True]]]", "starter_code": "def text_match_wordz_middle(text: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['pythonzabc.'], ['zebra'], ['amazing'], ['fizz'], ['puzzle'], ['zzz'], ['hello'], ['cozy'], ['zoo'], ['aztec'], ['z'], ['zz'], ['zaz'], ['zazz'], ['zzaz'], ['zazzaz'], ['pazzazz'], ['pazzazzle'], ['pazzazzzle'], ['pazzazzzlez']]", "qwen2.5-coder-32b-instruct": "[['pythonzabc.'], ['zpythonabc.'], ['pythonabcz'], ['pythonabc'], ['zpythonabcz'], ['pythonzabcz'], ['pythonz'], ['z'], [''], ['pythonzabcz.']]", "gpt-4o-mini": "[['lazydog'], ['zebra'], ['apple'], ['z'], ['dogz'], ['zxyz'], ['middlez'], ['startzmiddle'], ['endsz'], ['abcde']]"}}
{"task_id": "Mbpp/644", "requirement": "from typing import List\n\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function to reverse an array upto a given position.\n\"\"\"", "entry_point": "reverse_Array_Upto_K", "canonical_solution": "def reverse_Array_Upto_K(input, k): \n  return input[k-1::-1] + input[k:]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], 4]], [[[4, 3, 2, 1, 5, 6]]]]", "starter_code": "from typing import List\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6], 4], [[1, 2, 3, 4, 5, 6], 0], [[1, 2, 3, 4, 5, 6], 6], [[1], 1], [[], 0], [[1, 2, 3, 4, 5, 6], 7], [[1, 2, 3, 4, 5, 6], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6], 4], [[10, 20, 30, 40, 50], 2], [[7, 8, 9], 0], [[1, 2, 3, 4, 5], 5], [[5, 4, 3, 2, 1], 3], [[1], 1], [[1, 2], 1], [[1, 2, 3], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 0]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[10, 20, 30, 40, 50], 2], [[], 0], [[7, 8, 9], 1], [[100, 200, 300, 400], 0], [[1], 1], [[1, 2, 3, 4, 5, 6, 7], 5], [[5, 4, 3, 2, 1], 5], [[10, 9, 8, 7], 3]]"}}
{"task_id": "Mbpp/720", "requirement": "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\"\"\"", "entry_point": "add_dict_to_tuple", "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\n  return test_tup + (test_dict, )", "input_output_examples": "[[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}]], [[(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})]]]", "starter_code": "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}], [(1, 2, 3), {'a': 10, 'b': 20}], [(), {'empty': 0}], [(10,), {'single_element': 100}], [(True, False), {'boolean': True}], [(1.5, 2.5), {'float': 3.5}], [(None,), {'none': None}]]", "qwen2.5-coder-32b-instruct": "[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}], [(1, 2, 3), {}], [(1,), {'key': 'value'}], [(1, 2, 3), {'a': 1, 'b': 2, 'c': 3}], [(1, 2, 3), {'a': 1, 'b': 2, 'c': 3, 'd': 4}], [(1, 2, 3), {'same_key': 1}], [(1, 2, 3), {'another_key': None}], [(1, 2, 3), {'multiple': [1, 2, 3]}], [(1, 2, 3), {'nested': {'key': 'value'}}], [(1, 2, 3), {'empty_string': ''}], [(1, 2, 3), {'integer_key': 42}], [(1, 2, 3), {'float_key': 3.14}], [(1, 2, 3), {'boolean_key': True}], [(1, 2, 3), {'boolean_key': False}]]", "gpt-4o-mini": "[[(1, 2, 3), {'a': 1}], [(4, 5, 6), {'b': 2, 'c': 3}], [(7,), {'x': 10}], [(10, 20), {'key': 'value'}], [(True, False), {1: 'one', 2: 'two'}], [(None,), {None: 'null'}], [(1.1, 2.2), {3: 4.4}], [(100, 200, 300), {100: 101, 200: 202}], [((),), {(): 'empty'}], [(0,), {0: 0}]]"}}
{"task_id": "Mbpp/721", "requirement": "from typing import List\n\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\"\"\"", "entry_point": "maxAverageOfPath", "canonical_solution": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n  # all paths are of length 2 * N - 1, so just divide by that\n  return dp[N - 1][N - 1] / (2 * N - 1)", "input_output_examples": "[[[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], [[5.2]]]", "starter_code": "from typing import List\ndef maxAverageOfPath(cost: List[List[int]]) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[1, 2], [3, 4]]], [[[1]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[1, 2, 3], [6, 5, 4], [7, 3, 9]]], [[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]], [[[1]]], [[[1, 2], [3, 4]]], [[[10, 15, 20], [25, 30, 35], [40, 45, 50]]], [[[5, 3], [8, 1]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[-1, -2, -3], [-6, -5, -4], [-7, -3, -9]]]]", "gpt-4o-mini": "[[[[1]]], [[[1, 2], [3, 4]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 3, 1], [2, 3, 2], [3, 3, 3]]], [[[5, 5, 5], [5, 5, 5], [5, 5, 5]]], [[[0, 1], [1, 0]]], [[[100, 200, 300], [400, 500, 600], [700, 800, 900]]], [[[1, -1], [-1, 1]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]], [[[10, 20, 30], [40, 50, 60]]]]"}}
{"task_id": "Mbpp/722", "requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\"\"\"", "entry_point": "filter_data", "canonical_solution": "def filter_data(students,h,w):\n    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}", "input_output_examples": "[[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70]], [[{'Cierra Vega': (6.2, 70)}]]]", "starter_code": "from typing import Dict\nfrom typing import Tuple\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:", "llm_generated_inputs": {"deepseek-v3": "[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{'Alice': (5.5, 60), 'Bob': (6.1, 75), 'Charlie': (5.8, 71)}, 5.7, 70], [{'Diana': (5.9, 68), 'Eve': (6.0, 69), 'Frank': (6.2, 72)}, 6.0, 69], [{'Grace': (5.7, 65), 'Hank': (6.3, 80), 'Ivy': (5.8, 67)}, 5.8, 66], [{}, 5.0, 50], [{'John': (5.9, 69)}, 6.0, 70], [{'Liam': (6.1, 71), 'Mia': (5.8, 68), 'Noah': (6.0, 70)}, 6.0, 70]]", "qwen2.5-coder-32b-instruct": "[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{'Alice': (5.5, 50), 'Bob': (5.7, 60), 'Charlie': (5.9, 70)}, 5.6, 65], [{'David': (6.1, 80), 'Eve': (6.2, 85), 'Frank': (6.3, 90)}, 6.0, 80], [{'Grace': (5.4, 45), 'Hannah': (5.3, 40)}, 5.5, 45], [{}, 5.0, 50], [{'Isaac': (6.5, 75)}, 6.5, 75], [{'Jack': (6.5, 75)}, 6.4, 74], [{'Jill': (6.5, 75)}, 6.6, 76]]", "gpt-4o-mini": "[[{'Alice': (5.5, 130), 'Bob': (5.9, 150), 'Charlie': (5.7, 140)}, 5.6, 135], [{'David': (6.0, 180), 'Eve': (5.8, 145)}, 5.5, 140], [{'Frank': (5.6, 120), 'Grace': (5.4, 130)}, 5.5, 130], [{'Hank': (5.0, 100), 'Ivy': (5.3, 110)}, 5.2, 105], [{'Jack': (5.8, 160)}, 5.0, 150], [{}, 5.0, 100], [{'Kate': (5.7, 150), 'Liam': (5.6, 140)}, 5.7, 160], [{'Mia': (5.9, 155), 'Noah': (5.8, 152)}, 5.8, 150]]"}}
{"task_id": "Mbpp/723", "requirement": "from typing import List\n\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\"\"\"", "entry_point": "count_same_pair", "canonical_solution": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]]], [[4]]]", "starter_code": "from typing import List\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[1, 2, 3], [4, 5, 6]], [[], []], [[10, 20, 30, 40], [10, 20, 30, 40]], [[1, 2, 3], [1, 2, 3, 4]], [[5, 5, 5], [5, 5, 5]], [[1], [1]], [[1], [2]], [[1, 3, 5, 7], [1, 3, 5, 7]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[1, 2, 3], [3, 2, 1]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[1, 2, 3, 4], [5, 6, 7, 8]], [[], []], [[1], [1]], [[1], [2]]]", "gpt-4o-mini": "[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [3, 2, 1]], [[1, 2, 2, 3], [1, 3, 2, 2]], [[], []], [[5, 5, 5], [5, 5, 5]], [[1, 2, 3, 4], [5, 6, 7, 8]], [[1], [1]], [[0, 0, 0], [0, 0, 1]], [[9], [8]], [[1, 2, 3], [1, 2, 4]]]"}}
{"task_id": "Mbpp/724", "requirement": "def power_base_sum(base: int, power: int) -> int:\n\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\"\"\"", "entry_point": "power_base_sum", "canonical_solution": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "input_output_examples": "[[[2, 100]], [[115]]]", "starter_code": "def power_base_sum(base: int, power: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[2, 100], [3, 5], [10, 3], [1, 1000], [0, 10], [5, 0], [-2, 3], [-2, 4]]", "qwen2.5-coder-32b-instruct": "[[2, 100], [2, 3], [5, 20], [10, 5], [1, 1000], [9, 1], [0, 0], [0, 10], [10, 0], [-2, 3], [2, -3]]", "gpt-4o-mini": "[[2, 3], [5, 2], [10, 1], [0, 5], [3, 0], [-2, 2], [4, 3], [10, 3], [9, 2]]"}}
{"task_id": "Mbpp/725", "requirement": "from typing import List\n\n\ndef extract_quotation(text1: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\n\"\"\"", "entry_point": "extract_quotation", "canonical_solution": "import re\ndef extract_quotation(text1):\n  return re.findall(r'\"(.*?)\"', text1)", "input_output_examples": "[[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"']], [[['A53', 'multi', 'Processor']]]]", "starter_code": "from typing import List\ndef extract_quotation(text1: str) -> List[str]:", "llm_generated_inputs": {"deepseek-v3": "[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"'], ['This is a \"test\" string with \"multiple\" quotes'], ['No quotes here just a regular string'], ['Single \"quote\" in the string'], ['\"\"'], ['Empty string \"\" followed by \"another\" quote'], ['Mixed \"quotes\" and \"unmatched\" quotes\"'], ['Multiple \"spaces\"   \"between\"   \"quotes\"'], ['Escaped \"\\\\\"quotes\\\\\"\" inside the string'], ['Unicode \"こんにちは\" and \"안녕하세요\" quotes']]", "qwen2.5-coder-32b-instruct": "[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"'], ['No quotes here'], ['Single \"quote\"'], ['Multiple \"quotes\" \"everywhere\" in \"this\" string'], ['\"Start and end with quote\"'], ['Empty \"\" quotes'], ['Nested \"quotes are \"not \"supported\"\"'], [''], ['\"One last\" test\"']]", "gpt-4o-mini": "[['She said, \"Hello, world!\"'], ['He replied, \"This is a test.\" Did you understand?'], ['No quotes here.'], ['Multiple \"quoted\" sections \"in\" a single \"string\".'], ['Edge case with empty quotes: \"\"'], ['Quotes within quotes: \"He said, \\\\\"It\\'s a great day!\\\\\" and left.\"'], ['Special characters: \"Quotes with !@#$%^&*()\"'], ['Chinese characters: \"你好, 世界!\"']]"}}
{"task_id": "Mbpp/726", "requirement": "from typing import Tuple\n\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\"\"\"", "entry_point": "multiply_elements", "canonical_solution": "def multiply_elements(test_tup):\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(5, 35, 56, 80)]]]", "starter_code": "from typing import Tuple\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 5, 7, 8, 10)], [(2, 3, 4)], [(0, 1, 2, 3)], [(1,)], [(1, 2)], [(-1, 2, 3, -4)], [(1000000, 2000000, 3000000)], [(0, 0, 0)], [(-1, -1, -1, -1)], [(5,)]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, 8, 10)], [(2, 4, 6)], [(-1, -2, -3, -4)], [(0, 1, 2, 3)], [(1, 0, 2, 3)], [(1,)], [()], [(5, 5, 5, 5)]]", "gpt-4o-mini": "[[(1, 2, 3)], [(0, 5, 10)], [(-1, -2, -3)], [(1, 0, 3)], [(2, 4, 6, 8)], [(-2, 5, 3, 0)], [(100, 200)], [(1, 2, 3, 4, 5)], [(0,)]]"}}
{"task_id": "Mbpp/728", "requirement": "from typing import List\n\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\"\"\"", "entry_point": "sum_list", "canonical_solution": "def sum_list(lst1,lst2):\n  return [a + b for a, b in zip(lst1, lst2)]", "input_output_examples": "[[[[10, 20, 30], [15, 25, 35]]], [[[25, 45, 65]]]]", "starter_code": "from typing import List\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [-4, -5, -6]], [[0, 0, 0], [0, 0, 0]], [[10, 20, 30], [15, 25, 35]], [[100], [200]], [[], []], [[1, 2, 3], [4, 5]], [[1], [2, 3]], [[1, 2], []], [[], [3, 4]]]", "qwen2.5-coder-32b-instruct": "[[[10, 20, 30], [15, 25, 35]], [[0, 0, 0], [0, 0, 0]], [[1, 2, 3], [-1, -2, -3]], [[100, 200], [50, 50]], [[], []], [[1], [1]], [[1, 2], [3, 4, 5]], [[1, 2, 3], [4]]]", "gpt-4o-mini": "[[[1, 2, 3], [4, 5, 6]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [1, 2, 3]], [[10, 20], [30, 40]], [[1], [2]], [[], []], [[7], [5]], [[100, 200, 300], [100, 200, 300]], [[-5, -10], [5, 10]], [[1, 2, 3], []], [[], [4, 5, 6]]]"}}
{"task_id": "Mbpp/730", "requirement": "from typing import List\n\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\n\"\"\"", "entry_point": "consecutive_duplicates", "canonical_solution": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, _ in groupby(nums)]", "input_output_examples": "[[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]]]]", "starter_code": "from typing import List\ndef consecutive_duplicates(nums: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[1, 1, 1, 1, 1]], [[1]], [[]], [[1, 2, 3, 4, 5]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [[10, 10, 20, 20, 30, 30, 30, 40, 40, 40, 40]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], [[0, 1, 0, 1, 0, 1, 0, 1]]]", "qwen2.5-coder-32b-instruct": "[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[]], [[1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [[9, 9, 8, 8, 7, 7, 6, 6, 5, 5]], [[1, 2, 1, 2, 1, 2]]]", "gpt-4o-mini": "[[[1, 1, 2, 2, 3, 3, 3, 4]], [[1, 2, 3, 4, 5]], [[1, 1, 1, 1, 1]], [[2, 2, 2, 2, 3]], [[5]], [[]], [[1, 2, 2, 1, 1, 3, 3, 3, 2]], [[1, 2, 3, 3, 2, 1, 1, 1, 4]]]"}}
{"task_id": "Mbpp/731", "requirement": "def lateralsurface_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\"\"\"", "entry_point": "lateralsurface_cone", "canonical_solution": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l", "input_output_examples": "[[[5, 12]], [[204.20352248333654]]]", "starter_code": "def lateralsurface_cone(r: float, h: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[5.0, 12.0], [0.0, 10.0], [10.0, 0.0], [3.5, 7.5], [1.0, 1.0], [100.0, 200.0], [0.001, 0.001], [-5.0, 12.0], [5.0, -12.0], [-5.0, -12.0]]", "qwen2.5-coder-32b-instruct": "[[5, 12], [0, 0], [3, 4], [1, 1], [10, 0], [0, 10], [-1, 5], [5, -1], [2.5, 7.5], [7.5, 2.5]]", "gpt-4o-mini": "[[3.0, 5.0], [4.5, 10.0], [1.0, 1.0], [0.0, 5.0], [5.5, 0.0], [7.2, 3.5], [100.0, 100.0], [1.5, -2.0], [2.0, 10.0], [10.0, 1.0]]"}}
{"task_id": "Mbpp/732", "requirement": "def replace_specialchar(text: str) -> str:\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"", "entry_point": "replace_specialchar", "canonical_solution": "import re\ndef replace_specialchar(text):\n return re.sub(\"[ ,.]\", \":\", text)", "input_output_examples": "[[['Python language, Programming language.']], [['Python:language::Programming:language:']]]", "starter_code": "def replace_specialchar(text: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Python language, Programming language.'], ['Hello, world.'], ['This is a test, with some spaces. And dots.'], ['NoSpecialCharactersHere'], [' , . , . '], [''], [' '], [','], ['.'], ['Hello,world.']]", "qwen2.5-coder-32b-instruct": "[['Python language, Programming language.'], ['Hello, world!'], ['NoSpecialCharsHere'], ['Spaces    and    tabs'], ['Multiple,,,commas,,in,a,row'], ['Trailing dot.'], ['.Starting with dot'], ['...'], ['     '], ['']]", "gpt-4o-mini": "[['Hello, world.'], ['This is a test.'], ['Sample text, with some, special characters.'], ['Multiple  spaces    and, punctuation.'], ['No special characters here!'], [' , . ,    '], ['']]"}}
{"task_id": "Mbpp/733", "requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"", "entry_point": "find_first_occurrence", "canonical_solution": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "input_output_examples": "[[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5]], [[1]]]", "starter_code": "from typing import List\ndef find_first_occurrence(A: List[int], x: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 6], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[], 1], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 2], [[1, 3, 5, 7, 9], 9]]", "qwen2.5-coder-32b-instruct": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 3, 4, 5], 3], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 6], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 1], [[1, 3, 5, 7, 9], 9], [[1, 3, 5, 7, 9], 0], [[1, 3, 5, 7, 9], 10], [[1], 1], [[1], 2], [[], 1]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[1, 2, 2, 3, 4], 2], [[1, 1, 1, 1, 1], 1], [[], 5], [[5, 5, 5, 5, 5], 7], [[10, 20, 30, 40, 50], 10], [[1, 2, 3, 4, 5], 6], [[2, 2, 2, 2, 2], 2]]"}}
{"task_id": "Mbpp/734", "requirement": "from typing import List\n\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \n\"\"\"", "entry_point": "sum_Of_Subarray_Prod", "canonical_solution": "def sum_Of_Subarray_Prod(arr):\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result", "input_output_examples": "[[[[1, 2, 3]]], [[20]]]", "starter_code": "from typing import List\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[0, 1, 2]], [[-1, 2, 3]], [[1]], [[]], [[1, -1, 1, -1, 1]], [[10, 20, 30]], [[1, 1, 1, 1]], [[2, -3, 4, -5]], [[0, 0, 0]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[4, 5, 6]], [[1, 1, 1]], [[0, 0, 0]], [[10]], [[]], [[1, -1, 2, -2]], [[100, 200, 300]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[0, 1, 2]], [[1, -1, 2]], [[-2, -1, 0, 1]], [[-5, 4, 3, 2]], [[1, 2, 3, 4, 5]], [[0]], [[]]]"}}
{"task_id": "Mbpp/735", "requirement": "def toggle_middle_bits(n: int) -> int:\n\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \n\"\"\"", "entry_point": "toggle_middle_bits", "canonical_solution": "def toggle_middle_bits(n): \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)", "input_output_examples": "[[[9]], [[15]]]", "starter_code": "def toggle_middle_bits(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[9], [5], [2], [15], [0], [1], [255], [10]]", "qwen2.5-coder-32b-instruct": "[[9], [0], [1], [2], [3], [4], [5], [15], [16], [31], [32], [63], [64], [127], [128], [255], [256]]", "gpt-4o-mini": "[[5], [10], [0], [1], [3], [255], [16], [32]]"}}
{"task_id": "Mbpp/736", "requirement": "from typing import List\n\n\ndef left_insertion(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\n\"\"\"", "entry_point": "left_insertion", "canonical_solution": "import bisect\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)", "input_output_examples": "[[[[1, 2, 4, 5], 6]], [[4]]]", "starter_code": "from typing import List\ndef left_insertion(a: List[int], x: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 4, 5], 6], [[1, 3, 5, 7], 4], [[10, 20, 30, 40], 5], [[1, 1, 1, 1], 1], [[], 10], [[5, 10, 15, 20], 15], [[1, 3, 5, 7], 0], [[2, 4, 6, 8], 9], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 0], [[1, 2, 4, 5], 1], [[1, 2, 4, 5], 5], [[1, 1, 1, 1], 1], [[1, 3, 5, 7], 8], [[1, 3, 5, 7], -1], [[1, 3, 5, 7], 5], [[1, 3, 5, 7], 2]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 6], [[1, 1, 1, 1, 1], 1], [[], 5], [[2, 2, 2, 2], 3], [[10, 20, 30, 40, 50], 25], [[5, 10, 15, 20], 5], [[5, 10, 15, 20], 12], [[-5, -3, -1, 0, 2], -4], [[-5, -3, -1, 0, 2], -5]]"}}
{"task_id": "Mbpp/737", "requirement": "def check_str(s: str) -> bool:\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n\"\"\"", "entry_point": "check_str", "canonical_solution": "import re \ndef check_str(string): \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)", "input_output_examples": "[[['annie']], [[True]]]", "starter_code": "def check_str(s: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['annie'], ['apple'], ['banana'], ['Orange'], ['umbrella'], ['Elephant'], ['123apple'], [''], ['@apple'], ['UPPERCASE'], ['lowercase'], ['MiXeDcAsE']]", "qwen2.5-coder-32b-instruct": "[['annie'], ['Eagle'], ['umbrella'], ['Orange'], ['sky'], ['bcd'], ['AEIOU'], ['aeiou'], [''], ['123abc'], ['!@#apple']]", "gpt-4o-mini": "[['apple'], ['banana'], ['Orange'], ['grape'], ['umbrella'], ['1cherry'], ['AEIOU'], [''], ['bicycle'], ['   apple'], ['A word with spaces at the start'], ['xenia']]"}}
{"task_id": "Mbpp/739", "requirement": "def find_Index(n: int) -> int:\n\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \n\"\"\"", "entry_point": "find_Index", "canonical_solution": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "input_output_examples": "[[[2]], [[4]]]", "starter_code": "def find_Index(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [50]]", "qwen2.5-coder-32b-instruct": "[[2], [1], [3], [4], [5], [6], [7], [8], [9], [10], [0], [-1]]", "gpt-4o-mini": "[[1], [2], [3], [10], [100], [1000], [50], [5], [15], [0]]"}}
{"task_id": "Mbpp/740", "requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \n\"\"\"", "entry_point": "tuple_to_dict", "canonical_solution": "def tuple_to_dict(test_tup):\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))", "input_output_examples": "[[[(1, 5, 7, 10, 13, 5)]], [[{1: 5, 7: 10, 13: 5}]]]", "starter_code": "from typing import Dict\nfrom typing import Tuple\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 5, 7, 10, 13, 5)], [(2, 4, 6, 8)], [(1,)], [()], [('a', 'b', 'c', 'd')], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(True, False, True, False)], [(1.1, 2.2, 3.3, 4.4)], [(1, 2, 3, 4, 5, 6, 7, 8, 9)], [(None, 'value', 123, 'abc')]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, 10, 13, 5)], [(2, 'a', 3, 'b')], [('key1', 'value1', 'key2', 'value2')], [(1,)], [(1, 2, 3)], [(True, False, True, False)], [(None, 'value', None, 'value')], [(1.1, 2.2, 3.3, 4.4)], [()]]", "gpt-4o-mini": "[[(1, 'one', 2, 'two')], [(True, 'yes', False, 'no')], [(1, 2, 3, 4)], [(1, 'one', 2, 'two', 3, 'three')], [(None, 'null', 0, 'zero')], [(1, 2)], [((1, 2, 3), 'tuple')], [(1,)], [(1, 'single')]]"}}
{"task_id": "Mbpp/741", "requirement": "def all_Characters_Same(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\n\"\"\"", "entry_point": "all_Characters_Same", "canonical_solution": "def all_Characters_Same(s) :\n    return all(ch == s[0] for ch in s[1:])", "input_output_examples": "[[['python']], [[False]]]", "starter_code": "def all_Characters_Same(s: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['aaaaa'], ['abcde'], ['a'], [''], ['AAAAA'], ['aaaaA'], ['11111'], ['  '], ['\\t\\t\\t'], ['\\n\\n\\n']]", "qwen2.5-coder-32b-instruct": "[['python'], ['aaaaa'], ['AaAaA'], [''], [' '], ['1111'], ['12345'], ['a']]", "gpt-4o-mini": "[['aaaa'], ['bbb'], ['cccccc'], ['a'], [''], ['abc'], ['1111'], ['!@#$%^&*()'], ['   '], ['AaAa']]"}}
{"task_id": "Mbpp/742", "requirement": "def area_tetrahedron(side: float) -> float:\n\"\"\"\nWrite a function to calculate the area of a tetrahedron.\n\"\"\"", "entry_point": "area_tetrahedron", "canonical_solution": "import math\ndef area_tetrahedron(side):\n  return math.sqrt(3)*(side*side)", "input_output_examples": "[[[3]], [[15.588457268119894]]]", "starter_code": "def area_tetrahedron(side: float) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[3.0], [1.0], [0.0], [-1.0], [5.5], [10.0]]", "qwen2.5-coder-32b-instruct": "[[3], [0], [1], [10], [1.5], [-1], [-5.5]]", "gpt-4o-mini": "[[1.0], [2.5], [0.0], [-1.0], [10.5], [3.14159], [100.0]]"}}
{"task_id": "Mbpp/743", "requirement": "from typing import List\n\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\n\"\"\"", "entry_point": "rotate_right", "canonical_solution": "def rotate_right(l, m):\n  return l[-m:] + l[:-m]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3]], [[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]]]]", "starter_code": "from typing import List\ndef rotate_right(l: List[int], m: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 2], [[1], 1], [[], 3], [[1, 2, 3, 4, 5], 7], [[1, 2, 3, 4, 5], -1], [[1, 2, 3, 4, 5], 10]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 10], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 4], [[], 3], [[1], 1], [[1, 2], 2], [[1, 2, 3], 3]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30], 1], [[5], 3], [[1, 2, 3, 4, 5], 0], [[7, 8, 9], 3], [[1, 2, 3, 4, 5], 5], [[1, 2], 1], [[1, 2, 3, 4, 5], 7]]"}}
{"task_id": "Mbpp/744", "requirement": "from typing import Tuple\n\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n\"\"\"\nWrite a function to check if the given tuple has any none value or not.\n\"\"\"", "entry_point": "check_none", "canonical_solution": "def check_none(test_tup):\n  return any(ele is None for ele in test_tup)", "input_output_examples": "[[[(10, 4, 5, 6, None)]], [[True]]]", "starter_code": "from typing import Tuple\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 5, 6, None)], [(1, 2, 3, 4, 5)], [(None, None, None)], [(0, False, '', None)], [()], [(None,)], [('Hello', 123, None, [1, 2, 3])]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 5, 6, None)], [(10, 4, 5, 6)], [(None,)], [(1, 2, 3, 'a', 'b', 'c')], [(1, 2, None, 'a', 'b', 'c')], [(True, False, None)], [(True, False, 1, 0)], [((),)], [((1, 2), (3, 4), None)]]", "gpt-4o-mini": "[[(None,)], [((1, 2, 3),)], [((None, 1),)], [((None, None),)], [((1, 2, None),)], [((10, 20, 30),)], [((None,),)], [((),)]]"}}
{"task_id": "Mbpp/745", "requirement": "from typing import List\n\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\"\"\"\nWrite a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\"\"\"", "entry_point": "divisible_by_digits", "canonical_solution": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "input_output_examples": "[[[1, 22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]", "starter_code": "from typing import List\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[1, 22], [10, 20], [100, 120], [1, 1], [1000, 1005], [0, 10], [-10, 10], [100, 100]]", "qwen2.5-coder-32b-instruct": "[[1, 22], [0, 10], [5, 5], [10, 100], [99, 100], [123, 125], [0, 0], [-10, 10]]", "gpt-4o-mini": "[[10, 20], [1, 100], [21, 30], [100, 110], [0, 10], [-10, 10], [11, 11], [12, 12], [102, 105], [90, 100]]"}}
{"task_id": "Mbpp/748", "requirement": "def capital_words_spaces(str1: str) -> str:\n\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\n\"\"\"", "entry_point": "capital_words_spaces", "canonical_solution": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "input_output_examples": "[[['Python']], [['Python']]]", "starter_code": "def capital_words_spaces(str1: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['Python'], ['HelloWorld'], ['ThisIsATest'], ['NoSpacesHere'], ['Already Spaced'], ['lowercase'], ['Multiple   Spaces'], [''], ['CamelCaseWithNumbers123'], ['Single'], ['CAPITAL']]", "qwen2.5-coder-32b-instruct": "[['Python'], ['PythonIsFun'], ['thisIsATestString'], ['OneTwoThreeFour'], ['aBCDeFGHiJKL'], ['AlreadySpaced Out'], ['Singleword'], [''], ['ALLCAPITALS'], ['noCapitalLettersHere']]", "gpt-4o-mini": "[['ThisIsAString'], ['AnotherExampleHere'], ['NoCapitalLetters'], ['OneMoreTestCase'], ['MixedCASEandlowercase'], ['A1B2C3D4E5F6G'], ['MultipleWordsLikeThis'], [''], ['OnlyOneCapital'], ['CAPITALWORD']]"}}
{"task_id": "Mbpp/749", "requirement": "from typing import List\n\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\n\"\"\"", "entry_point": "sort_numeric_strings", "canonical_solution": "def sort_numeric_strings(nums_str):\n    return sorted([int(x) for x in nums_str])", "input_output_examples": "[[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']]], [[[-500, -12, 0, 4, 7, 12, 45, 100, 200]]]]", "starter_code": "from typing import List\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']], [['1', '2', '3', '4', '5']], [['-1', '-2', '-3', '-4', '-5']], [['0', '0', '0', '0']], [['999', '1000', '1001', '998']], [['-999', '-1000', '-1001', '-998']], [['1', '10', '100', '1000']], [['-1', '-10', '-100', '-1000']], [[]], [['42']], [['-42']], [['0', '-0', '+0']], [['001', '010', '100']], [['-001', '-010', '-100']]]", "qwen2.5-coder-32b-instruct": "[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']], [['1', '2', '3', '4', '5']], [['-1', '-2', '-3', '-4', '-5']], [['10', '20', '30', '40', '50']], [['100', '200', '300', '400', '500']], [['0', '0', '0', '0', '0']], [[]], [['-1', '0', '1']], [['9', '8', '7', '6', '5', '4', '3', '2', '1', '0']]]", "gpt-4o-mini": "[[['10', '2', '33', '4', '5']], [['1', '1', '2', '2', '3']], [['10', '20', '30']], [['-5', '2', '0', '-1', '3']], [['-100', '20', '0', '100', '-50']], [['3.5', '2.1', '3.0', '5.8']], [['100', '99', '1', '10', '50']], [['a', 'b', 'c']], [['1e2', '10', '1000']], [['0', '0', '0']]]"}}
{"task_id": "Mbpp/750", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n\"\"\"\nWrite a function to add the given tuple to the given list.\n\"\"\"", "entry_point": "add_tuple", "canonical_solution": "def add_tuple(test_list, test_tup):\n  return test_list + list(test_tup)", "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[[5, 6, 7, 9, 10]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], (4, 5)], [[], (1, 2, 3)], [['a', 'b'], ('c', 'd', 'e')], [[1.1, 2.2], (3.3, 4.4)], [[True, False], (True,)], [[1, 'a', 2.2], ('b', 3, True)], [[[1, 2], [3, 4]], ((5, 6),)], [[None], (None,)]]", "qwen2.5-coder-32b-instruct": "[[[5, 6, 7], (9, 10)], [[], (1, 2, 3)], [[1, 2, 3], ()], [['a', 'b'], ('c', 'd')], [[1.1, 2.2], (3.3, 4.4)], [[True, False], (True, True)], [[None], (None, None)], [[{'key': 'value'}], ({'another_key': 'another_value'},)], [[1, 2, 3], (4,)]]", "gpt-4o-mini": "[[[1, 2, 3], (4, 5)], [[], (1,)], [[1, 2], (3, 4, 5)], [['a', 'b', 'c'], ('d',)], [[None], (1,)], [[1.5, 2.5], (3.5, 4.5)], [[], ()], [[1, 2], (3,)], [[1, 2, 3], (2,)]]"}}
{"task_id": "Mbpp/751", "requirement": "from typing import List\n\n\ndef check_min_heap(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check if the given array represents min heap or not.\n\"\"\"", "entry_point": "check_min_heap", "canonical_solution": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6]]], [[True]]]", "starter_code": "from typing import List\ndef check_min_heap(arr: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6]], [[1]], [[1, 2, 2, 3, 3, 3]], [[1, 3, 2, 5, 6, 7]], [[]], [[5, 2, 3, 1, 4, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6]], [[10, 15, 14, 25, 30]], [[1]], [[]], [[2, 3, 4, 5, 6, 7, 8]], [[1, 3, 5, 7, 9, 11, 13, 15]], [[1, 3, 2]], [[1, 2, 3, 4, 5, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 2, 4, 5, 6]]]", "gpt-4o-mini": "[[[1, 3, 2, 7, 6, 5, 4]], [[10, 15, 20, 30, 25]], [[5, 10]], [[1]], [[]], [[2, 1]], [[2, 3, 4, 5, 6, 7, 8, 9]], [[6, 5, 7, 8]]]"}}
{"task_id": "Mbpp/752", "requirement": "def jacobsthal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth jacobsthal number.\n\"\"\"", "entry_point": "jacobsthal_num", "canonical_solution": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "input_output_examples": "[[[5]], [[11]]]", "starter_code": "def jacobsthal_num(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [5], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [5], [10], [15], [-1], [-5]]", "gpt-4o-mini": "[[0], [1], [2], [3], [4], [5], [10], [15], [20], [30]]"}}
{"task_id": "Mbpp/753", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n\"\"\"\nWrite a function to find minimum k records from tuple list.\n\"\"\"", "entry_point": "min_k", "canonical_solution": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)", "input_output_examples": "[[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2]], [[[('Akash', 2), ('Akshat', 4)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:", "llm_generated_inputs": {"deepseek-v3": "[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2], [[('Alice', 5), ('Bob', 3), ('Charlie', 7), ('David', 1)], 1], [[('Eva', 9), ('Frank', 6), ('Grace', 4), ('Hank', 8)], 3], [[('Ivy', 2), ('Jack', 2), ('Kara', 2), ('Leo', 2)], 4], [[('Mia', 10)], 1], [[('Nina', 3), ('Oscar', 5)], 0], [[('Paul', 7), ('Quinn', 6), ('Ryan', 5), ('Sam', 4), ('Tina', 3)], 5]]", "qwen2.5-coder-32b-instruct": "[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2], [[('Alice', 5), ('Bob', 3), ('Charlie', 9)], 1], [[('X', 100), ('Y', 200), ('Z', 50)], 3], [[('A', 1)], 1], [[('A', 1), ('B', 1)], 2], [[('One', 10), ('Two', 20), ('Three', 30), ('Four', 40), ('Five', 50)], 0], [[('One', 10), ('Two', 20), ('Three', 30), ('Four', 40), ('Five', 50)], 5], [[('One', 10), ('Two', 10), ('Three', 10)], 2]]", "gpt-4o-mini": "[[[(1, 2), (3, 4), (5, 6)], 2], [[(10, 20), (30, 40), (50, 60)], 1], [[(7, 8), (9, 10), (11, 12), (13, 14)], 3], [[], 0], [[(1, 2)], 0], [[(1, 2), (3, 4), (5, 6)], 5], [[(10, 20)], 1]]"}}
{"task_id": "Mbpp/754", "requirement": "from typing import List\n\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\"\"\"", "entry_point": "extract_index_list", "canonical_solution": "def extract_index_list(l1, l2, l3):\n    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]", "input_output_examples": "[[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], [[[1, 7]]]]", "starter_code": "from typing import List\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1], [1], [1]], [[], [], []], [[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]], [[10, 20, 30], [10, 20, 30], [10, 20, 30]], [[1, 2, 3], [1, 2, 3], [3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 2, 3], [1, 2, 2, 3], [1, 2, 2, 3]], [[1], [1], [1]], [[1, 2, 3], [1, 2], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2]], [[1, 2, 3], [], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], []], [[], [], []]]", "gpt-4o-mini": "[[[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[4, 5, 6], [4, 5, 7], [4, 5, 8]], [[7, 8, 9], [7, 8, 9], [0, 8, 9]], [[10, 11, 12], [10, 12, 11], [10, 11, 13]], [[13, 14], [13, 14], [13, 14]], [[15], [15], [15]], [[], [], []], [[16, 17, 18], [16, 20, 18], [16, 21, 22]], [[19], [], [19]], [[20], [21], [22]]]"}}
{"task_id": "Mbpp/755", "requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"", "entry_point": "second_smallest", "canonical_solution": "def second_smallest(numbers):\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]", "input_output_examples": "[[[[1, 2, -8, -2, 0, -2]]], [[-2]]]", "starter_code": "from typing import List\ndef second_smallest(numbers: List[int]) -> Optional[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, -8, -2, 0, -2]], [[5]], [[]], [[1, 1, 1, 1, 1]], [[10, 2, 5, 3, 8]], [[-10, -5, -20, -15]], [[0, 0, 0, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, -8, -2, 0, -2]], [[5, 5, 5, 5]], [[10]], [[]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[0, 0, 0, 0, 0, 1]], [[100, 200]], [[1, 1, 2, 2, 3, 3]]]", "gpt-4o-mini": "[[[2, 3, 1, 4]], [[7, 4, 6, 5, 1, 2]], [[5, 5, 5, 5]], [[-1, -2, -3, -4]], [[0]], [[10, 10, 9]], [[1, 1, 2, 3]], [[3, 1, 2, 2, 2]], [[8, 7, 8, 9, 10, 7]], [[-1, 0, 1, 2]]]"}}
{"task_id": "Mbpp/757", "requirement": "from typing import List\n\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\n\"\"\"", "entry_point": "count_reverse_pairs", "canonical_solution": "def count_reverse_pairs(test_list):\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))", "input_output_examples": "[[[['julia', 'best', 'tseb', 'for', 'ailuj']]], [[2]]]", "starter_code": "from typing import List\ndef count_reverse_pairs(test_list: List[str]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[['julia', 'best', 'tseb', 'for', 'ailuj']], [['hello', 'world', 'dlrow', 'olleh']], [['abc', 'def', 'ghi']], [[]], [['racecar', 'racecar']], [['abc', 'cba', 'xyz', 'zyx']], [['a', 'b', 'c', 'd', 'e']], [['123', '321', '456', '654']], [['', '']]]", "qwen2.5-coder-32b-instruct": "[[['julia', 'best', 'tseb', 'for', 'ailuj']], [['abc', 'cba', 'xyz', 'zyx', 'mno']], [['abcd', 'dcba', 'efgh', 'gfed', 'ijkl']], [['a', 'a', 'b', 'b', 'c', 'c']], [['hello', 'world', 'dlrow', 'python', 'nohtyp']], [[]], [['single']], [['ab', 'ba', 'cd', 'dc', 'ef', 'fe', 'gh', 'hg']]]", "gpt-4o-mini": "[[['abc', 'cba', 'xyz', 'zyx', 'hello']], [['a', 'b', 'a', 'b', 'A', 'a']], [['abcd', 'dcba', 'abab', 'baba', 'aaa', 'aaa']], [['one', 'two', 'three']], [['', '']], [['onlyOneString']], [['racecar', 'racecar', 'civic', 'abc', 'civic']], [['a', 'a', 'b', 'b', 'a', 'b', 'a', 'b']]]"}}
{"task_id": "Mbpp/758", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\"\"\"", "entry_point": "unique_sublists", "canonical_solution": "def unique_sublists(list1):\n    return {tuple(x): list1.count(x) for x in list1}", "input_output_examples": "[[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]], [[{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[]], [[[1], [1], [1], [2], [2]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1, 2, 3]]], [[[10], [20], [30], [10], [20], [30], [40]]], [[[1, 1], [2, 2], [1, 1], [3, 3], [2, 2]]], [[[], [], [1], [1], []]], [[[1, 2], [2, 1], [1, 2], [2, 1], [3, 4]]], [[[-1, -2], [-1, -2], [0, 0], [0, 0], [1, 2]]], [[[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3], [1, 2, 3]]], [[[10, 20], [30, 40], [50, 60]]], [[]], [[[1]]], [[[1, 1], [1, 1], [1, 1]]], [[[1, 2], [2, 1], [1, 2]]], [[[1, 2, 3], [3, 2, 1], [1, 2, 3]]], [[[1, 2], [1, 2], [2, 1], [2, 1]]]]", "gpt-4o-mini": "[[[[], []]], [[[1, 2], [1, 2], [1, 2]]], [[[1, 2], [2, 1], [1, 2]]], [[[3, 4], [5, 6], [3, 4], [3, 4]]], [[[1], [2], [3], [4]]], [[[1, 2, 3], [1, 2], [1, 2], [1, 2, 3], [3]]], [[[1, 2, 3], [], [1, 2, 3], [], [1]]], [[[0, 0], [0, 0, 0], [0], [0, 0]]], [[[1, 2], [3, 4], [1, 2], [3, 4], [5]]]]"}}
{"task_id": "Mbpp/759", "requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\"\"\"", "entry_point": "is_decimal", "canonical_solution": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None", "input_output_examples": "[[['123.11']], [[True]]]", "starter_code": "def is_decimal(num: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['123.45'], ['0.00'], ['0.0'], ['123'], ['123.456'], ['.12'], ['12.'], ['-123.45'], ['abc.12'], ['12.abc'], [''], ['123.45.67'], ['123,45']]", "qwen2.5-coder-32b-instruct": "[['123.11'], ['0.99'], ['-123.45'], ['123.'], ['.11'], ['123.123'], ['abc.def'], ['123'], ['-0.99'], ['0.00'], ['1000.00'], ['-0.01'], ['123.00'], ['123.01'], ['123.1'], ['123.11a'], ['a123.11']]", "gpt-4o-mini": "[['123.45'], ['0.01'], ['-123.45'], ['123'], ['12.345'], ['abc.12'], ['12.3'], ['12.3456'], ['-0.99'], ['-.99'], ['0.00'], [''], ['123.'], ['.45']]"}}
{"task_id": "Mbpp/760", "requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\"\"\"", "entry_point": "unique_Element", "canonical_solution": "def unique_Element(arr):\n    return arr.count(arr[0]) == len(arr)", "input_output_examples": "[[[[1, 1, 1]]], [[True]]]", "starter_code": "from typing import List\ndef unique_Element(arr: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[5]], [[9, 9, 9, 9, 9, 9]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[7, 7, 8, 8]], [[10, 10, 10, 11]], [[]], [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[3]], [[1, 2, 3]], [[10, 10, 20]], [[]], [[5, 5, 5, 5, 5, 5]], [[7, 8]]]", "gpt-4o-mini": "[[[1, 1, 1, 1]], [[2, 2, 2, 2, 2]], [[3]], [[4, 4, 4, 5]], [[1, 2, 3, 4]], [[0, 0, 0]], [[-1, -1, -1]], [[-1, -1, 0]], [[5, 5, 5, 5, 5, 6]], [[-2, -2, -2, -2]]]"}}
{"task_id": "Mbpp/762", "requirement": "def check_monthnumber_number(month_number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n\n\"\"\"", "entry_point": "check_monthnumber_number", "canonical_solution": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "input_output_examples": "[[[6]], [[True]]]", "starter_code": "def check_monthnumber_number(month_number: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[6], [4], [9], [11], [1], [2], [7], [12], [0], [13]]", "qwen2.5-coder-32b-instruct": "[[4], [6], [9], [11], [1], [2], [3], [5], [7], [8], [10], [12], [0], [13], [-1]]", "gpt-4o-mini": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [13]]"}}
{"task_id": "Mbpp/763", "requirement": "from typing import List\n\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \n\"\"\"", "entry_point": "find_min_diff", "canonical_solution": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6]], [[1]]]", "starter_code": "from typing import List\ndef find_min_diff(arr: List[int], n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 5, 3, 19, 18, 25], 6], [[10, 20, 30, 40, 50], 5], [[100, 50, 200, 150], 4], [[1, 1, 1, 1], 4], [[2], 1], [[-1, 0, 1, 2], 4], [[100, 50, 200, 150, 300, 600], 6], [[1, 3, 6, 10, 15, 21, 28, 36, 45, 55], 10]]", "qwen2.5-coder-32b-instruct": "[[[1, 5, 3, 19, 18, 25], 6], [[4, 9, 1, 32, 13], 5], [[7, 7, 8, 8], 4], [[100, 500, 300, 100, 400], 5], [[1, 1, 1, 1], 4], [[10], 1], [[1, 1000000], 2]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 5], [[10, 22, 35, 5, 2], 5], [[5], 1], [[], 0], [[100, 90, 80, 70, 60], 5], [[1, -1, 0, 3, 4], 5], [[1, 2, 3, 4, 100], 5]]"}}
{"task_id": "Mbpp/764", "requirement": "def number_ctr(s: str) -> int:\n\"\"\"\nWrite a python function to count number of digits in a given string.\n\"\"\"", "entry_point": "number_ctr", "canonical_solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)", "input_output_examples": "[[['program2bedone']], [[1]]]", "starter_code": "def number_ctr(s: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['program2bedone'], ['12345'], ['noDigitsHere'], ['mixed123with456letters'], [''], ['00000'], ['special!@#characters123'], ['     spaces   and   digits   123   '], ['1'], ['a1b2c3d4e5f6g7h8i9j0']]", "qwen2.5-coder-32b-instruct": "[['program2bedone'], ['1234567890'], ['no_digits_here!'], ['1a2b3c4d5e6f7g8h9i0j'], [''], ['0'], ['a1b2c3!@#']]", "gpt-4o-mini": "[['abc123'], ['aaa111bbb222'], ['no digits here'], ['1234567890'], ['mixed123and456text'], [''], ['1a2b3c4d5e6f'], ['!@#$%^&*()_+123']]"}}
{"task_id": "Mbpp/765", "requirement": "def is_polite(n: int) -> int:\n\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\"\"\"", "entry_point": "is_polite", "canonical_solution": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2)))", "input_output_examples": "[[[7]], [[11]]]", "starter_code": "def is_polite(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [5], [7], [10], [15], [20], [100], [0], [-1]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [20], [25], [30], [31], [32], [50], [100], [1000]]", "gpt-4o-mini": "[[1], [2], [10], [15], [100], [500], [1000], [5], [3], [4]]"}}
{"task_id": "Mbpp/766", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\n\"\"\"", "entry_point": "pair_wise", "canonical_solution": "def pair_wise(l1):\n    return list(zip(l1, l1[1:]))", "input_output_examples": "[[[[1, 1, 2, 3, 3, 4, 4, 5]]], [[[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4]], [[1]], [[]], [[5, 5, 5, 5]], [[10, 20, 30, 40, 50]], [[-1, 0, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[100, 200]], [[0, 0, 0, 0, 0]], [[-5, -4, -3, -2, -1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 2, 3, 3, 4, 4, 5]], [[1, 2, 3, 4, 5]], [[10, 20, 30]], [[5]], [[]], [[1, 1, 1, 1]], [[1, 2]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[5, 10, 15, 20]], [[0]], [[]], [[1]], [[1, 2]], [[3, 2, 1]], [[10, 20, 30, 40, 50, 60]], [[7, 8, 9, 10, 11, 12, 13]]]"}}
{"task_id": "Mbpp/767", "requirement": "from typing import List\n\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The function gets as input a list of numbers and the sum.\n\"\"\"", "entry_point": "get_pairs_count", "canonical_solution": "def get_pairs_count(arr, sum_):\n    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2", "input_output_examples": "[[[[1, 1, 1, 1], 2]], [[6]]]", "starter_code": "from typing import List\ndef get_pairs_count(arr: List[int], sum_: int) -> float:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 1, 1], 2], [[1, 2, 3, 4, 5], 5], [[0, 0, 0, 0], 0], [[-1, 1, -2, 2], 0], [[1], 1], [[], 0], [[10, 12, 10, 15, -1, 7, 6, 5, 4, 2], 11], [[1, 5, 7, -1], 6], [[1, 5, 7, -1, 5], 6], [[1, 1, 2, 2, 3, 3], 4]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 1, 1], 2], [[1, 5, 7, -1], 6], [[10, 12, 10, 15, -1, 7, 6, 5, 4, 2, 1, 1, 1], 11], [[0, 0, 0, 0], 0], [[1, 2, 3, 4, 5], 10], [[1, 2, 3, 4, 5], 9], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 1], [[], 0], [[1], 1]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 10], [[0, 0, 0, 0], 0], [[1, -1, 2, -2], 0], [[], 5], [[1, 2, 3, 4, 4, 5], 8], [[2, 2, 3, 3, 4, 3], 6], [[10, 20, 10, 30, 40, 10], 20], [[1, 2, 3], 6]]"}}
{"task_id": "Mbpp/769", "requirement": "from typing import List\n\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to get the difference between two lists.\n\"\"\"", "entry_point": "Diff", "canonical_solution": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))", "input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]]], [[[10, 20, 30, 15]]]]", "starter_code": "from typing import List\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[1, 2, 3, 4, 5], [2, 3]], [[1, 2, 3], []], [[], [1, 2, 3]], [[5, 5, 5], [5]], [[10, 20, 30], [40, 50, 60]], [[1, 2, 3], [1, 2, 3]], [[100, 200, 300], [100, 200, 300, 400]], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [[10, 20, 30, 40], [20, 30, 40, 50]]]", "qwen2.5-coder-32b-instruct": "[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8]], [[1, 2, 3], [1, 2, 3]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 1, 1, 1], [1, 1]], [[1, 2, 2, 3], [2, 2]]]", "gpt-4o-mini": "[[[1, 2, 3], [2, 3, 4]], [[1, 2, 3, 4], [1, 2]], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 1, 2, 2, 3], [2, 3]], [[5, 6, 7], [6, 7, 8]], [[1, 2, 3], [1, 2, 3]], [[10, 20, 30], [20, 40, 50]], [[7, 8, 9], [1, 2, 3]]]"}}
{"task_id": "Mbpp/770", "requirement": "def odd_num_sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"", "entry_point": "odd_num_sum", "canonical_solution": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm", "input_output_examples": "[[[2]], [[82]]]", "starter_code": "def odd_num_sum(n: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [4], [0], [10], [100], [-1], [-5]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [0], [-1], [10]]", "gpt-4o-mini": "[[1], [2], [3], [5], [10], [0], [-1]]"}}
{"task_id": "Mbpp/771", "requirement": "def check_expression(expression: str) -> bool:\n\"\"\"\nWrite a function to check if the given expression is balanced or not. \n\"\"\"", "entry_point": "check_expression", "canonical_solution": "from collections import deque\ndef check_expression(exp):\n    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "input_output_examples": "[[['{()}[{}]']], [[True]]]", "starter_code": "def check_expression(expression: str) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[['{()}[{}]'], ['{[()()]}'], ['{[()]}'], ['{[(])}'], ['{{{'], ['}}}}'], ['()'], ['[]'], ['{}'], ['[(){}]'], ['((()))'], ['((())'], ['((())}'], ['((())]'], ['([{}])'], ['([{})'], ['([{}))'], ['([{}])]'], ['([{}])}'], ['(){}[]']]", "qwen2.5-coder-32b-instruct": "[['{()}[{}]'], ['{[(])}'], ['{{[[(())]]}}'], ['()'], ['[]'], ['{}'], ['{[()]}'], ['({[()]})'], ['({[([{}])()]})'], ['{'], ['}'], ['['], [']'], ['('], [')'], [''], ['{([])}[]{}'], ['{([])}[{}]{'], ['(((((((((())))))))))'], ['[[[[[[[[]]]]]]]]'], ['{{{{{{{{}}}}}}}}']]", "gpt-4o-mini": "[['()'], ['([])'], ['{[()()]}'], ['(()())'], ['((()))'], ['(()'], [')(('], ['{{{}}}'], ['[{}[]]()'], ['['], [''], ['[()]{}']]"}}
{"task_id": "Mbpp/772", "requirement": "def remove_length(test_str: str, K: int) -> str:\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\n\"\"\"", "entry_point": "remove_length", "canonical_solution": "def remove_length(test_str, K):\n  return ' '.join([i for i in test_str.split() if len(i) != K])", "input_output_examples": "[[['The person is most value tet', 3]], [['person is most value']]]", "starter_code": "def remove_length(test_str: str, K: int) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['The person is most value tet', 3], ['Hello world this is a test', 1], ['Python programming is fun', 4], ['', 2], ['SingleWord', 5], ['Multiple spaces here', 6], ['123 456 789 0', 3], ['Special! characters@ here#', 5], ['Remove words with length ten', 10], ['No words to remove', 20]]", "qwen2.5-coder-32b-instruct": "[['The person is most value tet', 3], ['Hello world', 5], ['Python programming language', 6], ['A quick brown fox jumps over the lazy dog', 1], ['', 2], ['SingleWord', 0], ['Multiple    spaces here', 8], ['Equal equal equal', 5], ['Short long words', 4], ['One', 3]]", "gpt-4o-mini": "[['This is a test string for removing words', 2], ['Remove these words', 4], ['A quick brown fox jumps over the lazy dog', 3], ['Short long extra long', 4], ['Hello world', 5], ['One two three four five six', 3], ['', 1], ['Single', 6], ['This should be empty', 2], ['Python is great', 2]]"}}
{"task_id": "Mbpp/773", "requirement": "from typing import Tuple\n\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\"\"\"", "entry_point": "occurance_substring", "canonical_solution": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None", "input_output_examples": "[[['python programming, python language', 'python']], [[('python', 0, 6)]]]", "starter_code": "from typing import Tuple\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:", "llm_generated_inputs": {"deepseek-v3": "[['python programming, python language', 'python'], ['hello world', 'world'], ['hello world', 'hello'], ['hello world', 'earth'], ['the quick brown fox jumps over the lazy dog', 'the'], ['the quick brown fox jumps over the lazy dog', 'fox'], ['the quick brown fox jumps over the lazy dog', 'cat'], ['repeated repeated repeated', 'repeated'], ['case sensitive', 'Case'], ['', 'empty'], ['empty', ''], ['', ''], ['special characters !@#$%^&*()', '!@#$%^&*()'], ['unicode characters 😊🌍', '😊🌍'], ['unicode characters 😊🌍', '🌍'], ['unicode characters 😊🌍', '😊'], ['unicode characters 😊🌍', '🚀'], ['multiple spaces   in   text', 'in'], ['multiple spaces   in   text', '   '], ['leading spaces', 'leading'], ['trailing spaces', 'spaces']]", "qwen2.5-coder-32b-instruct": "[['python programming, python language', 'python'], ['hello world', 'world'], ['hello world', 'hello'], ['hello world', 'test'], ['aaaaaa', 'aa'], ['', 'test'], ['test', ''], ['', ''], ['abcde', 'f'], ['abcde', 'abcde'], ['abcde', 'abcd'], ['abcde', 'bc']]", "gpt-4o-mini": "[['hello world', 'lo'], ['banana', 'ana'], ['aaaaaa', 'aa'], ['abcd', 'e'], ['test testing', 'test'], ['', 'a'], ['nonempty', ''], ['abcabcabc', 'abc'], ['Case Sensitivity', 'sensitivity'], ['abc def ghi', 'xyz']]"}}
{"task_id": "Mbpp/775", "requirement": "from typing import List\n\n\ndef odd_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n\"\"\"", "entry_point": "odd_position", "canonical_solution": "def odd_position(nums):\n\treturn all(n % 2 == 1 for n in nums[1::2])", "input_output_examples": "[[[[2, 1, 4, 3, 6, 7, 6, 3]]], [[True]]]", "starter_code": "from typing import List\ndef odd_position(nums: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[2, 1, 4, 3, 6, 7, 6, 3]], [[1, 2, 3, 4, 5, 6]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[1]], [[]], [[0, 1, 0, 1, 0, 1]], [[2, 2, 2, 2, 2, 2]], [[3, 3, 3, 3, 3, 3]], [[1, 2, 3, 2, 1, 2]]]", "qwen2.5-coder-32b-instruct": "[[[2, 1, 4, 3, 6, 7, 6, 3]], [[1, 3, 5, 7, 9, 11]], [[0, 2, 4, 6, 8, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[11, 13, 15, 17, 19, 21, 23, 25, 27, 29]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[1]], [[2]], [[]], [[1, 2]], [[2, 1]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[2, 1, 2, 1, 2]], [[1, 3, 5, 7, 9]], [[0, 2, 4, 6, 8]], [[1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2]], [[]], [[0]], [[3, 4, 5, 6, 7]], [[1, 0, 2, 0, 3]]]"}}
{"task_id": "Mbpp/777", "requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\n\"\"\"", "entry_point": "find_sum", "canonical_solution": "def find_sum(arr): \n    return sum(set(arr))", "input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]]], [[21]]]", "starter_code": "from typing import List\ndef find_sum(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[1, 2, 3, 1, 1, 4, 5, 6]], [[]], [[7, 7, 7, 7]], [[-1, 0, 1, -1, 2]], [[10]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 1, 1, 4, 5, 6]], [[10, 20, 30, 40, 50]], [[5, 5, 5, 5, 5]], [[]], [[1]], [[1, -1, 2, -2, 3, -3]], [[0, 0, 0, 0, 0]], [[100, 200, 300, 200, 100, 400]]]", "gpt-4o-mini": "[[[1, 2, 3, 4]], [[1, 1, 2, 3]], [[10, 10, 10, 5, 5, 5]], [[-1, -2, -3, 1, 2, 3]], [[1, 2, 3, 4, 4]], [[]], [[7]], [[1, 2, 2, 3, 3, 4, 5]]]"}}
{"task_id": "Mbpp/778", "requirement": "from typing import List\n\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"", "entry_point": "pack_consecutive_duplicates", "canonical_solution": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]", "input_output_examples": "[[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], [[[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]]]]", "starter_code": "from typing import List\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[1, 1, 1, 1]], [[1, 2, 3, 4]], [[]], [[5]], [[1, 1, 2, 2, 3, 3, 4, 4]], [[10, 10, 10, 20, 20, 30, 30, 30, 30]]]", "qwen2.5-coder-32b-instruct": "[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[]], [[1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]], [[1, 1, 2, 2, 2, 1, 1, 2, 2]]]", "gpt-4o-mini": "[[[1, 1, 2, 3, 3, 3, 4, 4, 4, 4]], [[1, 2, 2, 3, 3, 3, 1, 1]], [[5]], [[1, 2, 3, 4]], [[1, 1, 1, 1, 1]], [[]], [[1, 2, 1, 2, 1, 2]], [[2, 2, 2, 3, 4, 4, 4]], [[0, 0, 0, 0, 0, 0]], [[9, 9, 2, 2, 2, 3, 3]]]"}}
{"task_id": "Mbpp/780", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \n\"\"\"", "entry_point": "find_combinations", "canonical_solution": "from itertools import combinations \ndef find_combinations(test_list):\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]", "input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:", "llm_generated_inputs": {"deepseek-v3": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (1, 1)]], [[(0, 0), (0, 0), (0, 0)]], [[(10, 20), (30, 40)]], [[]], [[(3, 5)]], [[(-1, -2), (3, 4)]], [[(1000000, 2000000), (3000000, 4000000)]]]", "qwen2.5-coder-32b-instruct": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (2, 2), (3, 3)]], [[]], [[(10, 20)]], [[(-1, -2), (-3, -4)]], [[(0, 0), (0, 1), (1, 0)]]]", "gpt-4o-mini": "[[[]], [[(1, 2)]], [[(1, 2), (3, 4)]], [[(0, 0), (1, 1), (2, 2)]], [[(5, 3), (2, 6), (4, 8)]], [[(10, 20), (30, 40), (50, 60)]], [[(1, -1), (2, 2), (-2, 4)]], [[(7, 5), (0, 5), (1, -1), (3, -3)]], [[(100, 200), (150, 250), (300, 400)]]]"}}
{"task_id": "Mbpp/781", "requirement": "def count_divisors(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the count of divisors is even. \n\"\"\"", "entry_point": "count_divisors", "canonical_solution": "import math \ndef count_divisors(n) : \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0", "input_output_examples": "[[[10]], [[True]]]", "starter_code": "def count_divisors(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[10], [9], [1], [2], [16], [0], [-10]]", "qwen2.5-coder-32b-instruct": "[[10], [15], [25], [1], [0], [-5], [9], [16]]", "gpt-4o-mini": "[[1], [2], [3], [4], [6], [12], [15], [16], [25], [36], [100], [0], [-5], [100000]]"}}
{"task_id": "Mbpp/782", "requirement": "from typing import List\n\n\ndef odd_length_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \n\"\"\"", "entry_point": "odd_length_sum", "canonical_solution": "def odd_length_sum(arr):\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_", "input_output_examples": "[[[[1, 2, 4]]], [[14]]]", "starter_code": "from typing import List\ndef odd_length_sum(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 4]], [[1]], [[1, 2]], [[1, 2, 3, 4, 5]], [[10, 20, 30, 40, 50, 60, 70]], [[]], [[0, 0, 0, 0]], [[-1, -2, -3, -4, -5]], [[1, 3, 5, 7, 9, 11]], [[2, 4, 6, 8, 10]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4]], [[1, 4, 2, 5, 3]], [[10, 11, 12]], [[1]], [[]], [[7, 3, 5, 9]], [[2, 2, 2, 2, 2]]]", "gpt-4o-mini": "[[[1, 2, 3]], [[1, 2, 3, 4, 5]], [[1, 3, 5, 7]], [[2, 4, 6, 8, 10]], [[1]], [[]], [[5, 1, 3, 2, 4]], [[10, 20, 30]], [[1, 2]], [[1, 2, 3, 4]]]"}}
{"task_id": "Mbpp/784", "requirement": "from typing import List\n\n\ndef mul_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\n\"\"\"", "entry_point": "mul_even_odd", "canonical_solution": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[4]]]", "starter_code": "from typing import List\ndef mul_even_odd(list1: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8]], [[1, 3, 5, 7]], [[]], [[0, 1, 2, 3]], [[-1, -2, -3, -4]], [[10, 21, 30, 41]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[0, 2, 4, 6, 8]], [[1, 0, 3, 5, 7]], [[]], [[2]], [[3]], [[1, 2]], [[2, 1]]]", "gpt-4o-mini": "[[[2, 3, 4, 5, 6]], [[1, 2, 3, 4]], [[10, 22, 1, 3]], [[0, 5, 8, 11]], [[7, 1, 2, 3, 0]], [[1, 3, 5, 7]], [[2, 2, 2, 2]], [[8, 6, 4, 2]], [[3, 5, 10, 12]], [[-1, -2, -3, -4]], [[7]], [[]]]"}}
{"task_id": "Mbpp/785", "requirement": "def tuple_str_int(test_str: str) -> tuple:\n\"\"\"\nWrite a function to convert tuple string to integer tuple.\n\"\"\"", "entry_point": "tuple_str_int", "canonical_solution": "def tuple_str_int(test_str):\n  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))", "input_output_examples": "[[['(7, 8, 9)']], [[(7, 8, 9)]]]", "starter_code": "def tuple_str_int(test_str: str) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[['(7, 8, 9)'], ['(1, 2, 3, 4, 5)'], ['(0, 0, 0)'], ['(10, 20, 30)'], ['(-1, -2, -3)'], ['(1)'], ['()'], ['(  7, 8, 9 )'], ['(7, 8, 9, )'], ['(7, 8, 9, 10, 11, 12)']]", "qwen2.5-coder-32b-instruct": "[['(7, 8, 9)'], ['(1, 2, 3, 4, 5)'], ['(0, 0, 0)'], ['(-1, -2, -3)'], ['(100, 200, 300)'], ['(1)'], ['()'], ['(   1, 2 , 3   )'], ['(1,)'], ['(1, 2, three)']]", "gpt-4o-mini": "[['(1, 2, 3)'], ['(4, 5, 6)'], ['(0, -1, -2)'], ['(10, 20, 30)'], ['(100, -200, 300)'], ['(1,)'], ['(-1, -2, -3, -4, -5)'], ['(9, 8, 7, 6, 5, 4, 3, 2, 1)'], ['(5, 5, 5)'], ['(0)']]"}}
{"task_id": "Mbpp/786", "requirement": "def right_insertion(a: list, x: int) -> int:\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\n\"\"\"", "entry_point": "right_insertion", "canonical_solution": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "input_output_examples": "[[[[1, 2, 4, 5], 6]], [[4]]]", "starter_code": "def right_insertion(a: list, x: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 3, 5, 7], 0], [[1, 3, 5, 7], 4], [[1, 3, 5, 7], 8], [[], 5], [[1, 1, 1, 1], 1], [[1, 2, 2, 2, 3], 2], [[10, 20, 30, 40], 25], [[-5, -3, 0, 2], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 4], [[1, 2, 4, 5], 0], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 5], [[1, 2, 4, 5], 2], [[1, 2, 4, 5], 1], [[1, 1, 1, 1], 1], [[1, 1, 1, 1], 2], [[1, 1, 1, 1], 0]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 6], [[1, 2, 3, 3, 4], 3], [[], 5], [[2, 2, 2, 2], 2], [[10, 20, 30, 40], 25], [[5, 5, 5, 5, 6], 5], [[-10, -5, 0, 5, 10], -7], [[1], 1]]"}}
{"task_id": "Mbpp/787", "requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\n\"\"\"", "entry_point": "text_match_three", "canonical_solution": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "input_output_examples": "[[['ac']], [[None]]]", "starter_code": "def text_match_three(text: str) -> re.Match:", "llm_generated_inputs": {"deepseek-v3": "[['abbb'], ['aabbb'], ['abbbb'], ['ac'], ['abbc'], ['bbbb'], ['ababab'], ['a'], ['b'], ['']]", "qwen2.5-coder-32b-instruct": "[['ac'], ['abbb'], ['aabbb'], ['abb'], ['abbbb'], ['aabb'], ['bbaaa'], ['abababab'], ['bbbabbb'], ['aaaabbb'], [''], ['a'], ['b'], ['ab'], ['abbabbb']]", "gpt-4o-mini": "[['abbb'], ['aabbb'], ['abbbb'], ['ab'], ['ababab'], ['aaaabbb'], ['abbbh'], ['xaybbby'], ['abbbab'], ['abb']]"}}
{"task_id": "Mbpp/788", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\n\"\"\"", "entry_point": "new_tuple", "canonical_solution": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "input_output_examples": "[[[['WEB', 'is'], 'best']], [[('WEB', 'is', 'best')]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:", "llm_generated_inputs": {"deepseek-v3": "[[['WEB', 'is'], 'best'], [[], 'empty'], [['single'], 'element'], [['multiple', 'elements', 'in'], 'list'], [['mixed', 123, True], 'types'], [['nested', ['list', 'inside']], 'tuple'], [[None, ''], 'null']]", "qwen2.5-coder-32b-instruct": "[[['WEB', 'is'], 'best'], [[], 'single'], [['multiple', 'items'], ''], [['one'], 'two'], [[1, 2, 3], 4], [['a', 'b', 'c'], None], [[True, False], True], [[[], [1, 2]], [3, 4]]]", "gpt-4o-mini": "[[[1, 2, 3], 'abc'], [[], 'empty'], [[True, False], 'boolean'], [['first', 'second'], 'string'], [[None], 'null'], [[1.1, 2.2, 3.3], 'float'], [[1, 'two', 3.0], 'mixed']]"}}
{"task_id": "Mbpp/790", "requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"", "entry_point": "even_position", "canonical_solution": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "input_output_examples": "[[[[3, 2, 1]]], [[False]]]", "starter_code": "from typing import List\ndef even_position(nums: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[3, 2, 1]], [[2, 4, 6]], [[1, 3, 5]], [[0, 2, 4, 6]], [[1, 2, 3, 4, 5]], [[]], [[2]], [[1]], [[2, 3, 4, 5, 6]], [[3, 4, 5, 6, 7]]]", "qwen2.5-coder-32b-instruct": "[[[3, 2, 1]], [[0, 2, 4, 6, 8]], [[1, 3, 5, 7, 9]], [[2, 1, 4, 3, 6, 5]], [[0]], [[]], [[2, 3, 4, 5, 6, 7, 8, 9]], [[10, 11, 12, 13, 14, 15, 16, 17]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "gpt-4o-mini": "[[[2, 3, 4, 5]], [[2, 4, 6, 8]], [[1, 2, 3, 4, 5, 6]], [[0, 1, 2, 3, 4]], [[2, 2, 2, 2]], [[1, 3, 5, 7]], [[10, 1, 2, 3, 4]], [[]], [[2]], [[3, 4]]]"}}
{"task_id": "Mbpp/791", "requirement": "def remove_nested(test_tup: tuple) -> tuple:\n\"\"\"\nWrite a function to remove tuples from the given tuple.\n\n\n\"\"\"", "entry_point": "remove_nested", "canonical_solution": "def remove_nested(test_tup):\n  return tuple(e for e in test_tup if not isinstance(e, tuple))", "input_output_examples": "[[[(1, 5, 7, (4, 6), 10)]], [[(1, 5, 7, 10)]]]", "starter_code": "def remove_nested(test_tup: tuple) -> tuple:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 2, 3)], [(1, (2, 3), 4)], [(1, (2, (3, 4)), 5)], [()], [((1, 2), (3, 4), (5, 6))], [(1, 5, 7, (4, 6), 10)]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, (4, 6), 10)], [((1, 2), 3, (4, 5, 6), 7)], [(1, 2, 3, 4, 5)], [(('a', 'b'), 'c', ('d', 'e'))], [(1, (2,), (3, 4), (5, 6, 7), 8)], [()], [(1, 2, (3, (4, 5)), 6)], [((1, (2, (3,))), 4)], [(1,)], [((), (), ())]]", "gpt-4o-mini": "[[((1, 2), (3, 4), (1, 2))], [((5, 6), (7, 8), (5, 6), (5, 6))], [((1, 2), (1, 2), (3, 4), (5, 6), (3, 4))], [(((1, 2), (3, 4)), ((3, 4), (5, 6)))], [((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (1, 2))], [((10,), (20,), (30,))], [((), ())], [(((1, 2),), ((1, 2), (3, 4)))]]"}}
{"task_id": "Mbpp/792", "requirement": "from typing import List\n\n\ndef count_list(input_list: List[Any]) -> int:\n\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\n\"\"\"", "entry_point": "count_list", "canonical_solution": "def count_list(input_list): \n    return sum(isinstance(e, list) for e in input_list)", "input_output_examples": "[[[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]]], [[4]]]", "starter_code": "from typing import List\ndef count_list(input_list: List[Any]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]], [[]], [[[], [1], [2, 3], [4, 5, 6]]], [[[1], [2], [3], [4], [5]]], [[[1, 2, 3, 4, 5]]], [[1, 2, 3, 4, 5]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], [[[1, 2], 3, [4, 5], 6, [7, 8]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[]], [[[], [], []]], [[1, 2, 3, 4]], [[1, [2, 3], [4, [5, 6]], 7]], [['a', 'b', ['c', 'd'], ['e', ['f']]]], [[[], [1, 2, 3], [[4, 5], 6], 7, [8, [9, [10]]]]]]", "gpt-4o-mini": "[[[]], [[[1, 2, 3], [4, 5], [6]]], [[[1], [], [], [2]]], [[[], [], []]], [[[1, 2], [3, 4], [5, 6], [7]]], [[[True], [False], [None]]], [[[1], [2], [3], [4], [5]]], [[[], [[1, 2], [3, 4]], [5]]], [[[1, 2, 3]]], [[[1.1], [2.2, 3.3], [4.4]]]]"}}
{"task_id": "Mbpp/793", "requirement": "from typing import List\n\n\ndef last(arr: List[int], x: int) -> int:\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\n\"\"\"", "entry_point": "last", "canonical_solution": "def last(arr,x):\n    return len(arr)-arr[::-1].index(x) - 1", "input_output_examples": "[[[[1, 2, 3], 1]], [[0]]]", "starter_code": "from typing import List\ndef last(arr: List[int], x: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], 1], [[1, 2, 2, 3, 3, 3], 3], [[1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 6], [[], 1], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 2], [[1, 2, 3, 4, 5, 5, 5, 6], 5], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3], 1], [[1, 2, 2, 2, 3], 2], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 6], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 8], [[1], 1], [[1], 2], [[], 1]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5], 3], [[1, 2, 2, 3, 4, 5], 2], [[1, 2, 3, 4, 5], 6], [[], 1], [[1, 1, 1, 1, 1], 1], [[10, 20, 30, 40, 50, 60], 50]]"}}
{"task_id": "Mbpp/794", "requirement": "def text_starta_endb(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"", "entry_point": "text_starta_endb", "canonical_solution": "import re\ndef text_starta_endb(text):\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)", "input_output_examples": "[[['aabbbb']], [[None]]]", "starter_code": "def text_starta_endb(text: str) -> re.Match:", "llm_generated_inputs": {"deepseek-v3": "[['aabbbb'], ['acb'], ['a123b'], ['a_b'], ['ab'], ['aaabbb'], ['b'], ['a'], ['123'], ['']]", "qwen2.5-coder-32b-instruct": "[['aabbbb'], ['a quick brown fox jumps over the lazy b'], ['ab'], ['acb'], ['a123b'], ['a!@#b'], ['axb'], ['a_b'], ['a\\nb'], ['a\\tb'], ['a b'], ['aaaaaaaab'], ['ba'], ['b'], ['a'], [''], ['abcde'], ['abacaba']]", "gpt-4o-mini": "[['a123b'], ['ab'], ['acb'], ['somethingab'], ['a end in b'], ['prefixa_suffixb'], ['a end b'], ['b'], ['abc'], ['']]"}}
{"task_id": "Mbpp/796", "requirement": "def return_sum(d: dict) -> int:\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"", "entry_point": "return_sum", "canonical_solution": "def return_sum(d):\n  return sum(d.values())", "input_output_examples": "[[[{'a': 100, 'b': 200, 'c': 300}]], [[600]]]", "starter_code": "def return_sum(d: dict) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[{'a': 100, 'b': 200, 'c': 300}], [{'x': 10, 'y': 20, 'z': 30}], [{'one': 1, 'two': 2, 'three': 3}], [{'empty': 0}], [{'negative': -10, 'positive': 10}], [{'a': 1.5, 'b': 2.5, 'c': 3.5}], [{}]]", "qwen2.5-coder-32b-instruct": "[[{'a': 100, 'b': 200, 'c': 300}], [{}], [{'x': -1, 'y': -2, 'z': -3}], [{'single': 42}], [{'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}]]", "gpt-4o-mini": "[[{'a': 1, 'b': 2, 'c': 3}], [{'x': 10, 'y': 20, 'z': 30}], [{'key1': -5, 'key2': 5}], [{'single': 100}], [{}], [{'zero': 0, 'negative': -10, 'positive': 10}]]"}}
{"task_id": "Mbpp/797", "requirement": "def sum_in_range(l: int, r: int) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"", "entry_point": "sum_in_range", "canonical_solution": "def sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "input_output_examples": "[[[2, 5]], [[8]]]", "starter_code": "def sum_in_range(l: int, r: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1, 10], [2, 5], [0, 0], [-5, 5], [10, 10], [3, 3], [100, 105], [-10, -1], [7, 7], [0, 20]]", "qwen2.5-coder-32b-instruct": "[[2, 5], [1, 10], [0, 0], [3, 3], [4, 4], [-5, 5], [10, 20], [15, 15], [20, 10]]", "gpt-4o-mini": "[[1, 10], [2, 9], [1, 1], [10, 20], [15, 15], [0, 5], [-5, 5], [1, 100]]"}}
{"task_id": "Mbpp/798", "requirement": "from typing import List\n\n\ndef _sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of an array.\n\"\"\"", "entry_point": "_sum", "canonical_solution": "def _sum(arr):  \n    return sum(arr)", "input_output_examples": "[[[[1, 2, 3]]], [[6]]]", "starter_code": "from typing import List\ndef _sum(arr: List[int]) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0]], [[10]], [[]], [[1000000000, 2000000000, 3000000000]], [[-1000000000, 2000000000, -3000000000]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[0, 0, 0]], [[10, -2, 3]], [[]], [[100]], [[-1, -2, -3, -4]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[0, 0, 0, 0]], [[10, -10, 5]], [[100]], [[]], [[1, 2, 3, -6]], [[5, 5, 5, 5, 5, 5]], [[-1, -2, -3]]]"}}
{"task_id": "Mbpp/799", "requirement": "def left_rotate(n: int, d: int) -> int:\n\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\"\"\"", "entry_point": "left_rotate", "canonical_solution": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))", "input_output_examples": "[[[16, 2]], [[64]]]", "starter_code": "def left_rotate(n: int, d: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[16, 2], [1, 1], [0, 5], [4294967295, 31], [8, 0], [255, 8], [1024, 10], [123456789, 16]]", "qwen2.5-coder-32b-instruct": "[[16, 2], [0, 5], [32, 32], [1, 1], [2147483647, 1], [4294967295, 0], [123456789, 16], [8, 3], [15, 4]]", "gpt-4o-mini": "[[8, 2], [16, 4], [0, 1], [1, 1], [4294967295, 1], [7, 3], [15, 1], [1, 32], [2, 33], [0, 0]]"}}
{"task_id": "Mbpp/800", "requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\n\"\"\"", "entry_point": "remove_all_spaces", "canonical_solution": "def remove_all_spaces(text):\n return text.replace(' ', '')", "input_output_examples": "[[['python  program']], [['pythonprogram']]]", "starter_code": "def remove_all_spaces(text: str) -> str:", "llm_generated_inputs": {"deepseek-v3": "[['python  program'], ['   hello   world   '], ['no_spaces_here'], ['   '], [''], ['  spaces   in   between  '], ['leading_spaces'], ['trailing_spaces   '], ['   multiple    spaces   in   between   '], ['tab\\tspace'], ['newline\\nspace'], ['mixed\\tspaces\\nand\\tnewlines']]", "qwen2.5-coder-32b-instruct": "[['python  program'], ['  leading and trailing spaces  '], ['noSpacesHere'], ['   '], [''], ['singleword'], ['multiple    spaces    between'], ['\\tspaces\\tand\\nnewlines\\n']]", "gpt-4o-mini": "[['Hello World'], ['    Leading and trailing spaces    '], ['Multiple     spaces'], ['NoSpacesHere'], ['   '], [''], ['\\tTabbed Space'], ['Line1\\nLine2'], ['    Special characters! @# $%^    '], ['    New\\n\\nLine   ']]"}}
{"task_id": "Mbpp/801", "requirement": "def test_three_equal(x: int, y: int, z: int) -> int:\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\n\n\"\"\"", "entry_point": "test_three_equal", "canonical_solution": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3", "input_output_examples": "[[[1, 1, 1]], [[3]]]", "starter_code": "def test_three_equal(x: int, y: int, z: int) -> int:", "llm_generated_inputs": {"deepseek-v3": "[[1, 1, 1], [1, 2, 3], [2, 2, 3], [3, 3, 3], [0, 0, 0], [-1, -1, -1], [-1, -1, 1], [10, 10, 20], [100, 100, 100], [5, 5, 5], [7, 8, 7], [9, 9, 10], [0, 1, 0], [-5, -5, -6], [15, 15, 15]]", "qwen2.5-coder-32b-instruct": "[[1, 1, 1], [2, 2, 3], [4, 5, 4], [6, 7, 8], [0, 0, 0], [-1, -1, -1], [-1, 1, -1], [100, 100, 100], [101, 102, 103]]", "gpt-4o-mini": "[[1, 1, 1], [1, 2, 1], [-1, -1, -1], [0, 0, 1], [5, 5, 4], [-5, -5, -5], [1000, 1000, 1000], [1, 2, 3], [2, 2, 3], [7, 8, 8]]"}}
{"task_id": "Mbpp/803", "requirement": "def is_perfect_square(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is a perfect square or not.\n\"\"\"", "entry_point": "is_perfect_square", "canonical_solution": "def is_perfect_square(n) :\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))", "input_output_examples": "[[[10]], [[False]]]", "starter_code": "def is_perfect_square(n: int) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[16], [25], [10], [0], [1], [-4], [144], [15]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [4], [9], [16], [25], [26], [100], [101], [-1], [-4], [-9], [152415787501905210], [152415787501905225]]", "gpt-4o-mini": "[[0], [1], [4], [9], [16], [25], [100], [2], [3], [15], [-1], [10], [8], [18], [24]]"}}
{"task_id": "Mbpp/804", "requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\n\"\"\"", "entry_point": "is_product_even", "canonical_solution": "def is_product_even(arr): \n    return any(x % 2 == 0 for x in arr)", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]", "starter_code": "from typing import List\ndef is_product_even(arr: List[int]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[1, 3, 5, 7]], [[0, 1, 2]], [[]], [[2]], [[1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 3, 5, 7, 9, 11, 13]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[0, 1, 3]], [[1]], [[2]], [[]], [[1, -2, 3]], [[1, 3, -4]], [[-1, -3, -5]]]", "gpt-4o-mini": "[[[2, 3, 4]], [[1, 3, 5]], [[0, 1, 2]], [[2, 2, 2]], [[-1, 3, 5]], [[3]], [[]], [[3, 5, 7, 9]], [[2, -3]], [[4, 7, -2]]]"}}
{"task_id": "Mbpp/805", "requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\"\"\"", "entry_point": "max_sum_list", "canonical_solution": "def max_sum_list(lists):\n return max(lists, key=sum)", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], [[[10, 11, 12]]]]", "starter_code": "from typing import List\ndef max_sum_list(lists: List[List[int]]) -> List[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[], [1, 2, 3], [4, 5, 6]]], [[[-1, -2, -3], [-4, -5, -6], [-10, -11, -12]]], [[[1], [2], [3]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[100], [1, 2, 3], [4, 5, 6]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[-1, -2, -3], [-4, -5, -6], [-10, -11, -12]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[100], [200], [300]]], [[[]]], [[[], [], []]], [[[1], [2, 3], [4, 5, 6]]]]", "gpt-4o-mini": "[[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[10, -2, 3], [0, 0, 0], [-1, -1, -1]]], [[[1], [2], [3], [4]]], [[[5, 5, 5], [5, 5], [10]]], [[[1, 2], [2, 1], [3]]], [[[0, 0, 0], [-1, -2, -3], [1, 0, -1]]], [[[100], [200], [300]]], [[[1, 2, 3], [], [4, 5]]], [[[3, 5, -2], [-1, 4], [7, 0]]], [[[], [], []]]]"}}
{"task_id": "Mbpp/806", "requirement": "def max_run_uppercase(test_str: str) -> int:\n\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\n\"\"\"", "entry_point": "max_run_uppercase", "canonical_solution": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res", "input_output_examples": "[[['GeMKSForGERksISBESt']], [[5]]]", "starter_code": "def max_run_uppercase(test_str: str) -> int:", "llm_generated_inputs": {"deepseek-v3": "[['GeMKSForGERksISBESt'], ['HELLOworld'], ['python'], ['PYTHON'], [''], ['12345'], ['aBcDeFgHiJkLmNoPqRsTuVwXyZ'], ['AaaAAbBBbbCCCcc'], ['!@#$%^&*()'], ['A']]", "qwen2.5-coder-32b-instruct": "[['GeMKSForGERksISBESt'], ['HELLOworld'], ['noUPPERCASE'], ['ALLUPPERCASE'], ['alllowercase'], ['MixEdCaSe'], ['A'], ['a'], [''], ['AbCDeFGH'], ['ABCDE'], ['abcdeABCDE']]", "gpt-4o-mini": "[['HELLO there, I am ALEX!'], ['abcdeFGHIJKLmnopQRStuvWXYz'], ['NoUPPERCASEHERE'], ['UPPERCASEUPPERCASEUPPERCASE'], ['12345!@#$%^&*()ABCD5678EFGHIJK'], [''], ['lowercaseonly'], ['MixedUPPER and lower Case'], ['UPPER_UPPERUPPER not lower'], ['A lengthy string that has various upper CASE letters throughout but only ONE sequence that is consecutive!']]"}}
{"task_id": "Mbpp/807", "requirement": "from typing import List\n\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\n\"\"\"", "entry_point": "first_odd", "canonical_solution": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd", "input_output_examples": "[[[[1, 3, 5]]], [[1]]]", "starter_code": "from typing import List\ndef first_odd(nums: List[int]) -> Optional[int]:", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 5]], [[2, 4, 6]], [[0, 1, 2, 3, 4]], [[-2, -1, 0, 1]], [[10, 20, 30, 31, 40]], [[]], [[2, 4, 6, 8, 10]], [[1]], [[2, 3, 4, 5, 6]], [[-3, -2, -1, 0, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 5]], [[2, 4, 6, 8, 10, 11]], [[2, 4, 6, 8, 10]], [[0, 2, 4, 6, 8]], [[1]], [[]], [[2, 3, 5, 7, 11]], [[12, 14, 18, 19, 21]], [[11, 13, 15, 17, 19]], [[22, 24, 26, 28, 31]]]", "gpt-4o-mini": "[[[1, 2, 3, 4, 5]], [[2, 4, 6, 8]], [[10, 15, 20, 25]], [[0, -1, -2, -3]], [[7, 2, 4, 8, 10]], [[]], [[2, 4, 6, 7]], [[-5, -2, -3, -6]], [[11, 22, 33, 44]]]"}}
{"task_id": "Mbpp/808", "requirement": "def check_K(test_tup: tuple, K: any) -> bool:\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\n\"\"\"", "entry_point": "check_K", "canonical_solution": "def check_K(test_tup, K):\n  return K in test_tup", "input_output_examples": "[[[(10, 4, 5, 6, 8), 6]], [[True]]]", "starter_code": "def check_K(test_tup: tuple, K: any) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 5, 6, 8), 6], [(1, 2, 3, 4, 5), 10], [(), 5], [(1, 2, 2, 3, 4), 2], [(None, 1, 2, 3), None], [([1, 2], {'a': 1}, 3), {'a': 1}]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 5, 6, 8), 6], [(1, 2, 3, 4, 5), 6], [(10, 4, 5, 6, 8), 10], [(10, 4, 5, 6, 8), 8], [(10, 4, 5, 6, 8), 5], [(10, 4, 5, 6, 8), 4], [(10, 4, 5, 6, 8), 1], [(10, 4, 5, 6, 8), '6'], [(10, 4, 5, 6, 8), None], [(10, 4, 5, 6, 8), (6,)], [(10, 4, 5, 6, 8), [6]], [(10, 4, 5, 6, 8), {6}], [(10, 4, 5, 6, 8), {'K': 6}], [(10, 4, 5, 6, 8), 6.0], [(10, 4, 5, 6, 8), 6.1], [(10, 4, 5, 6, 8), -6], [(10, 4, 5, 6, 8), 0], [(10, 4, 5, 6, 8), False], [(10, 4, 5, 6, 8), True]]", "gpt-4o-mini": "[[(1, 2, 3), 2], [(1, 2, 3), 4], [(), 5], [(5, 5, 5), 5], [(5, 5, 5), 6], [(None, None), None], [(1, 2, 'a', 'b'), 'a'], [(1, 2, 'a', 'b'), 'z'], [(1, 2, 'a', 4.0), 4.0], [(1, 2, 'a', 4.0), True]]"}}
{"task_id": "Mbpp/809", "requirement": "from typing import Tuple\n\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\"\"\"", "entry_point": "check_smaller", "canonical_solution": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "input_output_examples": "[[[(1, 2, 3), (2, 3, 4)]], [[False]]]", "starter_code": "from typing import Tuple\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:", "llm_generated_inputs": {"deepseek-v3": "[[(1, 2, 3), (2, 3, 4)], [(5, 6, 7), (4, 5, 6)], [(10, 20, 30), (9, 19, 29)], [(0, 0, 0), (0, 0, 0)], [(1, 1, 1), (1, 1, 1)], [(1, 2, 3), (1, 2, 3)], [(100, 200, 300), (99, 199, 299)], [(), ()], [(1,), (2,)], [(10,), (5,)]]", "qwen2.5-coder-32b-instruct": "[[(1, 2, 3), (0, 1, 2)], [(5, 6, 7), (5, 6, 7)], [(10, 20, 30), (9, 19, 29)], [(-1, -2, -3), (-2, -3, -4)], [(100, 200), (99, 199)], [(1, 2, 3), (2, 3, 3)], [(1, 2, 3), (1, 2, 4)], [(1,), (0,)], [(1, 2), (1, 1)]]", "gpt-4o-mini": "[[(1, 2, 3), (0, 1, 2)], [(5, 10, 15), (4, 9, 14)], [(-1, -2, -3), (-2, -3, -4)]]"}}
