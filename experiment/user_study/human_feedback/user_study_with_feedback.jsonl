{"task_id": "HumanEval/50", "requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_shift", "canonical_solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n", "input_output_examples": "[[['hello'], ['mjqqt']], [['mjqqt'], ['hello']]]", "starter_code": "def decode_shift(s: str) -> str:", "requirement_without_examples": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['fghij'], ['abcde'], ['xyzab'], [''], ['klmno'], ['pqrst'], ['uvwxy'], ['zabcd']]", "qwen2.5-coder-32b-instruct": "[['mjqqt'], ['bmfyf'], ['zruog'], ['ezyjr'], ['jgnnqy'], ['fwxmxn'], ['a'], ['z'], [' '], ['!'], ['abcdefghijklmnopqrstuvwxyz'], ['xyzabc']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/52", "requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "entry_point": "below_threshold", "canonical_solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    return all(x < t for x in l)\n\n", "input_output_examples": "[[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5]], [[True], [False]]]", "starter_code": "from typing import List\ndef below_threshold(l: List[int], t: int) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4], 5], [[10, 20, 30, 40], 50], [[1, 2, 3, 4], 4], [[-1, -2, -3, -4], 0], [[100, 200, 300, 400], 100], [[1, 2, 3, 4], 1], [[], 5], [[5, 5, 5, 5], 5], [[1, 2, 3, 4], 0], [[1, 2, 3, 4], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[0, -1, -5], 0], [[10, 10, 10], 10], [[10, 9, 8, 7], 10], [[], 10], [[5], 6], [[5], 5]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/56", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "input_output_examples": "[[['<'], ['<>'], ['<<><>>'], ['><<>']], [[False], [True], [True], [False]]]", "starter_code": "def correct_bracketing(brackets: str) -> bool:", "requirement_without_examples": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['><'], ['<<>>'], ['<><><><>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<>>>>>>>>>>><']]", "qwen2.5-coder-32b-instruct": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['<><><><>'], ['<<<<>>>>'], ['><><><><'], ['<<<>>>'], ['<<<><>>>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<><>>>>>>>>>>'], ['<<<<<<<<<<>><>>>>>>>>>'], ['<<<<<<<<<<>>>><>>>>>>>'], ['<<<<<<<<<<>>>>><>>>>>>'], ['<<<<<<<<<<>>>>>><>>>>>'], ['<<<<<<<<<<>>>>>>><>>>>'], ['<<<<<<<<<<>>>>>>>><>>>'], ['<<<<<<<<<<>>>>>>>>><>>'], ['<<<<<<<<<<>>>>>>>>>><>'], ['<<<<<<<<<<>>>>>>>>>>><'], ['<<<<<<<<<<>>>>>>>>>>>>']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/59", "requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "entry_point": "largest_prime_factor", "canonical_solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n", "input_output_examples": "[[[13195], [2048]], [[29], [2]]]", "starter_code": "def largest_prime_factor(n: int) -> int:", "requirement_without_examples": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[13195], [2048], [15], [123456], [2], [100]]", "qwen2.5-coder-32b-instruct": "[[13195], [2048], [600851475143], [100], [49], [104743], [221], [987], [4096], [6857]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/60", "requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "entry_point": "sum_to_n", "canonical_solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n\n    return (n + 1) * n // 2\n\n", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "starter_code": "def sum_to_n(n: int) -> int:", "requirement_without_examples": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5], [10], [30], [100], [1], [0], [-5], [10000]]", "qwen2.5-coder-32b-instruct": "[[30], [100], [5], [10], [1], [0], [-5], [-10], [1000]]"}, "human_feedback": ["Ambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/61", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "input_output_examples": "[[['('], ['()'], ['(()())'], [')(()']], [[False], [True], [True], [False]]]", "starter_code": "def correct_bracketing(brackets: str) -> bool:", "requirement_without_examples": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['('], [')'], ['()'], ['(()())'], [')(()'], [''], ['((()))'], ['()()()'], ['(()'], ['())'], ['((()()())'], ['()()()())'], ['(((((())))))'], ['(()()()()()())'], ['(()()(()))']]", "qwen2.5-coder-32b-instruct": "[['('], [')'], ['()'], ['(()())'], [')(()'], ['(())'], ['((()))'], ['(()'], ['())'], [''], ['((((()))))'], ['(()))(()']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "HumanEval/63", "requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "entry_point": "fibfib", "canonical_solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n", "input_output_examples": "[[[1], [5], [8]], [[0], [4], [24]]]", "starter_code": "def fibfib(n: int) -> int:", "requirement_without_examples": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/64", "requirement": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "entry_point": "vowels_count", "canonical_solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['abcde'], ['ACEDY']], [[2], [3]]]", "starter_code": "def vowels_count(s: str) -> int:", "requirement_without_examples": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['abcde'], ['ACEDY'], ['hello'], ['sky'], ['rhythm'], ['aeiou'], ['y'], ['xyz'], ['quickly'], ['PYTHON'], [''], ['a'], ['e'], ['i'], ['o'], ['u'], ['y'], ['Y'], ['AeIoUy'], ['yYy'], ['hello world']]", "qwen2.5-coder-32b-instruct": "[['abcde'], ['ACEDY'], ['rhythm'], ['SYZYGY'], ['aeiou'], ['AEIOUY'], ['bcd'], [''], ['y'], ['Y'], ['quickly'], ['fly'], ['encyclopedia'], ['AeiOuY']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/65", "requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "entry_point": "circular_shift", "canonical_solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n", "input_output_examples": "[[[12, 1], [12, 2]], [['21'], ['12']]]", "starter_code": "def circular_shift(x: int, shift: int) -> str:", "requirement_without_examples": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[12345, 1], [12345, 3], [12345, 5], [12345, 6], [12345, 0], [987654321, 2], [987654321, 9], [987654321, 10], [100, 1], [100, 2], [100, 3], [100, 4], [0, 1], [0, 0], [123, -1]]", "qwen2.5-coder-32b-instruct": "[[12, 1], [12, 2], [12345, 3], [12345, 5], [12345, 6], [987654321, 9], [987654321, 10], [5, 1], [5, 2], [0, 1], [0, 0]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/66", "requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "entry_point": "digitSum", "canonical_solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n", "input_output_examples": "[[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa']], [[0], [131], [67], [69], [131], [153]]]", "starter_code": "def digitSum(s: str) -> int:", "requirement_without_examples": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['1234!@# $'], ['ABCDEFG'], ['XYZxyz'], ['NoNumbersHere']]", "qwen2.5-coder-32b-instruct": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['HELLO'], ['12345'], ['!@#$%'], ['UpperCASE'], ['lowercase'], ['MiXeDcAsE'], ['123abcABC']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "HumanEval/67", "requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "entry_point": "fruit_distribution", "canonical_solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "starter_code": "def fruit_distribution(s: str, n: int) -> int:", "requirement_without_examples": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['1 apples and 0 oranges', 10], ['0 apples and 5 oranges', 15], ['50 apples and 25 oranges', 100], ['7 apples and 8 oranges', 30]]", "qwen2.5-coder-32b-instruct": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['50 apples and 50 oranges', 150], ['1 apples and 0 oranges', 2], ['0 apples and 1 oranges', 1], ['100 apples and 100 oranges', 300]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/68", "requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "entry_point": "pluck", "canonical_solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n", "input_output_examples": "[[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]]], [[[2, 1]], [[2, 1]], [[]], [[0, 1]]]]", "starter_code": "from typing import List\ndef pluck(arr: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5]], [[2, 4, 6, 8]], [[0, 0, 0]], [[10, 20, 30, 40, 50]], [[7, 9, 11]], [[6, 2, 8, 4]]]", "qwen2.5-coder-32b-instruct": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5, 7]], [[10, 20, 30, 40]], [[8, 8, 8, 8]], [[0]], [[11, 13, 17, 19, 2]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/77", "requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "entry_point": "iscube", "canonical_solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "starter_code": "def iscube(a: int) -> bool:", "requirement_without_examples": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [1000], [-1000], [8], [-8], [125], [-125], [1000000], [-1000000], [123456789], [-123456789]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [125], [-125], [1000], [-1000], [1001], [-1001]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/78", "requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "entry_point": "hex_key", "canonical_solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n", "input_output_examples": "[[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020']], [[1], [2], [4], [6], [2]]]", "starter_code": "def hex_key(num: str) -> int:", "requirement_without_examples": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], ['2F5A3C'], ['B0B1E'], ['D7A9'], ['0'], ['1'], ['F'], ['']]", "qwen2.5-coder-32b-instruct": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], [''], ['0'], ['1'], ['2'], ['3'], ['5'], ['7'], ['B'], ['D'], ['F'], ['123456789ABCDEF'], ['FFFFFFFF'], ['22222222'], ['33333333'], ['55555555'], ['77777777'], ['BBBBBBBB'], ['DDDDDDDD']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "HumanEval/81", "requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "entry_point": "numerical_letter_grade", "canonical_solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n", "input_output_examples": "[[[[4.0, 3, 1.7, 2, 3.5]]], [[['A+', 'B', 'C-', 'C', 'A-']]]]", "starter_code": "from typing import List\ndef numerical_letter_grade(grades: List[float]) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.5]], [[0.0]], [[4.0, 3.0, 1.7, 2.0, 3.5]], [[0.1, 1.0, 2.3, 3.7, 4.0]], [[0.0, 0.0, 0.0, 0.0, 0.0]], [[1.3, 2.7, 3.3, 4.0, 0.7]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.8]], [[0.5]], [[0.0]], [[3.7]], [[3.3]], [[2.7]], [[2.3]], [[1.7]], [[1.3]], [[0.7]], [[0.1]], [[4.0, 3, 1.7, 2, 3.5]], [[]], [[5.0]], [[-0.1]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/82", "requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "entry_point": "prime_length", "canonical_solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n", "input_output_examples": "[[['Hello'], ['abcdcba'], ['kittens'], ['orange']], [[True], [True], [True], [False]]]", "starter_code": "def prime_length(string: str) -> bool:", "requirement_without_examples": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], ['aa'], [''], ['abcdefghijklmno'], ['abcdefghijklmnopqrstuvwxyz'], ['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']]", "qwen2.5-coder-32b-instruct": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], [''], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij'], ['abcdefghijk'], ['abcdefghijkl'], ['abcdefghijklm'], ['abcdefghijklmn'], ['abcdefghijklmnop'], ['abcdefghijklmnopq'], ['abcdefghijklmnopqr'], ['abcdefghijklmnopqrst']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/96", "requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "entry_point": "count_up_to", "canonical_solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n", "input_output_examples": "[[[5], [11], [0], [20], [1], [18]], [[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]]]]", "starter_code": "from typing import List\ndef count_up_to(n: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5], [11], [0], [20], [1], [18], [2], [3], [7], [100]]", "qwen2.5-coder-32b-instruct": "[[5], [11], [0], [20], [1], [18], [2], [100], [3], [4]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "HumanEval/102", "requirement": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"", "entry_point": "choose_num", "canonical_solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n", "input_output_examples": "[[[12, 15], [13, 12]], [[14], [-1]]]", "starter_code": "def choose_num(x: int, y: int) -> int:", "requirement_without_examples": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[12, 15], [13, 12], [10, 10], [11, 11], [1, 3], [2, 2], [100, 105], [99, 101], [0, 0], [0, 1]]", "qwen2.5-coder-32b-instruct": "[[12, 15], [13, 12], [8, 10], [7, 7], [20, 20], [1, 1], [0, 0], [2, 5], [10, 20], [15, 15], [22, 22], [21, 21], [100, 200], [99, 100]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/103", "requirement": "from typing import Union\n\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "entry_point": "rounded_avg", "canonical_solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n", "input_output_examples": "[[[1, 5], [7, 5], [10, 20], [20, 33]], [['0b11'], [-1], ['0b1111'], ['0b11010']]]", "starter_code": "from typing import Union\ndef rounded_avg(n: int, m: int) -> Union[str, int]:", "requirement_without_examples": "from typing import Union\n\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1, 5], [7, 5], [10, 20], [20, 33], [0, 0], [1, 1], [-1, 1], [100, 200], [999, 1001], [15, 15]]", "qwen2.5-coder-32b-instruct": "[[1, 5], [7, 5], [10, 20], [20, 33], [1, 1], [0, 0], [-1, 5], [5, -1], [100, 200], [999, 1000]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/107", "requirement": "from typing import Tuple\n\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "entry_point": "even_odd_palindrome", "canonical_solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n", "input_output_examples": "[[[3], [12]], [[(1, 2)], [(4, 6)]]]", "starter_code": "from typing import Tuple\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [12], [100], [101], [999], [1000], [500], [123], [456], [789], [111], [222], [333], [987], [654], [321], [13]]", "qwen2.5-coder-32b-instruct": "[[3], [12], [1], [2], [10], [100], [1000], [9], [11], [22]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/108", "requirement": "from typing import List\n\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"", "entry_point": "count_nums", "canonical_solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n", "input_output_examples": "[[[[]], [[-1, 11, -11]], [[1, 1, 2]]], [[0], [1], [3]]]", "starter_code": "from typing import List\ndef count_nums(arr: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-123, 456, -789]], [[10, -20, 30, -40, 50]], [[123, -456, 789, 0, -123]], [[111, 222, 333, -444, -555]]]", "qwen2.5-coder-32b-instruct": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-10, 10, -100, 100]], [[999, -999, 1001, -1001]], [[123, 456, 789]], [[-123, -456, -789]], [[10, -10, 20, -20]], [[5, -5, 15, -15, 25, -25]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/109", "requirement": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"", "entry_point": "move_one_ball", "canonical_solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n", "input_output_examples": "[[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]]], [[True], [False]]]", "starter_code": "from typing import List\ndef move_one_ball(arr: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[]], [[1]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[4, 5, 1, 2, 3]], [[5, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[1]], [[]], [[2, 1]], [[1, 3, 2]], [[4, 3, 2, 1]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/113", "requirement": "from typing import List\n\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"", "entry_point": "odd_count", "canonical_solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n", "input_output_examples": "[[[['1234567']], [['3', '11111111']]], [[['the number of odd elements 4n the str4ng 4 of the 4nput.']], [['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']]]]", "starter_code": "from typing import List\ndef odd_count(lst: List[str]) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[['1234567']], [['3', '11111111']], [['2468']], [['13579']], [['']], [['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']], [['123', '456', '789']], [['111', '222', '333', '444', '555']], [['00000', '11111', '22222', '33333', '44444', '55555']], [['9876543210']]]", "qwen2.5-coder-32b-instruct": "[[['1234567']], [['3', '11111111']], [['24680']], [['13579']], [['']], [['0']], [['1']], [['11', '22', '33', '44', '55']], [['123', '456', '789']]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "HumanEval/118", "requirement": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"", "entry_point": "get_closest_vowel", "canonical_solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n", "input_output_examples": "[[['yogurt'], ['FULL'], ['quick'], ['ab']], [['u'], ['U'], [''], ['']]]", "starter_code": "def get_closest_vowel(word: str) -> str:", "requirement_without_examples": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['banana'], ['strengths'], ['rhythm'], ['aeiou'], ['bcz'], ['xyz'], ['Hello'], ['Testing'], ['Aeiou'], ['BbCcDd'], ['ZzYyXx']]", "qwen2.5-coder-32b-instruct": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['rhythm'], ['beautiful'], ['sequence'], ['a'], ['aeiou'], ['bcdfg'], ['bAceId'], ['mIssissippi'], ['xylophone']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/121", "requirement": "from typing import List\n\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"", "entry_point": "solution", "canonical_solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n", "input_output_examples": "[[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]]], [[12], [9], [0]]]", "starter_code": "from typing import List\ndef solution(lst: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1]], [[2]], [[11, 22, 33, 44, 55]], [[-1, -2, -3, -4, -5]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]]", "qwen2.5-coder-32b-instruct": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[1]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[11, 22, 33, 44, 55, 66]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[111, 222, 333, 444, 555]], [[7]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/122", "requirement": "from typing import List\n\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "entry_point": "add_elements", "canonical_solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n", "input_output_examples": "[[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4]], [[24]]]", "starter_code": "from typing import List\ndef add_elements(arr: List[int], k: int) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[1, 2, 3, 4, 5], 3], [[10, 20, 30, 40, 50], 5], [[99, 100, 101, 102, 103], 2], [[5, 15, 25, 35, 45], 1], [[123, 456, 789, 12, 34], 5], [[1, 2, 3], 3], [[100, 200, 300, 400, 500], 5], [[99, 98, 97, 96, 95], 5], [[10, 20, 30, 40, 50], 0], [[10], 1], [[1001, 2002, 3003], 3]]", "qwen2.5-coder-32b-instruct": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[10, 20, 30, 40, 50], 3], [[1, 2, 3, 4, 5], 5], [[100, 200, 3, 40, 5], 5], [[99, 100, 101, 102], 4], [[50, 50, 50, 50, 50], 2], [[123, 45, 67, 89, 10], 1], [[5, 5, 5, 5, 5], 0], [[99, 99, 99, 99, 99], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/123", "requirement": "from typing import List\n\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"", "entry_point": "get_odd_collatz", "canonical_solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n", "input_output_examples": "[[[5]], [[[1, 5]]]]", "starter_code": "from typing import List\ndef get_odd_collatz(n: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [6], [7], [10], [12], [15]]", "qwen2.5-coder-32b-instruct": "[[1], [5], [7], [10], [19], [27], [100]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/125", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''", "entry_point": "split_words", "canonical_solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['Hello world!'], ['Hello,world!'], ['abcdef']], [[['Hello', 'world!']], [['Hello', 'world!']], [3]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef split_words(txt: str) -> Union[List[str], int]:", "requirement_without_examples": "from typing import List\nfrom typing import Union\n\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''", "llm_generated_inputs": {"deepseek-v3": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['This is a test'], ['One,Two,Three'], ['NoSpacesOrCommasHere'], ['  Leading and trailing spaces  '], ['Multiple   spaces   between   words'], [''], ['a'], ['A,B,C,D,E']]", "qwen2.5-coder-32b-instruct": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['a,b,c,d,e,f'], ['noSpacesOrCommas'], ['singleword'], ['multiple   spaces'], ['multiple,commas,here'], ['mixed, spaces and,commas'], [''], ['A quick brown fox jumps over the lazy dog'], ['z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/127", "requirement": "from typing import Tuple\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"", "entry_point": "intersection", "canonical_solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n", "input_output_examples": "[[[[(1, 3), (2, 4)]], [[(1, 2), (2, 3)]], [((-1, 1), (0, 4))], [[(-3, -1), (-5, 5)]]], [['NO'], ['NO'], ['NO'], [['YES']]]]", "starter_code": "from typing import Tuple\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:", "requirement_without_examples": "from typing import Tuple\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. \n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(1, 3), (2, 4)], [(1, 5), (3, 7)], [(-3, -1), (-5, 5)], [(1, 2), (3, 4)], [(5, 5), (5, 5)], [(2, 10), (1, 3)], [(-10, -5), (-7, -6)], [(0, 10), (10, 20)], [(0, 10), (-5, 15)], [(3, 7), (3, 7)]]", "qwen2.5-coder-32b-instruct": "[[(1, 2), (2, 3)], [(-1, 1), (0, 4)], [(-3, -1), (-5, 5)], [(5, 10), (10, 15)], [(0, 0), (0, 0)], [(-10, -5), (-7, -3)], [(2, 5), (3, 7)], [(11, 19), (15, 22)], [(2, 2), (3, 3)], [(-20, -10), (-15, -5)]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/128", "requirement": "from typing import List\n\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"", "entry_point": "prod_signs", "canonical_solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n", "input_output_examples": "[[[[1, 2, 2, -4]], [[0, 1]], [[]]], [[-9], [0], [None]]]", "starter_code": "from typing import List\ndef prod_signs(arr: List[int]) -> Optional[int]:", "requirement_without_examples": "from typing import List\n\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[5, -3, 0, 2, -1]], [[-7, -2, -3]], [[10]], [[0, 0, 0]], [[-1, -1, -1, -1]], [[2, -2, 2, -2, 2]], [[1, 1, 1, 1, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[1, -1, 1, -1]], [[5]], [[-3]], [[0, 0, 0]], [[1, 0, -2]], [[10, -10, 10, -10]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/137", "requirement": "from typing import Union\n\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"", "entry_point": "compare_one", "canonical_solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n", "input_output_examples": "[[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1]], [[2.5], ['2,3'], ['6'], [None]]]", "starter_code": "from typing import Union\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:", "requirement_without_examples": "from typing import Union\n\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.7, 3.7], ['3.7', '3,7'], ['10', '2'], [0, '0'], [-5, -3], ['-5.5', '-5,5'], ['7.2', 7.2], ['1000', '999']]", "qwen2.5-coder-32b-instruct": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.5, 3.5], ['7', '7.0'], ['10', 10.0], [0, '0'], [-1, '-1'], [-2.5, '-2,5'], ['-3,5', -3.5], [100, '99,9'], ['100', 100], ['0,001', 0.001], [0.001, '0,001']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "HumanEval/138", "requirement": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"", "entry_point": "is_equal_to_sum_even", "canonical_solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    return n >= 8 and n % 2 == 0\n\n", "input_output_examples": "[[[4], [6], [8]], [[False], [False], [True]]]", "starter_code": "def is_equal_to_sum_even(n: int) -> bool:", "requirement_without_examples": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[4], [6], [8], [10], [12], [1], [0], [-2], [14], [16]]", "qwen2.5-coder-32b-instruct": "[[4], [6], [8], [10], [12], [14], [16], [20], [30], [0], [-4], [-8]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/140", "requirement": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"", "entry_point": "fix_spaces", "canonical_solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n", "input_output_examples": "[[['Example'], ['Example 1'], [' Example 2'], [' Example   3']], [['Example'], ['Example_1'], ['_Example_2'], ['_Example-3']]]", "starter_code": "def fix_spaces(text: str) -> str:", "requirement_without_examples": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['  '], ['   '], ['    '], ['Hello   World'], ['NoSpacesHere'], ['  LeadingSpaces'], ['TrailingSpaces  '], ['Multiple    Spaces   Here'], ['   Multiple   Leading   And   Trailing   Spaces   '], ['SingleSpace'], ['Two  Spaces'], ['Three   Spaces'], ['Four    Spaces'], ['Mixed   Spaces  Here'], ['   Mixed   Spaces   Everywhere   ']]", "qwen2.5-coder-32b-instruct": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['Multiple    Spaces'], ['Single Space'], ['  Leading and trailing  '], ['NoSpacesHere'], ['   '], ['_'], ['__'], ['___'], ['a b c d e f g'], ['a   b   c   d']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/143", "requirement": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "entry_point": "words_in_sentence", "canonical_solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n", "input_output_examples": "[[['This is a test'], ['lets go for swimming']], [['is'], ['go for']]]", "starter_code": "def words_in_sentence(sentence: str) -> str:", "requirement_without_examples": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['This is a test'], ['lets go for swimming'], ['Hello world'], ['The quick brown fox jumps over the lazy dog'], ['a'], ['Prime numbers are fun'], ['One two three four five six seven'], ['I love programming'], ['Python is awesome'], ['Short words']]", "qwen2.5-coder-32b-instruct": "[['This is a test'], ['lets go for swimming'], ['a'], ['prime numbers are interesting'], ['I love python programming'], [' '], ['two words'], ['seveneleven'], ['ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az']]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "HumanEval/146", "requirement": "from typing import List\n\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"", "entry_point": "specialFilter", "canonical_solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n", "input_output_examples": "[[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]]], [[1], [2]]]", "starter_code": "from typing import List\ndef specialFilter(nums: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[10, 20, 30, 40]], [[11, 13, 15, 17, 19]], [[1, 3, 5, 7, 9]], [[21, 23, 25, 27, 29]], [[123, 456, 789, 101]], [[]], [[111, 222, 333, 444, 555]], [[-15, -33, -45, -109]]]", "qwen2.5-coder-32b-instruct": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[135, 579, 975, 753, 357]], [[10, 12, 14, 16, 18]], [[13, 31, 57, 75, 99]], [[]], [[111, 113, 115, 117, 119]], [[191, 393, 595, 797, 999]], [[21, 23, 25, 27, 29]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/151", "requirement": "from typing import List\n\n\ndef double_the_difference(lst: List[int]) -> int:\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''", "entry_point": "double_the_difference", "canonical_solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n", "input_output_examples": "[[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]]], [[10], [0], [81], [0]]]", "starter_code": "from typing import List\ndef double_the_difference(lst: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef double_the_difference(lst: List[int]) -> int:\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    If the input list is empty, return 0.\n    '''", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[2, 4, 6]], [[1, 3, 5]], [[1.5, 2.3, 3]], [[-1, -3, -5]], [[1, -1, 2, -2, 3, -3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[1, 2, 3, 4, 5]], [[11, 13, 15]], [[2, 4, 6, 8]], [[1.5, 3.5, 5.5]], [[7, -3, 2, -8, 0]], [[100, 200, 300]], [[1, 1, 1, 1]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/152", "requirement": "from typing import List\n\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"", "entry_point": "compare", "canonical_solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n", "input_output_examples": "[[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]]], [[[0, 0, 0, 0, 3, 3]], [[4, 4, 1, 0, 0, 6]]]]", "starter_code": "from typing import List\ndef compare(game: List[int], guess: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[7, 8, 9], [9, 8, 7]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-1, -2, -3]], [[100, 200, 300], [150, 250, 350]], [[5, 10, 15], [10, 5, 20]], [[1, 1, 1], [2, 2, 2]], [[-5, -10, -15], [-10, -5, -20]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[10, 20, 30], [30, 20, 10]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [2, 2, 2, 2]], [[100, 200, 300, 400], [100, 200, 300, 400]], [[100, 200, 300, 400], [400, 300, 200, 100]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [1, 1, 1, 1]], [[1], [1]], [[1], [2]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "HumanEval/154", "requirement": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"", "entry_point": "cycpattern_check", "canonical_solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n", "input_output_examples": "[[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen']], [[False], [True], [False], [True], [False], [True]]]", "starter_code": "def cycpattern_check(a: str, b: str) -> bool:", "requirement_without_examples": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['abcdef', 'efabcd'], ['xyz', 'xyz'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'a'], ['abcde', 'edcba'], ['longerword', 'wordlonger'], ['rotation', 'tationro']]", "qwen2.5-coder-32b-instruct": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['rotation', 'tationro'], ['rotation', 'rotation'], ['rotation', 'otationr'], ['a', 'a'], ['a', 'b'], ['', ''], ['abcde', 'edcba'], ['aaaa', 'aa'], ['abcdefg', 'efga'], ['abcdefg', 'gha']]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/159", "requirement": "from typing import List\n\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "entry_point": "eat", "canonical_solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n", "input_output_examples": "[[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5]], [[[11, 4]], [[12, 1]], [[11, 0]], [[7, 0]]]]", "starter_code": "from typing import List\ndef eat(number: int, need: int, remaining: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [0, 0, 100], [50, 50, 50], [100, 200, 150], [500, 600, 700], [1000, 1000, 1000], [0, 1000, 1000], [1000, 0, 1000], [1000, 1000, 0], [500, 1000, 500], [1000, 500, 500]]", "qwen2.5-coder-32b-instruct": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [1000, 1000, 1000], [500, 500, 250], [500, 250, 500], [0, 1000, 500], [0, 1000, 1000], [1000, 0, 0]]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "HumanEval/161", "requirement": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "entry_point": "solve", "canonical_solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n", "input_output_examples": "[[['1234'], ['ab'], ['#a@C']], [['4321'], ['AB'], ['#A@c']]]", "starter_code": "def solve(s: str) -> str:", "requirement_without_examples": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], [''], ['123abcDEF!@#'], ['NoSpacesHere'], ['   '], ['A1B2C3'], ['!@#$%^&*()']]", "qwen2.5-coder-32b-instruct": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], ['123abcXYZ'], ['!@#$%^&*()'], ['aBcDeFgHiJ'], ['9876543210'], [''], ['a'], ['A'], ['1']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/98", "requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"", "entry_point": "multiply_num", "canonical_solution": "def multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)", "input_output_examples": "[[[[8, 2, 3, -1, 7]]], [[-67.2]]]", "starter_code": "from typing import List\ndef multiply_num(numbers: List[int]) -> float:", "requirement_without_examples": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[8, 2, 3, -1, 7]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0]], [[10]], [[]], [[1, -1, 1, -1]], [[1000000, 2000000, 3000000]]]", "qwen2.5-coder-32b-instruct": "[[[8, 2, 3, -1, 7]], [[1, 1, 1, 1, 1]], [[0, 0, 0, 0]], [[5]], [[-1, -2, -3, -4]], [[10, -10, 10, -10]], [[100, 200, 300]]]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/102", "requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "entry_point": "snake_to_camel", "canonical_solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "input_output_examples": "[[['python_program']], [['PythonProgram']]]", "starter_code": "def snake_to_camel(word: str) -> str:", "requirement_without_examples": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['python_program'], ['snake_case_example'], ['single'], ['multiple_underscores__in__a__row'], ['__leading_and_trailing_underscores__'], ['empty_string'], ['alreadyCamelCase'], ['ALL_CAPS_SNAKE_CASE'], ['mixed_Case_Snake']]", "qwen2.5-coder-32b-instruct": "[['python_program'], ['this_is_a_test'], ['singleword'], ['multiple__underscores'], ['leading_underscore'], ['trailing_underscore_'], ['__both_ends__'], [''], ['_'], ['alreadyCamelCase']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/105", "requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"", "entry_point": "count", "canonical_solution": "def count(lst):   \n    return sum(lst)", "input_output_examples": "[[[[True, False, True]]], [[2]]]", "starter_code": "from typing import List\ndef count(lst: List[bool]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[True, False, True]], [[True, True, True]], [[False, False, False]], [[True]], [[False]], [[]], [[True, False, True, False, True, False, True]], [[True, True, True, False, False, False, True]]]", "qwen2.5-coder-32b-instruct": "[[[True, False, True]], [[False, False, False]], [[True, True, True]], [[]], [[True]], [[False]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/118", "requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "entry_point": "string_to_list", "canonical_solution": "def string_to_list(string): \n    return string.split(\" \")", "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]", "starter_code": "from typing import List\ndef string_to_list(string: str) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['python programming'], ['hello world'], ['single'], ['multiple    spaces'], [''], [' '], ['  leading spaces'], ['trailing spaces  '], ['  both  ends  ']]", "qwen2.5-coder-32b-instruct": "[['python programming'], ['singleword'], ['multiple   spaces'], [' leading and trailing '], [' '], [''], ['123 456 789'], ['special!@# $%^&*() characters']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/224", "requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"", "entry_point": "count_Set_Bits", "canonical_solution": "def count_Set_Bits(n): \n    return bin(n)[2:].count('1')", "input_output_examples": "[[[2]], [[1]]]", "starter_code": "from typing import Set\ndef count_Set_Bits(n: int) -> int:", "requirement_without_examples": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [255], [-1], [1023], [1024]]", "qwen2.5-coder-32b-instruct": "[[2], [0], [1], [15], [31], [255], [1023], [1048575], [2147483647]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/233", "requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"", "entry_point": "lateralsuface_cylinder", "canonical_solution": "import math\ndef lateralsuface_cylinder(r, h):\n  return 2 * math.pi * r * h", "input_output_examples": "[[[10, 5]], [[314.15000000000003]]]", "starter_code": "def lateralsuface_cylinder(r: float, h: float) -> float:", "requirement_without_examples": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[10.0, 5.0], [0.0, 5.0], [10.0, 0.0], [0.0, 0.0], [-10.0, 5.0], [10.0, -5.0], [-10.0, -5.0], [1.5, 3.5], [100.0, 200.0], [0.001, 0.001]]", "qwen2.5-coder-32b-instruct": "[[10, 5], [0, 5], [10, 0], [0, 0], [1, 1], [3.5, 7.2], [-1, 5], [10, -5], [-1, -5]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/237", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "entry_point": "check_occurences", "canonical_solution": "from collections import Counter \ndef check_occurences(test_list):\n  return dict(Counter(tuple(sorted(t)) for t in test_list))", "input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]]], [[{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:", "requirement_without_examples": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[]], [[(1, 2), (1, 2), (1, 2)]], [[(1,), (2,), (3,)]], [[(1, 'a'), (2, 'b'), (1, 'a'), (3, 'c')]], [[(1, 2, 3), (1, 2, 3), (4, 5, 6)]], [[(1, 2), (3, 4), (5, 6), (1, 2)]], [[(True, False), (False, True), (True, False)]], [[(1.0, 2.0), (2.0, 1.0), (3.0, 4.0)]], [[(None, None), (None, None)]]]", "qwen2.5-coder-32b-instruct": "[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[(1, 2), (2, 1), (1, 2), (2, 1)]], [[(1, 1), (1, 1), (1, 1)]], [[]], [[(1, 2, 3), (3, 2, 1), (1, 2, 3)]], [[(1,)]], [[(1, 2), (2, 3), (3, 4), (4, 5)]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/267", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"", "entry_point": "square_Sum", "canonical_solution": "def square_Sum(n):  \n    return n * (4 * n * n - 1) / 3", "input_output_examples": "[[[2]], [[10]]]", "starter_code": "def square_Sum(n: int) -> float:", "requirement_without_examples": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [-1], [10]]", "qwen2.5-coder-32b-instruct": "[[2], [1], [3], [0], [-1], [10]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/271", "requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"", "entry_point": "even_Power_Sum", "canonical_solution": "def even_Power_Sum(n): \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))", "input_output_examples": "[[[2]], [[1056]]]", "starter_code": "def even_Power_Sum(n: int) -> int:", "requirement_without_examples": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [10], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10]]"}, "human_feedback": ["Ambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "Mbpp/282", "requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "entry_point": "sub_list", "canonical_solution": "def sub_list(nums1,nums2):\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]", "input_output_examples": "[[[[1, 2, 3], [4, 5, 6]]], [[[-3, -3, -3]]]]", "starter_code": "from typing import List\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [1, 2, 3]], [[-1, -2, -3], [1, 2, 3]], [[0, 0, 0], [0, 0, 0]], [[5, -5, 10], [-5, 5, -10]], [[1], [1]], [[100, 200], [50, 150]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [1, 2, 3]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-4, -5, -6]], [[1, 2], [1, 2, 3]], [[1, 2, 3], [1, 2]], [[100, 200, 300], [100, 200, 300]], [[1], [1]], [[], []]]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/293", "requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "entry_point": "otherside_rightangle", "canonical_solution": "import math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w * w + h * h)", "input_output_examples": "[[[7, 8]], [[10.63014581273465]]]", "starter_code": "def otherside_rightangle(w: float, h: float) -> float:", "requirement_without_examples": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[7.0, 8.0], [3.0, 4.0], [5.0, 12.0], [0.0, 0.0], [-3.0, 4.0], [3.0, -4.0], [1.0, 1.0], [1.4142135623730951, 1.4142135623730951]]", "qwen2.5-coder-32b-instruct": "[[7, 8], [3, 4], [5, 12], [8, 15], [0, 0], [0, 5], [5, 0], [-3, 4], [3, -4], [-3, -4]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "Mbpp/305", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "entry_point": "start_withp", "canonical_solution": "import re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "input_output_examples": "[[[['Python PHP', 'Java JavaScript', 'c c++']]], [[('Python', 'PHP')]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef start_withp(words: List[str]) -> Tuple[str, str]:", "requirement_without_examples": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['Pandas', 'Pytest', 'Flask', 'PySpark']], [['Java', 'JavaScript', 'C++', 'Python']], [['Perl', 'PHP', 'Prolog', 'Pascal']], [['Ruby', 'Rust', 'Go', 'Swift']], [['Python', 'PHP', 'Java', 'C++']], [['Pizza', 'Pasta', 'Burger', 'Sandwich']], [['Python', 'Pandas', 'Pytest', 'PySpark']], [[]], [['Python', 'PHP', 'Pandas', 'Pytest', 'PySpark']]]", "qwen2.5-coder-32b-instruct": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['pandas', 'programming', 'python']], [['apple', 'banana', 'cherry']], [['Pineapple', 'peach', 'plum']], [['', 'p', 'pp']], [['no p here', 'nothing', 'still nothing']], [['P P P', 'P Q R', 'Q P R']]]"}, "human_feedback": ["Ambiguous", "Ambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/308", "requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "entry_point": "large_product", "canonical_solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], [[[60, 54, 50]]]]", "starter_code": "from typing import List\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2], [3, 4], 2], [[10, 20, 30], [1, 2, 3], 1], [[-1, -2, -3], [-4, -5, -6], 2], [[0, 0, 0], [1, 2, 3], 3], [[1, 2, 3], [0, 0, 0], 2], [[], [1, 2, 3], 0], [[1, 2, 3], [], 0], [[1], [1], 1], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2], [3, 4], 1], [[10, 20, 30], [1, 2, 3], 2], [[5, 5, 5], [5, 5, 5], 3], [[-1, -2, -3], [-4, -5, -6], 2], [[0, 0, 0], [0, 0, 0], 1], [[100, 200], [1, 2], 3], [[1, 2, 3], [4, 5, 6], 0], [[1, 2, 3], [4, 5, 6], 5], [[1, 2, 3], [], 2], [[], [1, 2, 3], 2]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/312", "requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"", "entry_point": "volume_cone", "canonical_solution": "import math\ndef volume_cone(r,h):\n  return (1.0 / 3) * math.pi * r * r * h", "input_output_examples": "[[[5, 12]], [[314.15926535897927]]]", "starter_code": "def volume_cone(r: float, h: float) -> float:", "requirement_without_examples": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5.0, 12.0], [0.0, 12.0], [5.0, 0.0], [0.0, 0.0], [1.0, 1.0], [10.0, 20.0], [2.5, 3.5], [-5.0, 12.0], [5.0, -12.0], [-5.0, -12.0]]", "qwen2.5-coder-32b-instruct": "[[5, 12], [0, 12], [5, 0], [0, 0], [3.5, 7.2], [-5, 12], [5, -12], [-5, -12], [1000000.0, 1000000.0], [1e-06, 1e-06]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/404", "requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"", "entry_point": "minimum", "canonical_solution": "def minimum(a,b):   \n    return min(a,b)", "input_output_examples": "[[[1, 2]], [[1]]]", "starter_code": "def minimum(a: int, b: int) -> int:", "requirement_without_examples": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1, 2], [5, 3], [-1, -2], [0, 0], [-5, 5], [100, 100], [2147483647, -2147483648]]", "qwen2.5-coder-32b-instruct": "[[1, 2], [-1, -2], [0, 0], [100, 200], [-100, 100], [5, 5], [-5, -5], [2147483647, 2147483646], [-2147483648, -2147483647]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/410", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "entry_point": "min_val", "canonical_solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[2]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef min_val(listval: List[Union[int, Any]]) -> int:", "requirement_without_examples": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 2, 1, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[10, 'hello', 20, 30, 'world']], [[-5, -10, -1, -3]], [[0, 0, 0, 0]], [[100]], [[]], [['a', 'b', 'c']], [[True, False, 1, 0]], [[None, 5, 3, 7]], [[1.5, 2.3, 0.9, 3.1]]]", "qwen2.5-coder-32b-instruct": "[[[3, 1, 4, 1, 5, 9]], [['apple', 100, 200, 'banana', 50]], [[0, -1, -2, 'zero', 'negative']], [[True, False, 1, 0, 'true', 'false']], [[3.14, 2.71, 'pi', 'e', 1.618]], [[1000000, 999999, 'large', 'number']], [[1]], [[]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Unambiguous"]}
{"task_id": "Mbpp/436", "requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"", "entry_point": "neg_nos", "canonical_solution": "def neg_nos(list1):\n  return [i for i in list1 if i < 0]", "input_output_examples": "[[[[-1, 4, 5, -6]]], [[[-1, -6]]]]", "starter_code": "from typing import List\ndef neg_nos(list1: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[-1, 4, 5, -6]], [[0, 1, 2, 3]], [[-10, -20, -30]], [[100, -200, 300, -400]], [[]], [[-1, -1, -1, -1]], [[1, 2, 3, -4, -5, 6]]]", "qwen2.5-coder-32b-instruct": "[[[-1, 4, 5, -6]], [[0, 2, 3, 4]], [[-1, -2, -3, -4]], [[1, 2, 3, 4]], [[]], [[0]], [[-1, 0, 1]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/440", "requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "entry_point": "find_adverb_position", "canonical_solution": "import re\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))", "input_output_examples": "[[['clearly!! we can see the sky']], [[(0, 7, 'clearly')]]]", "starter_code": "from typing import Tuple\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['clearly!! we can see the sky'], ['She quickly ran to the store'], ['He spoke softly to avoid waking the baby'], ['The car suddenly stopped at the intersection'], ['They happily accepted the invitation'], ['The dog barked loudly at the stranger'], ['She carefully placed the vase on the table'], ['The sun slowly set behind the mountains'], ['He quietly left the room'], ['The bird flew swiftly across the sky'], ['The teacher patiently explained the concept'], ['The child eagerly opened the gift'], ['The wind blew gently through the trees'], ['The cat silently crept towards the mouse'], ['The boy bravely faced the challenge'], ['The audience clapped enthusiastically after the performance'], ['The river flowed smoothly through the valley'], ['The man confidently delivered his speech'], ['The woman gracefully danced across the stage'], ['The team successfully completed the project']]", "qwen2.5-coder-32b-instruct": "[['clearly!! we can see the sky'], ['we can see the sky clearly!!'], ['she sings beautifully'], ['quickly and quietly he left'], ['no adverbs here'], [' '], [''], ['adverbially speaking, this is correct'], ['this sentence has an adverb too quickly'], ['evenly distributed adverbs are tricky']]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/447", "requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "entry_point": "cube_nums", "canonical_solution": "def cube_nums(nums):\n    return [n**3 for n in nums]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]]]]", "starter_code": "from typing import List\ndef cube_nums(nums: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[0, -1, -2, -3]], [[]], [[10]], [[-5, 5]], [[100, 200, 300]], [[-100, -200, -300]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[0]], [[1, -1, 2, -2]], [[100, 200, 300]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/450", "requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "entry_point": "extract_string", "canonical_solution": "def extract_string(str1, l):\n    return [e for e in str1 if len(e) == l]", "input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]], [[['practice', 'solution']]]]", "starter_code": "from typing import List\ndef extract_string(str1: List[str], l: int) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['hello', 'world', 'foo', 'bar', 'baz'], 3], [['a', 'bb', 'ccc', 'dddd', 'eeeee'], 1], [['short', 'medium', 'longer', 'longest'], 10], [[], 5], [['one', 'two', 'three', 'four'], 0], [['single'], 6], [['multiple', 'words', 'with', 'different', 'lengths'], 7]]", "qwen2.5-coder-32b-instruct": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['short', 'longer', 'longest', 'tiny'], 5], [['equal', 'equal', 'equal'], 5], [[], 3], [['a', 'ab', 'abc'], 1], [['one', 'two', 'three'], 4], [['boundary', 'condition', 'test'], 7], [['same', 'size', 'test'], 4]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/453", "requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"", "entry_point": "sumofFactors", "canonical_solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])", "input_output_examples": "[[[18]], [[26]]]", "starter_code": "def sumofFactors(n: int) -> int:", "requirement_without_examples": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[18], [1], [2], [7], [20], [0], [-12]]", "qwen2.5-coder-32b-instruct": "[[18], [1], [2], [3], [12], [100], [0], [-5], [49], [36]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/465", "requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "entry_point": "drop_empty", "canonical_solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "input_output_examples": "[[[{'c1': 'Red', 'c2': 'Green', 'c3': None}]], [[{'c1': 'Red', 'c2': 'Green'}]]]", "starter_code": "def drop_empty(dict1: dict) -> dict:", "requirement_without_examples": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{'a': 1, 'b': [], 'c': '', 'd': {}, 'e': 0}], [{'x': 'Hello', 'y': None, 'z': 'World'}], [{'key1': False, 'key2': True, 'key3': None}], [{'name': 'Alice', 'age': 25, 'city': ''}], [{}], [{'a': None, 'b': None, 'c': None}], [{'x': 0, 'y': 0.0, 'z': '0'}]]", "qwen2.5-coder-32b-instruct": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{'a': '', 'b': ' ', 'c': None, 'd': False}], [{'key1': 'value1', 'key2': [], 'key3': {}, 'key4': ()}], [{'key1': 'value1', 'key2': 'value2'}], [{}], [{'empty': None, 'zero': 0, 'blank': ''}]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/470", "requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "entry_point": "add_pairwise", "canonical_solution": "def add_pairwise(test_tup):\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(6, 12, 15, 18)]]]", "starter_code": "from typing import Tuple\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0)], [(1,)], [(-1, 1, -1, 1)], [(100, 200, 300)], [(3, -3, 3, -3)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(0,)], [(1000000, 2000000, 3000000, 4000000)], [(-100, -200, -300, -400)]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0)], [(-1, -2, -3, -4)], [(10, 20)], [(5,)], [(1,)], [()]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/569", "requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "entry_point": "sort_sublists", "canonical_solution": "def sort_sublists(list1):\n    return list(map(sorted,list1))", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]", "starter_code": "from typing import List\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:", "requirement_without_examples": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry'], ['date', 'elderberry', 'fig']]], [[['zebra', 'apple', 'mango'], ['grape', 'kiwi'], ['banana']]], [[['x', 'y', 'z'], ['a', 'c', 'b'], ['d']]], [[[''], ['a'], ['b', 'a']]], [[[], ['a', 'b'], ['c', 'd', 'e']]], [[['a', 'a', 'b'], ['c', 'c', 'c'], ['d', 'e', 'e']]]]", "qwen2.5-coder-32b-instruct": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry', 'date']]], [[['zebra', 'yak'], ['monkey', 'lion']]], [[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]], [[['single']]], [[[]]], [[[], []]], [[['same', 'same'], ['same']]], [[['one', 'two', 'three'], ['four', 'five']]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/576", "requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"", "entry_point": "is_Sub_Array", "canonical_solution": "def is_Sub_Array(A,B): \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)", "input_output_examples": "[[[[1, 4, 3, 5], [1, 2]]], [[False]]]", "starter_code": "from typing import List\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [1, 4]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], [3, 5]], [[1, 4, 3, 5], [1, 4, 3, 5]], [[1, 4, 3, 5], []], [[], [1, 2]], [[], []], [[1, 2, 3, 4, 5], [6, 7]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5], [2, 3, 4]], [[1, 2, 3, 4, 5], [5]]]", "qwen2.5-coder-32b-instruct": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], [1, 4, 3, 5]], [[1, 4, 3, 5], [5]], [[1, 4, 3, 5], []], [[], [1]], [[], []], [[1, 2, 3, 4, 5], [3, 4, 5]], [[10, 20, 30, 40, 50], [10, 20, 60]], [[1, 2, 3, 4, 5], [5, 4, 3]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/580", "requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "entry_point": "extract_even", "canonical_solution": "def even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\treturn even_ele(test_tuple)", "input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)]], [[(4, (6, (2, 4)), 6, 8)]]]", "starter_code": "def extract_even(test_tuple: tuple) -> tuple:", "requirement_without_examples": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(1, 2, (3, 4, (5, 6)), 7, 8)], [()], [(2, 4, 6, 8)], [(1, 3, 5, 7)], [((1, 2), (3, 4), (5, 6))], [(10, (11, 12, (13, 14)), 15)], [(0, (0, (0, 0)), 0)], [(-2, -4, (-6, -8))], [(2.5, 3.7, (4.0, 5.2))]]", "qwen2.5-coder-32b-instruct": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(1, 3, 5, 7)], [((2, 4, 6), (8, 10, 12))], [(11, (13, (15, 17)), 19)], [(2, (4, (6, (8, 10))), 12)], [((),)], [((2,),)], [(2, 4, 6, 8, 10)], [(1, (2, (3, (4, 5))), 6)]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/590", "requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "entry_point": "polar_rect", "canonical_solution": "import cmath\ndef polar_rect(x,y):\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)", "input_output_examples": "[[[3, 4]], [[((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]", "starter_code": "from typing import Tuple\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0, 0], [1, 0], [0, 1], [1, 1], [-1, -1], [3, 4], [-3, 4], [3, -4], [-3, -4], [10, 10], [-10, 10], [10, -10], [-10, -10], [0.5, 0.5], [-0.5, -0.5], [1000, 1000], [-1000, 1000]]", "qwen2.5-coder-32b-instruct": "[[3, 4], [0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [5, 12], [-3, -4], [1.5, 2.5], [-1.5, -2.5]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/598", "requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"", "entry_point": "armstrong_number", "canonical_solution": "def armstrong_number(number):\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number", "input_output_examples": "[[[153]], [[True]]]", "starter_code": "def armstrong_number(number: int) -> bool:", "requirement_without_examples": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[153], [370], [9474], [123], [0], [1], [1634], [8208], [54748], [9475], [-153], [9999]]", "qwen2.5-coder-32b-instruct": "[[153], [0], [1], [9474], [9475], [370], [371], [407], [10], [999999]]"}, "human_feedback": ["Ambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/610", "requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "entry_point": "remove_kth_element", "canonical_solution": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[[1, 1, 3, 4, 4, 5, 1]]]]", "starter_code": "from typing import List\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 1], [[7, 8, 9], 3], [[1, 1, 1, 1], 4], [[], 1], [[5, 10, 15], 0], [[2, 4, 6, 8], 5], [[3, 6, 9], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[10, 20, 30, 40, 50], 0], [[10, 20, 30, 40, 50], 4], [[10, 20, 30, 40, 50], 2], [[1, 2, 3], 1], [[1, 2, 3], 2], [[1, 2, 3], 0], [[1], 0], [[1, 1, 1, 1, 1], 2], [[1, 1, 1, 1, 1], 4], [[1, 1, 1, 1, 1], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/616", "requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "entry_point": "tuple_modulo", "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res)", "input_output_examples": "[[[(10, 4, 5, 6), (5, 6, 7, 5)]], [[(0, 4, 5, 1)]]]", "starter_code": "from typing import Tuple\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(15, 20, 25), (3, 4, 5)], [(0, 0, 0), (1, 1, 1)], [(1, 2, 3), (1, 2, 3)], [(7, 14, 21), (7, 7, 7)], [(5, 10, 15), (6, 11, 16)], [(10, 20, 30), (5, 10, 15)], [(1, 1, 1), (2, 2, 2)], [(100, 200, 300), (50, 100, 150)], [(-10, -4, -5), (5, 6, 7)], [(10, 4, 5), (-5, -6, -7)], [(-10, -4, -5), (-5, -6, -7)]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(1, 2, 3), (1, 1, 1)], [(0, 0, 0), (1, 2, 3)], [(9, 8, 7), (3, 3, 3)], [(-10, -20, -30), (3, 4, 5)], [(100, 200, 300), (10, 20, 30)], [(1, 1, 1), (2, 2, 2)], [(1, 0, 1), (1, 1, 1)]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/619", "requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "entry_point": "move_num", "canonical_solution": "def move_num(test_str):\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str", "input_output_examples": "[[['I1love143you55three3000thousand']], [['Iloveyouthreethousand1143553000']]]", "starter_code": "def move_num(test_str: str) -> str:", "requirement_without_examples": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['I1love143you55three3000thousand'], ['Hello123World456'], ['1234567890'], ['NoNumbersHere'], ['1a2b3c4d5e6f7g8h9i0j'], [''], ['Special!Chars@123'], ['123abc!@#']]", "qwen2.5-coder-32b-instruct": "[['I1love143you55three3000thousand'], ['123abc456'], ['abc'], ['123'], ['a1b2c3'], ['noNumbersHere!'], ['9876543210'], ['single9'], ['9single'], ['']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Unambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/733", "requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "entry_point": "find_first_occurrence", "canonical_solution": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "input_output_examples": "[[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5]], [[1]]]", "starter_code": "from typing import List\ndef find_first_occurrence(A: List[int], x: int) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 6], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[], 1], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 2], [[1, 3, 5, 7, 9], 9]]", "qwen2.5-coder-32b-instruct": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 3, 4, 5], 3], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 6], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 1], [[1, 3, 5, 7, 9], 9], [[1, 3, 5, 7, 9], 0], [[1, 3, 5, 7, 9], 10], [[1], 1], [[1], 2], [[], 1]]"}, "human_feedback": ["Ambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/755", "requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "entry_point": "second_smallest", "canonical_solution": "def second_smallest(numbers):\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]", "input_output_examples": "[[[[1, 2, -8, -2, 0, -2]]], [[-2]]]", "starter_code": "from typing import List\ndef second_smallest(numbers: List[int]) -> Optional[int]:", "requirement_without_examples": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, -8, -2, 0, -2]], [[5]], [[]], [[1, 1, 1, 1, 1]], [[10, 2, 5, 3, 8]], [[-10, -5, -20, -15]], [[0, 0, 0, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, -8, -2, 0, -2]], [[5, 5, 5, 5]], [[10]], [[]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[0, 0, 0, 0, 0, 1]], [[100, 200]], [[1, 1, 2, 2, 3, 3]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/759", "requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"", "entry_point": "is_decimal", "canonical_solution": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None", "input_output_examples": "[[['123.11']], [[True]]]", "starter_code": "def is_decimal(num: str) -> bool:", "requirement_without_examples": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['123.45'], ['0.00'], ['0.0'], ['123'], ['123.456'], ['.12'], ['12.'], ['-123.45'], ['abc.12'], ['12.abc'], [''], ['123.45.67'], ['123,45']]", "qwen2.5-coder-32b-instruct": "[['123.11'], ['0.99'], ['-123.45'], ['123.'], ['.11'], ['123.123'], ['abc.def'], ['123'], ['-0.99'], ['0.00'], ['1000.00'], ['-0.01'], ['123.00'], ['123.01'], ['123.1'], ['123.11a'], ['a123.11']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/760", "requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"", "entry_point": "unique_Element", "canonical_solution": "def unique_Element(arr):\n    return arr.count(arr[0]) == len(arr)", "input_output_examples": "[[[[1, 1, 1]]], [[True]]]", "starter_code": "from typing import List\ndef unique_Element(arr: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[5]], [[9, 9, 9, 9, 9, 9]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[7, 7, 8, 8]], [[10, 10, 10, 11]], [[]], [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[3]], [[1, 2, 3]], [[10, 10, 20]], [[]], [[5, 5, 5, 5, 5, 5]], [[7, 8]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/780", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "entry_point": "find_combinations", "canonical_solution": "from itertools import combinations \ndef find_combinations(test_list):\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]", "input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:", "requirement_without_examples": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (1, 1)]], [[(0, 0), (0, 0), (0, 0)]], [[(10, 20), (30, 40)]], [[]], [[(3, 5)]], [[(-1, -2), (3, 4)]], [[(1000000, 2000000), (3000000, 4000000)]]]", "qwen2.5-coder-32b-instruct": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (2, 2), (3, 3)]], [[]], [[(10, 20)]], [[(-1, -2), (-3, -4)]], [[(0, 0), (0, 1), (1, 0)]]]"}, "human_feedback": ["Unambiguous", "Ambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Ambiguous", "Ambiguous"]}
{"task_id": "Mbpp/790", "requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"", "entry_point": "even_position", "canonical_solution": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "input_output_examples": "[[[[3, 2, 1]]], [[False]]]", "starter_code": "from typing import List\ndef even_position(nums: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 2, 1]], [[2, 4, 6]], [[1, 3, 5]], [[0, 2, 4, 6]], [[1, 2, 3, 4, 5]], [[]], [[2]], [[1]], [[2, 3, 4, 5, 6]], [[3, 4, 5, 6, 7]]]", "qwen2.5-coder-32b-instruct": "[[[3, 2, 1]], [[0, 2, 4, 6, 8]], [[1, 3, 5, 7, 9]], [[2, 1, 4, 3, 6, 5]], [[0]], [[]], [[2, 3, 4, 5, 6, 7, 8, 9]], [[10, 11, 12, 13, 14, 15, 16, 17]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/800", "requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "entry_point": "remove_all_spaces", "canonical_solution": "def remove_all_spaces(text):\n return text.replace(' ', '')", "input_output_examples": "[[['python  program']], [['pythonprogram']]]", "starter_code": "def remove_all_spaces(text: str) -> str:", "requirement_without_examples": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['python  program'], ['   hello   world   '], ['no_spaces_here'], ['   '], [''], ['  spaces   in   between  '], ['leading_spaces'], ['trailing_spaces   '], ['   multiple    spaces   in   between   '], ['tab\\tspace'], ['newline\\nspace'], ['mixed\\tspaces\\nand\\tnewlines']]", "qwen2.5-coder-32b-instruct": "[['python  program'], ['  leading and trailing spaces  '], ['noSpacesHere'], ['   '], [''], ['singleword'], ['multiple    spaces    between'], ['\\tspaces\\tand\\nnewlines\\n']]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}
{"task_id": "Mbpp/804", "requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"", "entry_point": "is_product_even", "canonical_solution": "def is_product_even(arr): \n    return any(x % 2 == 0 for x in arr)", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]", "starter_code": "from typing import List\ndef is_product_even(arr: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[1, 3, 5, 7]], [[0, 1, 2]], [[]], [[2]], [[1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 3, 5, 7, 9, 11, 13]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[0, 1, 3]], [[1]], [[2]], [[]], [[1, -2, 3]], [[1, 3, -4]], [[-1, -3, -5]]]"}, "human_feedback": ["Ambiguous", "Unambiguous", "Ambiguous"], "human_feedback_without_examples": ["Ambiguous", "Unambiguous", "Ambiguous"]}
{"task_id": "Mbpp/805", "requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"", "entry_point": "max_sum_list", "canonical_solution": "def max_sum_list(lists):\n return max(lists, key=sum)", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], [[[10, 11, 12]]]]", "starter_code": "from typing import List\ndef max_sum_list(lists: List[List[int]]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[], [1, 2, 3], [4, 5, 6]]], [[[-1, -2, -3], [-4, -5, -6], [-10, -11, -12]]], [[[1], [2], [3]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[100], [1, 2, 3], [4, 5, 6]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[-1, -2, -3], [-4, -5, -6], [-10, -11, -12]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[100], [200], [300]]], [[[]]], [[[], [], []]], [[[1], [2, 3], [4, 5, 6]]]]"}, "human_feedback": ["Unambiguous", "Unambiguous", "Unambiguous"], "human_feedback_without_examples": ["Unambiguous", "Unambiguous", "Unambiguous"]}