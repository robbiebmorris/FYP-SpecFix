{"task_id": "HumanEval/50", "requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_shift", "canonical_solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n", "input_output_examples": "[[['hello'], ['mjqqt']], [['mjqqt'], ['hello']]]", "starter_code": "def decode_shift(s: str) -> str:", "requirement_without_examples": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['fghij'], ['abcde'], ['xyzab'], [''], ['klmno'], ['pqrst'], ['uvwxy'], ['zabcd']]", "qwen2.5-coder-32b-instruct": "[['mjqqt'], ['bmfyf'], ['zruog'], ['ezyjr'], ['jgnnqy'], ['fwxmxn'], ['a'], ['z'], [' '], ['!'], ['abcdefghijklmnopqrstuvwxyz'], ['xyzabc']]"}}
{"task_id": "HumanEval/52", "requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "entry_point": "below_threshold", "canonical_solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n\n    return all(x < t for x in l)\n\n", "input_output_examples": "[[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5]], [[True], [False]]]", "starter_code": "from typing import List\ndef below_threshold(l: List[int], t: int) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4], 5], [[10, 20, 30, 40], 50], [[1, 2, 3, 4], 4], [[-1, -2, -3, -4], 0], [[100, 200, 300, 400], 100], [[1, 2, 3, 4], 1], [[], 5], [[5, 5, 5, 5], 5], [[1, 2, 3, 4], 0], [[1, 2, 3, 4], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[0, -1, -5], 0], [[10, 10, 10], 10], [[10, 9, 8, 7], 10], [[], 10], [[5], 6], [[5], 5]]"}}
{"task_id": "HumanEval/56", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "input_output_examples": "[[['<'], ['<>'], ['<<><>>'], ['><<>']], [[False], [True], [True], [False]]]", "starter_code": "def correct_bracketing(brackets: str) -> bool:", "requirement_without_examples": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['><'], ['<<>>'], ['<><><><>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<>>>>>>>>>>><']]", "qwen2.5-coder-32b-instruct": "[['<'], ['<>'], ['<<><>>'], ['><><'], [''], ['<><><><>'], ['<<<<>>>>'], ['><><><><'], ['<<<>>>'], ['<<<><>>>'], ['<<<<<<<<<<>>>>>>>>>>'], ['<<<<<<<<<<><>>>>>>>>>>'], ['<<<<<<<<<<>><>>>>>>>>>'], ['<<<<<<<<<<>>>><>>>>>>>'], ['<<<<<<<<<<>>>>><>>>>>>'], ['<<<<<<<<<<>>>>>><>>>>>'], ['<<<<<<<<<<>>>>>>><>>>>'], ['<<<<<<<<<<>>>>>>>><>>>'], ['<<<<<<<<<<>>>>>>>>><>>'], ['<<<<<<<<<<>>>>>>>>>><>'], ['<<<<<<<<<<>>>>>>>>>>><'], ['<<<<<<<<<<>>>>>>>>>>>>']]"}}
{"task_id": "HumanEval/59", "requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "entry_point": "largest_prime_factor", "canonical_solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n", "input_output_examples": "[[[13195], [2048]], [[29], [2]]]", "starter_code": "def largest_prime_factor(n: int) -> int:", "requirement_without_examples": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[13195], [2048], [15], [123456], [2], [100]]", "qwen2.5-coder-32b-instruct": "[[13195], [2048], [600851475143], [100], [49], [104743], [221], [987], [4096], [6857]]"}}
{"task_id": "HumanEval/60", "requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "entry_point": "sum_to_n", "canonical_solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n\n\n    return (n + 1) * n // 2\n\n", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "starter_code": "def sum_to_n(n: int) -> int:", "requirement_without_examples": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5], [10], [30], [100], [1], [0], [-5], [10000]]", "qwen2.5-coder-32b-instruct": "[[30], [100], [5], [10], [1], [0], [-5], [-10], [1000]]"}}
{"task_id": "HumanEval/61", "requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "canonical_solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n", "input_output_examples": "[[['('], ['()'], ['(()())'], [')(()']], [[False], [True], [True], [False]]]", "starter_code": "def correct_bracketing(brackets: str) -> bool:", "requirement_without_examples": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['('], [')'], ['()'], ['(()())'], [')(()'], [''], ['((()))'], ['()()()'], ['(()'], ['())'], ['((()()())'], ['()()()())'], ['(((((())))))'], ['(()()()()()())'], ['(()()(()))']]", "qwen2.5-coder-32b-instruct": "[['('], [')'], ['()'], ['(()())'], [')(()'], ['(())'], ['((()))'], ['(()'], ['())'], [''], ['((((()))))'], ['(()))(()']]"}}
{"task_id": "HumanEval/63", "requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "entry_point": "fibfib", "canonical_solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n", "input_output_examples": "[[[1], [5], [8]], [[0], [4], [24]]]", "starter_code": "def fibfib(n: int) -> int:", "requirement_without_examples": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [-1]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30]]"}}
{"task_id": "HumanEval/64", "requirement": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "entry_point": "vowels_count", "canonical_solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['abcde'], ['ACEDY']], [[2], [3]]]", "starter_code": "def vowels_count(s: str) -> int:", "requirement_without_examples": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['abcde'], ['ACEDY'], ['hello'], ['sky'], ['rhythm'], ['aeiou'], ['y'], ['xyz'], ['quickly'], ['PYTHON'], [''], ['a'], ['e'], ['i'], ['o'], ['u'], ['y'], ['Y'], ['AeIoUy'], ['yYy'], ['hello world']]", "qwen2.5-coder-32b-instruct": "[['abcde'], ['ACEDY'], ['rhythm'], ['SYZYGY'], ['aeiou'], ['AEIOUY'], ['bcd'], [''], ['y'], ['Y'], ['quickly'], ['fly'], ['encyclopedia'], ['AeiOuY']]"}}
{"task_id": "HumanEval/65", "requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "entry_point": "circular_shift", "canonical_solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n", "input_output_examples": "[[[12, 1], [12, 2]], [['21'], ['12']]]", "starter_code": "def circular_shift(x: int, shift: int) -> str:", "requirement_without_examples": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[12345, 1], [12345, 3], [12345, 5], [12345, 6], [12345, 0], [987654321, 2], [987654321, 9], [987654321, 10], [100, 1], [100, 2], [100, 3], [100, 4], [0, 1], [0, 0], [123, -1]]", "qwen2.5-coder-32b-instruct": "[[12, 1], [12, 2], [12345, 3], [12345, 5], [12345, 6], [987654321, 9], [987654321, 10], [5, 1], [5, 2], [0, 1], [0, 0]]"}}
{"task_id": "HumanEval/66", "requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "entry_point": "digitSum", "canonical_solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n", "input_output_examples": "[[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa']], [[0], [131], [67], [69], [131], [153]]]", "starter_code": "def digitSum(s: str) -> int:", "requirement_without_examples": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['1234!@# $'], ['ABCDEFG'], ['XYZxyz'], ['NoNumbersHere']]", "qwen2.5-coder-32b-instruct": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['HELLO'], ['12345'], ['!@#$%'], ['UpperCASE'], ['lowercase'], ['MiXeDcAsE'], ['123abcABC']]"}}
{"task_id": "HumanEval/67", "requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "entry_point": "fruit_distribution", "canonical_solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "starter_code": "def fruit_distribution(s: str, n: int) -> int:", "requirement_without_examples": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['1 apples and 0 oranges', 10], ['0 apples and 5 oranges', 15], ['50 apples and 25 oranges', 100], ['7 apples and 8 oranges', 30]]", "qwen2.5-coder-32b-instruct": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['10 apples and 10 oranges', 20], ['50 apples and 50 oranges', 150], ['1 apples and 0 oranges', 2], ['0 apples and 1 oranges', 1], ['100 apples and 100 oranges', 300]]"}}
{"task_id": "HumanEval/68", "requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "entry_point": "pluck", "canonical_solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n", "input_output_examples": "[[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]]], [[[2, 1]], [[2, 1]], [[]], [[0, 1]]]]", "starter_code": "from typing import List\ndef pluck(arr: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5]], [[2, 4, 6, 8]], [[0, 0, 0]], [[10, 20, 30, 40, 50]], [[7, 9, 11]], [[6, 2, 8, 4]]]", "qwen2.5-coder-32b-instruct": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5, 7]], [[10, 20, 30, 40]], [[8, 8, 8, 8]], [[0]], [[11, 13, 17, 19, 2]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]]"}}
{"task_id": "HumanEval/77", "requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "entry_point": "iscube", "canonical_solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "starter_code": "def iscube(a: int) -> bool:", "requirement_without_examples": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [1000], [-1000], [8], [-8], [125], [-125], [1000000], [-1000000], [123456789], [-123456789]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [125], [-125], [1000], [-1000], [1001], [-1001]]"}}
{"task_id": "HumanEval/78", "requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "entry_point": "hex_key", "canonical_solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n", "input_output_examples": "[[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020']], [[1], [2], [4], [6], [2]]]", "starter_code": "def hex_key(num: str) -> int:", "requirement_without_examples": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], ['2F5A3C'], ['B0B1E'], ['D7A9'], ['0'], ['1'], ['F'], ['']]", "qwen2.5-coder-32b-instruct": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], [''], ['0'], ['1'], ['2'], ['3'], ['5'], ['7'], ['B'], ['D'], ['F'], ['123456789ABCDEF'], ['FFFFFFFF'], ['22222222'], ['33333333'], ['55555555'], ['77777777'], ['BBBBBBBB'], ['DDDDDDDD']]"}}
{"task_id": "HumanEval/81", "requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "entry_point": "numerical_letter_grade", "canonical_solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n", "input_output_examples": "[[[[4.0, 3, 1.7, 2, 3.5]]], [[['A+', 'B', 'C-', 'C', 'A-']]]]", "starter_code": "from typing import List\ndef numerical_letter_grade(grades: List[float]) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.5]], [[0.0]], [[4.0, 3.0, 1.7, 2.0, 3.5]], [[0.1, 1.0, 2.3, 3.7, 4.0]], [[0.0, 0.0, 0.0, 0.0, 0.0]], [[1.3, 2.7, 3.3, 4.0, 0.7]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[4.0]], [[3.8]], [[3.5]], [[3.2]], [[2.9]], [[2.5]], [[2.2]], [[1.9]], [[1.5]], [[1.2]], [[0.9]], [[0.8]], [[0.5]], [[0.0]], [[3.7]], [[3.3]], [[2.7]], [[2.3]], [[1.7]], [[1.3]], [[0.7]], [[0.1]], [[4.0, 3, 1.7, 2, 3.5]], [[]], [[5.0]], [[-0.1]]]"}}
{"task_id": "HumanEval/82", "requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "entry_point": "prime_length", "canonical_solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n", "input_output_examples": "[[['Hello'], ['abcdcba'], ['kittens'], ['orange']], [[True], [True], [True], [False]]]", "starter_code": "def prime_length(string: str) -> bool:", "requirement_without_examples": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], ['aa'], [''], ['abcdefghijklmno'], ['abcdefghijklmnopqrstuvwxyz'], ['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']]", "qwen2.5-coder-32b-instruct": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['a'], [''], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij'], ['abcdefghijk'], ['abcdefghijkl'], ['abcdefghijklm'], ['abcdefghijklmn'], ['abcdefghijklmnop'], ['abcdefghijklmnopq'], ['abcdefghijklmnopqr'], ['abcdefghijklmnopqrst']]"}}
{"task_id": "HumanEval/96", "requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "entry_point": "count_up_to", "canonical_solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n", "input_output_examples": "[[[5], [11], [0], [20], [1], [18]], [[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]]]]", "starter_code": "from typing import List\ndef count_up_to(n: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5], [11], [0], [20], [1], [18], [2], [3], [7], [100]]", "qwen2.5-coder-32b-instruct": "[[5], [11], [0], [20], [1], [18], [2], [100], [3], [4]]"}}
{"task_id": "HumanEval/102", "requirement": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"", "entry_point": "choose_num", "canonical_solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n", "input_output_examples": "[[[12, 15], [13, 12]], [[14], [-1]]]", "starter_code": "def choose_num(x: int, y: int) -> int:", "requirement_without_examples": "def choose_num(x: int, y: int) -> int:\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[12, 15], [13, 12], [10, 10], [11, 11], [1, 3], [2, 2], [100, 105], [99, 101], [0, 0], [0, 1]]", "qwen2.5-coder-32b-instruct": "[[12, 15], [13, 12], [8, 10], [7, 7], [20, 20], [1, 1], [0, 0], [2, 5], [10, 20], [15, 15], [22, 22], [21, 21], [100, 200], [99, 100]]"}}
{"task_id": "HumanEval/103", "requirement": "from typing import Union\n\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "entry_point": "rounded_avg", "canonical_solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n", "input_output_examples": "[[[1, 5], [7, 5], [10, 20], [20, 33]], [['0b11'], [-1], ['0b1111'], ['0b11010']]]", "starter_code": "from typing import Union\ndef rounded_avg(n: int, m: int) -> Union[str, int]:", "requirement_without_examples": "from typing import Union\n\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1, 5], [7, 5], [10, 20], [20, 33], [0, 0], [1, 1], [-1, 1], [100, 200], [999, 1001], [15, 15]]", "qwen2.5-coder-32b-instruct": "[[1, 5], [7, 5], [10, 20], [20, 33], [1, 1], [0, 0], [-1, 5], [5, -1], [100, 200], [999, 1000]]"}}
{"task_id": "HumanEval/107", "requirement": "from typing import Tuple\n\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "entry_point": "even_odd_palindrome", "canonical_solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n", "input_output_examples": "[[[3], [12]], [[(1, 2)], [(4, 6)]]]", "starter_code": "from typing import Tuple\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef even_odd_palindrome(n: int) -> Tuple[int, int]:\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [10], [12], [100], [101], [999], [1000], [500], [123], [456], [789], [111], [222], [333], [987], [654], [321], [13]]", "qwen2.5-coder-32b-instruct": "[[3], [12], [1], [2], [10], [100], [1000], [9], [11], [22]]"}}
{"task_id": "HumanEval/108", "requirement": "from typing import List\n\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"", "entry_point": "count_nums", "canonical_solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n", "input_output_examples": "[[[[]], [[-1, 11, -11]], [[1, 1, 2]]], [[0], [1], [3]]]", "starter_code": "from typing import List\ndef count_nums(arr: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef count_nums(arr: List[int]) -> int:\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-123, 456, -789]], [[10, -20, 30, -40, 50]], [[123, -456, 789, 0, -123]], [[111, 222, 333, -444, -555]]]", "qwen2.5-coder-32b-instruct": "[[[]], [[-1, 11, -11]], [[1, 1, 2]], [[0, 0, 0]], [[-10, 10, -100, 100]], [[999, -999, 1001, -1001]], [[123, 456, 789]], [[-123, -456, -789]], [[10, -10, 20, -20]], [[5, -5, 15, -15, 25, -25]]]"}}
{"task_id": "HumanEval/109", "requirement": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"", "entry_point": "move_one_ball", "canonical_solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n", "input_output_examples": "[[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]]], [[True], [False]]]", "starter_code": "from typing import List\ndef move_one_ball(arr: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef move_one_ball(arr: List[int]) -> bool:\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[]], [[1]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[4, 5, 1, 2, 3]], [[5, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[3, 4, 5, 1, 2]], [[3, 5, 4, 1, 2]], [[1, 2, 3, 4, 5]], [[5, 1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[1]], [[]], [[2, 1]], [[1, 3, 2]], [[4, 3, 2, 1]]]"}}
{"task_id": "HumanEval/113", "requirement": "from typing import List\n\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"", "entry_point": "odd_count", "canonical_solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n", "input_output_examples": "[[[['1234567']], [['3', '11111111']]], [[['the number of odd elements 4n the str4ng 4 of the 4nput.']], [['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']]]]", "starter_code": "from typing import List\ndef odd_count(lst: List[str]) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef odd_count(lst: List[str]) -> List[str]:\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[['1234567']], [['3', '11111111']], [['2468']], [['13579']], [['']], [['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']], [['123', '456', '789']], [['111', '222', '333', '444', '555']], [['00000', '11111', '22222', '33333', '44444', '55555']], [['9876543210']]]", "qwen2.5-coder-32b-instruct": "[[['1234567']], [['3', '11111111']], [['24680']], [['13579']], [['']], [['0']], [['1']], [['11', '22', '33', '44', '55']], [['123', '456', '789']]]"}}
{"task_id": "HumanEval/118", "requirement": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"", "entry_point": "get_closest_vowel", "canonical_solution": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n", "input_output_examples": "[[['yogurt'], ['FULL'], ['quick'], ['ab']], [['u'], ['U'], [''], ['']]]", "starter_code": "def get_closest_vowel(word: str) -> str:", "requirement_without_examples": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['banana'], ['strengths'], ['rhythm'], ['aeiou'], ['bcz'], ['xyz'], ['Hello'], ['Testing'], ['Aeiou'], ['BbCcDd'], ['ZzYyXx']]", "qwen2.5-coder-32b-instruct": "[['yogurt'], ['FULL'], ['quick'], ['ab'], ['rhythm'], ['beautiful'], ['sequence'], ['a'], ['aeiou'], ['bcdfg'], ['bAceId'], ['mIssissippi'], ['xylophone']]"}}
{"task_id": "HumanEval/121", "requirement": "from typing import List\n\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"", "entry_point": "solution", "canonical_solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n", "input_output_examples": "[[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]]], [[12], [9], [0]]]", "starter_code": "from typing import List\ndef solution(lst: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef solution(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[0, 0, 0, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1]], [[2]], [[11, 22, 33, 44, 55]], [[-1, -2, -3, -4, -5]], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]]", "qwen2.5-coder-32b-instruct": "[[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[1]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[11, 22, 33, 44, 55, 66]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[111, 222, 333, 444, 555]], [[7]]]"}}
{"task_id": "HumanEval/122", "requirement": "from typing import List\n\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "entry_point": "add_elements", "canonical_solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n", "input_output_examples": "[[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4]], [[24]]]", "starter_code": "from typing import List\ndef add_elements(arr: List[int], k: int) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef add_elements(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[1, 2, 3, 4, 5], 3], [[10, 20, 30, 40, 50], 5], [[99, 100, 101, 102, 103], 2], [[5, 15, 25, 35, 45], 1], [[123, 456, 789, 12, 34], 5], [[1, 2, 3], 3], [[100, 200, 300, 400, 500], 5], [[99, 98, 97, 96, 95], 5], [[10, 20, 30, 40, 50], 0], [[10], 1], [[1001, 2002, 3003], 3]]", "qwen2.5-coder-32b-instruct": "[[[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[10, 20, 30, 40, 50], 3], [[1, 2, 3, 4, 5], 5], [[100, 200, 3, 40, 5], 5], [[99, 100, 101, 102], 4], [[50, 50, 50, 50, 50], 2], [[123, 45, 67, 89, 10], 1], [[5, 5, 5, 5, 5], 0], [[99, 99, 99, 99, 99], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]"}}
{"task_id": "HumanEval/123", "requirement": "from typing import List\n\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"", "entry_point": "get_odd_collatz", "canonical_solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n", "input_output_examples": "[[[5]], [[[1, 5]]]]", "starter_code": "from typing import List\ndef get_odd_collatz(n: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef get_odd_collatz(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [6], [7], [10], [12], [15]]", "qwen2.5-coder-32b-instruct": "[[1], [5], [7], [10], [19], [27], [100]]"}}
{"task_id": "HumanEval/125", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''", "entry_point": "split_words", "canonical_solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n", "input_output_examples": "[[['Hello world!'], ['Hello,world!'], ['abcdef']], [[['Hello', 'world!']], [['Hello', 'world!']], [3]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef split_words(txt: str) -> Union[List[str], int]:", "requirement_without_examples": "from typing import List\nfrom typing import Union\n\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''", "llm_generated_inputs": {"deepseek-v3": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['This is a test'], ['One,Two,Three'], ['NoSpacesOrCommasHere'], ['  Leading and trailing spaces  '], ['Multiple   spaces   between   words'], [''], ['a'], ['A,B,C,D,E']]", "qwen2.5-coder-32b-instruct": "[['Hello world!'], ['Hello,world!'], ['abcdef'], ['a,b,c,d,e,f'], ['noSpacesOrCommas'], ['singleword'], ['multiple   spaces'], ['multiple,commas,here'], ['mixed, spaces and,commas'], [''], ['A quick brown fox jumps over the lazy dog'], ['z,y,x,w,v,u,t,s,r,q,p,o,n,m,l,k,j,i,h,g,f,e,d,c,b,a']]"}}
{"task_id": "HumanEval/127", "requirement": "from typing import Tuple\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"", "entry_point": "intersection", "canonical_solution": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n", "input_output_examples": "[[[[(1, 3), (2, 4)]], [[(1, 2), (2, 3)]], [((-1, 1), (0, 4))], [[(-3, -1), (-5, 5)]]], [['NO'], ['NO'], ['NO'], [['YES']]]]", "starter_code": "from typing import Tuple\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:", "requirement_without_examples": "from typing import Tuple\n\n\ndef intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. \n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(1, 3), (2, 4)], [(1, 5), (3, 7)], [(-3, -1), (-5, 5)], [(1, 2), (3, 4)], [(5, 5), (5, 5)], [(2, 10), (1, 3)], [(-10, -5), (-7, -6)], [(0, 10), (10, 20)], [(0, 10), (-5, 15)], [(3, 7), (3, 7)]]", "qwen2.5-coder-32b-instruct": "[[(1, 2), (2, 3)], [(-1, 1), (0, 4)], [(-3, -1), (-5, 5)], [(5, 10), (10, 15)], [(0, 0), (0, 0)], [(-10, -5), (-7, -3)], [(2, 5), (3, 7)], [(11, 19), (15, 22)], [(2, 2), (3, 3)], [(-20, -10), (-15, -5)]]"}}
{"task_id": "HumanEval/128", "requirement": "from typing import List\n\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"", "entry_point": "prod_signs", "canonical_solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n", "input_output_examples": "[[[[1, 2, 2, -4]], [[0, 1]], [[]]], [[-9], [0], [None]]]", "starter_code": "from typing import List\ndef prod_signs(arr: List[int]) -> Optional[int]:", "requirement_without_examples": "from typing import List\n\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[5, -3, 0, 2, -1]], [[-7, -2, -3]], [[10]], [[0, 0, 0]], [[-1, -1, -1, -1]], [[2, -2, 2, -2, 2]], [[1, 1, 1, 1, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 2, -4]], [[0, 1]], [[]], [[1, -1, 1, -1]], [[5]], [[-3]], [[0, 0, 0]], [[1, 0, -2]], [[10, -10, 10, -10]]]"}}
{"task_id": "HumanEval/137", "requirement": "from typing import Union\n\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"", "entry_point": "compare_one", "canonical_solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n", "input_output_examples": "[[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1]], [[2.5], ['2,3'], ['6'], [None]]]", "starter_code": "from typing import Union\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:", "requirement_without_examples": "from typing import Union\n\n\ndef compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.7, 3.7], ['3.7', '3,7'], ['10', '2'], [0, '0'], [-5, -3], ['-5.5', '-5,5'], ['7.2', 7.2], ['1000', '999']]", "qwen2.5-coder-32b-instruct": "[[1, 2.5], [1, '2,3'], ['5,1', '6'], ['1', 1], [3.5, 3.5], ['7', '7.0'], ['10', 10.0], [0, '0'], [-1, '-1'], [-2.5, '-2,5'], ['-3,5', -3.5], [100, '99,9'], ['100', 100], ['0,001', 0.001], [0.001, '0,001']]"}}
{"task_id": "HumanEval/138", "requirement": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"", "entry_point": "is_equal_to_sum_even", "canonical_solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    return n >= 8 and n % 2 == 0\n\n", "input_output_examples": "[[[4], [6], [8]], [[False], [False], [True]]]", "starter_code": "def is_equal_to_sum_even(n: int) -> bool:", "requirement_without_examples": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[4], [6], [8], [10], [12], [1], [0], [-2], [14], [16]]", "qwen2.5-coder-32b-instruct": "[[4], [6], [8], [10], [12], [14], [16], [20], [30], [0], [-4], [-8]]"}}
{"task_id": "HumanEval/140", "requirement": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"", "entry_point": "fix_spaces", "canonical_solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n", "input_output_examples": "[[['Example'], ['Example 1'], [' Example 2'], [' Example   3']], [['Example'], ['Example_1'], ['_Example_2'], ['_Example-3']]]", "starter_code": "def fix_spaces(text: str) -> str:", "requirement_without_examples": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['  '], ['   '], ['    '], ['Hello   World'], ['NoSpacesHere'], ['  LeadingSpaces'], ['TrailingSpaces  '], ['Multiple    Spaces   Here'], ['   Multiple   Leading   And   Trailing   Spaces   '], ['SingleSpace'], ['Two  Spaces'], ['Three   Spaces'], ['Four    Spaces'], ['Mixed   Spaces  Here'], ['   Mixed   Spaces   Everywhere   ']]", "qwen2.5-coder-32b-instruct": "[['Example'], ['Example 1'], [' Example 2'], [' Example   3'], ['Multiple    Spaces'], ['Single Space'], ['  Leading and trailing  '], ['NoSpacesHere'], ['   '], ['_'], ['__'], ['___'], ['a b c d e f g'], ['a   b   c   d']]"}}
{"task_id": "HumanEval/143", "requirement": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "entry_point": "words_in_sentence", "canonical_solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n", "input_output_examples": "[[['This is a test'], ['lets go for swimming']], [['is'], ['go for']]]", "starter_code": "def words_in_sentence(sentence: str) -> str:", "requirement_without_examples": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['This is a test'], ['lets go for swimming'], ['Hello world'], ['The quick brown fox jumps over the lazy dog'], ['a'], ['Prime numbers are fun'], ['One two three four five six seven'], ['I love programming'], ['Python is awesome'], ['Short words']]", "qwen2.5-coder-32b-instruct": "[['This is a test'], ['lets go for swimming'], ['a'], ['prime numbers are interesting'], ['I love python programming'], [' '], ['two words'], ['seveneleven'], ['ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az']]"}}
{"task_id": "HumanEval/146", "requirement": "from typing import List\n\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"", "entry_point": "specialFilter", "canonical_solution": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n", "input_output_examples": "[[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]]], [[1], [2]]]", "starter_code": "from typing import List\ndef specialFilter(nums: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef specialFilter(nums: List[int]) -> int:\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[10, 20, 30, 40]], [[11, 13, 15, 17, 19]], [[1, 3, 5, 7, 9]], [[21, 23, 25, 27, 29]], [[123, 456, 789, 101]], [[]], [[111, 222, 333, 444, 555]], [[-15, -33, -45, -109]]]", "qwen2.5-coder-32b-instruct": "[[[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[135, 579, 975, 753, 357]], [[10, 12, 14, 16, 18]], [[13, 31, 57, 75, 99]], [[]], [[111, 113, 115, 117, 119]], [[191, 393, 595, 797, 999]], [[21, 23, 25, 27, 29]]]"}}
{"task_id": "HumanEval/151", "requirement": "from typing import List\n\n\ndef double_the_difference(lst: List[int]) -> int:\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''", "entry_point": "double_the_difference", "canonical_solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n", "input_output_examples": "[[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]]], [[10], [0], [81], [0]]]", "starter_code": "from typing import List\ndef double_the_difference(lst: List[int]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef double_the_difference(lst: List[int]) -> int:\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    If the input list is empty, return 0.\n    '''", "llm_generated_inputs": {"deepseek-v3": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[2, 4, 6]], [[1, 3, 5]], [[1.5, 2.3, 3]], [[-1, -3, -5]], [[1, -1, 2, -2, 3, -3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 3, 2, 0]], [[-1, -2, 0]], [[9, -2]], [[0]], [[]], [[1, 2, 3, 4, 5]], [[11, 13, 15]], [[2, 4, 6, 8]], [[1.5, 3.5, 5.5]], [[7, -3, 2, -8, 0]], [[100, 200, 300]], [[1, 1, 1, 1]]]"}}
{"task_id": "HumanEval/152", "requirement": "from typing import List\n\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"", "entry_point": "compare", "canonical_solution": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n", "input_output_examples": "[[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]]], [[[0, 0, 0, 0, 3, 3]], [[4, 4, 1, 0, 0, 6]]]]", "starter_code": "from typing import List\ndef compare(game: List[int], guess: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[7, 8, 9], [9, 8, 7]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-1, -2, -3]], [[100, 200, 300], [150, 250, 350]], [[5, 10, 15], [10, 5, 20]], [[1, 1, 1], [2, 2, 2]], [[-5, -10, -15], [-10, -5, -20]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]], [[10, 20, 30], [10, 20, 30]], [[10, 20, 30], [30, 20, 10]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [2, 2, 2, 2]], [[100, 200, 300, 400], [100, 200, 300, 400]], [[100, 200, 300, 400], [400, 300, 200, 100]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [1, 1, 1, 1]], [[1], [1]], [[1], [2]]]"}}
{"task_id": "HumanEval/154", "requirement": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"", "entry_point": "cycpattern_check", "canonical_solution": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n", "input_output_examples": "[[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen']], [[False], [True], [False], [True], [False], [True]]]", "starter_code": "def cycpattern_check(a: str, b: str) -> bool:", "requirement_without_examples": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['abcdef', 'efabcd'], ['xyz', 'xyz'], ['', ''], ['abc', ''], ['', 'abc'], ['a', 'a'], ['abcde', 'edcba'], ['longerword', 'wordlonger'], ['rotation', 'tationro']]", "qwen2.5-coder-32b-instruct": "[['abcd', 'abd'], ['hello', 'ell'], ['whassup', 'psus'], ['abab', 'baa'], ['efef', 'eeff'], ['himenss', 'simen'], ['rotation', 'tationro'], ['rotation', 'rotation'], ['rotation', 'otationr'], ['a', 'a'], ['a', 'b'], ['', ''], ['abcde', 'edcba'], ['aaaa', 'aa'], ['abcdefg', 'efga'], ['abcdefg', 'gha']]"}}
{"task_id": "HumanEval/159", "requirement": "from typing import List\n\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "entry_point": "eat", "canonical_solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n", "input_output_examples": "[[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5]], [[[11, 4]], [[12, 1]], [[11, 0]], [[7, 0]]]]", "starter_code": "from typing import List\ndef eat(number: int, need: int, remaining: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [0, 0, 100], [50, 50, 50], [100, 200, 150], [500, 600, 700], [1000, 1000, 1000], [0, 1000, 1000], [1000, 0, 1000], [1000, 1000, 0], [500, 1000, 500], [1000, 500, 500]]", "qwen2.5-coder-32b-instruct": "[[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [0, 0, 0], [1000, 1000, 1000], [500, 500, 250], [500, 250, 500], [0, 1000, 500], [0, 1000, 1000], [1000, 0, 0]]"}}
{"task_id": "HumanEval/161", "requirement": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "entry_point": "solve", "canonical_solution": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n", "input_output_examples": "[[['1234'], ['ab'], ['#a@C']], [['4321'], ['AB'], ['#A@c']]]", "starter_code": "def solve(s: str) -> str:", "requirement_without_examples": "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], [''], ['123abcDEF!@#'], ['NoSpacesHere'], ['   '], ['A1B2C3'], ['!@#$%^&*()']]", "qwen2.5-coder-32b-instruct": "[['1234'], ['ab'], ['#a@C'], ['Hello World!'], ['123abcXYZ'], ['!@#$%^&*()'], ['aBcDeFgHiJ'], ['9876543210'], [''], ['a'], ['A'], ['1']]"}}
{"task_id": "Mbpp/98", "requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"", "entry_point": "multiply_num", "canonical_solution": "def multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)", "input_output_examples": "[[[[8, 2, 3, -1, 7]]], [[-67.2]]]", "starter_code": "from typing import List\ndef multiply_num(numbers: List[int]) -> float:", "requirement_without_examples": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[8, 2, 3, -1, 7]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[0, 0, 0, 0]], [[10]], [[]], [[1, -1, 1, -1]], [[1000000, 2000000, 3000000]]]", "qwen2.5-coder-32b-instruct": "[[[8, 2, 3, -1, 7]], [[1, 1, 1, 1, 1]], [[0, 0, 0, 0]], [[5]], [[-1, -2, -3, -4]], [[10, -10, 10, -10]], [[100, 200, 300]]]"}}
{"task_id": "Mbpp/102", "requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "entry_point": "snake_to_camel", "canonical_solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "input_output_examples": "[[['python_program']], [['PythonProgram']]]", "starter_code": "def snake_to_camel(word: str) -> str:", "requirement_without_examples": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['python_program'], ['snake_case_example'], ['single'], ['multiple_underscores__in__a__row'], ['__leading_and_trailing_underscores__'], ['empty_string'], ['alreadyCamelCase'], ['ALL_CAPS_SNAKE_CASE'], ['mixed_Case_Snake']]", "qwen2.5-coder-32b-instruct": "[['python_program'], ['this_is_a_test'], ['singleword'], ['multiple__underscores'], ['leading_underscore'], ['trailing_underscore_'], ['__both_ends__'], [''], ['_'], ['alreadyCamelCase']]"}}
{"task_id": "Mbpp/105", "requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"", "entry_point": "count", "canonical_solution": "def count(lst):   \n    return sum(lst)", "input_output_examples": "[[[[True, False, True]]], [[2]]]", "starter_code": "from typing import List\ndef count(lst: List[bool]) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[True, False, True]], [[True, True, True]], [[False, False, False]], [[True]], [[False]], [[]], [[True, False, True, False, True, False, True]], [[True, True, True, False, False, False, True]]]", "qwen2.5-coder-32b-instruct": "[[[True, False, True]], [[False, False, False]], [[True, True, True]], [[]], [[True]], [[False]]]"}}
{"task_id": "Mbpp/118", "requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "entry_point": "string_to_list", "canonical_solution": "def string_to_list(string): \n    return string.split(\" \")", "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]", "starter_code": "from typing import List\ndef string_to_list(string: str) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['python programming'], ['hello world'], ['single'], ['multiple    spaces'], [''], [' '], ['  leading spaces'], ['trailing spaces  '], ['  both  ends  ']]", "qwen2.5-coder-32b-instruct": "[['python programming'], ['singleword'], ['multiple   spaces'], [' leading and trailing '], [' '], [''], ['123 456 789'], ['special!@# $%^&*() characters']]"}}
{"task_id": "Mbpp/224", "requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"", "entry_point": "count_Set_Bits", "canonical_solution": "def count_Set_Bits(n): \n    return bin(n)[2:].count('1')", "input_output_examples": "[[[2]], [[1]]]", "starter_code": "from typing import Set\ndef count_Set_Bits(n: int) -> int:", "requirement_without_examples": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [255], [-1], [1023], [1024]]", "qwen2.5-coder-32b-instruct": "[[2], [0], [1], [15], [31], [255], [1023], [1048575], [2147483647]]"}}
{"task_id": "Mbpp/233", "requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"", "entry_point": "lateralsuface_cylinder", "canonical_solution": "import math\ndef lateralsuface_cylinder(r, h):\n  return 2 * math.pi * r * h", "input_output_examples": "[[[10, 5]], [[314.15000000000003]]]", "starter_code": "def lateralsuface_cylinder(r: float, h: float) -> float:", "requirement_without_examples": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[10.0, 5.0], [0.0, 5.0], [10.0, 0.0], [0.0, 0.0], [-10.0, 5.0], [10.0, -5.0], [-10.0, -5.0], [1.5, 3.5], [100.0, 200.0], [0.001, 0.001]]", "qwen2.5-coder-32b-instruct": "[[10, 5], [0, 5], [10, 0], [0, 0], [1, 1], [3.5, 7.2], [-1, 5], [10, -5], [-1, -5]]"}}
{"task_id": "Mbpp/237", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "entry_point": "check_occurences", "canonical_solution": "from collections import Counter \ndef check_occurences(test_list):\n  return dict(Counter(tuple(sorted(t)) for t in test_list))", "input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]]], [[{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:", "requirement_without_examples": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[]], [[(1, 2), (1, 2), (1, 2)]], [[(1,), (2,), (3,)]], [[(1, 'a'), (2, 'b'), (1, 'a'), (3, 'c')]], [[(1, 2, 3), (1, 2, 3), (4, 5, 6)]], [[(1, 2), (3, 4), (5, 6), (1, 2)]], [[(True, False), (False, True), (True, False)]], [[(1.0, 2.0), (2.0, 1.0), (3.0, 4.0)]], [[(None, None), (None, None)]]]", "qwen2.5-coder-32b-instruct": "[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[(1, 2), (2, 1), (1, 2), (2, 1)]], [[(1, 1), (1, 1), (1, 1)]], [[]], [[(1, 2, 3), (3, 2, 1), (1, 2, 3)]], [[(1,)]], [[(1, 2), (2, 3), (3, 4), (4, 5)]]]"}}
{"task_id": "Mbpp/267", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"", "entry_point": "square_Sum", "canonical_solution": "def square_Sum(n):  \n    return n * (4 * n * n - 1) / 3", "input_output_examples": "[[[2]], [[10]]]", "starter_code": "def square_Sum(n: int) -> float:", "requirement_without_examples": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [-1], [10]]", "qwen2.5-coder-32b-instruct": "[[2], [1], [3], [0], [-1], [10]]"}}
{"task_id": "Mbpp/271", "requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"", "entry_point": "even_Power_Sum", "canonical_solution": "def even_Power_Sum(n): \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))", "input_output_examples": "[[[2]], [[1056]]]", "starter_code": "def even_Power_Sum(n: int) -> int:", "requirement_without_examples": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [3], [0], [10], [100]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [0], [-1], [10]]"}}
{"task_id": "Mbpp/282", "requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "entry_point": "sub_list", "canonical_solution": "def sub_list(nums1,nums2):\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]", "input_output_examples": "[[[[1, 2, 3], [4, 5, 6]]], [[[-3, -3, -3]]]]", "starter_code": "from typing import List\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [1, 2, 3]], [[-1, -2, -3], [1, 2, 3]], [[0, 0, 0], [0, 0, 0]], [[5, -5, 10], [-5, 5, -10]], [[1], [1]], [[100, 200], [50, 150]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [1, 2, 3]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-4, -5, -6]], [[1, 2], [1, 2, 3]], [[1, 2, 3], [1, 2]], [[100, 200, 300], [100, 200, 300]], [[1], [1]], [[], []]]"}}
{"task_id": "Mbpp/293", "requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "entry_point": "otherside_rightangle", "canonical_solution": "import math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w * w + h * h)", "input_output_examples": "[[[7, 8]], [[10.63014581273465]]]", "starter_code": "def otherside_rightangle(w: float, h: float) -> float:", "requirement_without_examples": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[7.0, 8.0], [3.0, 4.0], [5.0, 12.0], [0.0, 0.0], [-3.0, 4.0], [3.0, -4.0], [1.0, 1.0], [1.4142135623730951, 1.4142135623730951]]", "qwen2.5-coder-32b-instruct": "[[7, 8], [3, 4], [5, 12], [8, 15], [0, 0], [0, 5], [5, 0], [-3, 4], [3, -4], [-3, -4]]"}}
{"task_id": "Mbpp/305", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "entry_point": "start_withp", "canonical_solution": "import re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "input_output_examples": "[[[['Python PHP', 'Java JavaScript', 'c c++']]], [[('Python', 'PHP')]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef start_withp(words: List[str]) -> Tuple[str, str]:", "requirement_without_examples": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['Pandas', 'Pytest', 'Flask', 'PySpark']], [['Java', 'JavaScript', 'C++', 'Python']], [['Perl', 'PHP', 'Prolog', 'Pascal']], [['Ruby', 'Rust', 'Go', 'Swift']], [['Python', 'PHP', 'Java', 'C++']], [['Pizza', 'Pasta', 'Burger', 'Sandwich']], [['Python', 'Pandas', 'Pytest', 'PySpark']], [[]], [['Python', 'PHP', 'Pandas', 'Pytest', 'PySpark']]]", "qwen2.5-coder-32b-instruct": "[[['Python PHP', 'Java JavaScript', 'c c++']], [['pandas', 'programming', 'python']], [['apple', 'banana', 'cherry']], [['Pineapple', 'peach', 'plum']], [['', 'p', 'pp']], [['no p here', 'nothing', 'still nothing']], [['P P P', 'P Q R', 'Q P R']]]"}}
{"task_id": "Mbpp/308", "requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "entry_point": "large_product", "canonical_solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], [[[60, 54, 50]]]]", "starter_code": "from typing import List\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2], [3, 4], 2], [[10, 20, 30], [1, 2, 3], 1], [[-1, -2, -3], [-4, -5, -6], 2], [[0, 0, 0], [1, 2, 3], 3], [[1, 2, 3], [0, 0, 0], 2], [[], [1, 2, 3], 0], [[1, 2, 3], [], 0], [[1], [1], 1], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2], [3, 4], 1], [[10, 20, 30], [1, 2, 3], 2], [[5, 5, 5], [5, 5, 5], 3], [[-1, -2, -3], [-4, -5, -6], 2], [[0, 0, 0], [0, 0, 0], 1], [[100, 200], [1, 2], 3], [[1, 2, 3], [4, 5, 6], 0], [[1, 2, 3], [4, 5, 6], 5], [[1, 2, 3], [], 2], [[], [1, 2, 3], 2]]"}}
{"task_id": "Mbpp/312", "requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"", "entry_point": "volume_cone", "canonical_solution": "import math\ndef volume_cone(r,h):\n  return (1.0 / 3) * math.pi * r * r * h", "input_output_examples": "[[[5, 12]], [[314.15926535897927]]]", "starter_code": "def volume_cone(r: float, h: float) -> float:", "requirement_without_examples": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5.0, 12.0], [0.0, 12.0], [5.0, 0.0], [0.0, 0.0], [1.0, 1.0], [10.0, 20.0], [2.5, 3.5], [-5.0, 12.0], [5.0, -12.0], [-5.0, -12.0]]", "qwen2.5-coder-32b-instruct": "[[5, 12], [0, 12], [5, 0], [0, 0], [3.5, 7.2], [-5, 12], [5, -12], [-5, -12], [1000000.0, 1000000.0], [1e-06, 1e-06]]"}}
{"task_id": "Mbpp/404", "requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"", "entry_point": "minimum", "canonical_solution": "def minimum(a,b):   \n    return min(a,b)", "input_output_examples": "[[[1, 2]], [[1]]]", "starter_code": "def minimum(a: int, b: int) -> int:", "requirement_without_examples": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1, 2], [5, 3], [-1, -2], [0, 0], [-5, 5], [100, 100], [2147483647, -2147483648]]", "qwen2.5-coder-32b-instruct": "[[1, 2], [-1, -2], [0, 0], [100, 200], [-100, 100], [5, 5], [-5, -5], [2147483647, 2147483646], [-2147483648, -2147483647]]"}}
{"task_id": "Mbpp/410", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "entry_point": "min_val", "canonical_solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[2]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef min_val(listval: List[Union[int, Any]]) -> int:", "requirement_without_examples": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 2, 1, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[10, 'hello', 20, 30, 'world']], [[-5, -10, -1, -3]], [[0, 0, 0, 0]], [[100]], [[]], [['a', 'b', 'c']], [[True, False, 1, 0]], [[None, 5, 3, 7]], [[1.5, 2.3, 0.9, 3.1]]]", "qwen2.5-coder-32b-instruct": "[[[3, 1, 4, 1, 5, 9]], [['apple', 100, 200, 'banana', 50]], [[0, -1, -2, 'zero', 'negative']], [[True, False, 1, 0, 'true', 'false']], [[3.14, 2.71, 'pi', 'e', 1.618]], [[1000000, 999999, 'large', 'number']], [[1]], [[]]]"}}
{"task_id": "Mbpp/436", "requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"", "entry_point": "neg_nos", "canonical_solution": "def neg_nos(list1):\n  return [i for i in list1 if i < 0]", "input_output_examples": "[[[[-1, 4, 5, -6]]], [[[-1, -6]]]]", "starter_code": "from typing import List\ndef neg_nos(list1: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[-1, 4, 5, -6]], [[0, 1, 2, 3]], [[-10, -20, -30]], [[100, -200, 300, -400]], [[]], [[-1, -1, -1, -1]], [[1, 2, 3, -4, -5, 6]]]", "qwen2.5-coder-32b-instruct": "[[[-1, 4, 5, -6]], [[0, 2, 3, 4]], [[-1, -2, -3, -4]], [[1, 2, 3, 4]], [[]], [[0]], [[-1, 0, 1]]]"}}
{"task_id": "Mbpp/440", "requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "entry_point": "find_adverb_position", "canonical_solution": "import re\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))", "input_output_examples": "[[['clearly!! we can see the sky']], [[(0, 7, 'clearly')]]]", "starter_code": "from typing import Tuple\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['clearly!! we can see the sky'], ['She quickly ran to the store'], ['He spoke softly to avoid waking the baby'], ['The car suddenly stopped at the intersection'], ['They happily accepted the invitation'], ['The dog barked loudly at the stranger'], ['She carefully placed the vase on the table'], ['The sun slowly set behind the mountains'], ['He quietly left the room'], ['The bird flew swiftly across the sky'], ['The teacher patiently explained the concept'], ['The child eagerly opened the gift'], ['The wind blew gently through the trees'], ['The cat silently crept towards the mouse'], ['The boy bravely faced the challenge'], ['The audience clapped enthusiastically after the performance'], ['The river flowed smoothly through the valley'], ['The man confidently delivered his speech'], ['The woman gracefully danced across the stage'], ['The team successfully completed the project']]", "qwen2.5-coder-32b-instruct": "[['clearly!! we can see the sky'], ['we can see the sky clearly!!'], ['she sings beautifully'], ['quickly and quietly he left'], ['no adverbs here'], [' '], [''], ['adverbially speaking, this is correct'], ['this sentence has an adverb too quickly'], ['evenly distributed adverbs are tricky']]"}}
{"task_id": "Mbpp/447", "requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "entry_point": "cube_nums", "canonical_solution": "def cube_nums(nums):\n    return [n**3 for n in nums]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]]]]", "starter_code": "from typing import List\ndef cube_nums(nums: List[int]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[0, -1, -2, -3]], [[]], [[10]], [[-5, 5]], [[100, 200, 300]], [[-100, -200, -300]], [[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[0]], [[1, -1, 2, -2]], [[100, 200, 300]]]"}}
{"task_id": "Mbpp/450", "requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "entry_point": "extract_string", "canonical_solution": "def extract_string(str1, l):\n    return [e for e in str1 if len(e) == l]", "input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]], [[['practice', 'solution']]]]", "starter_code": "from typing import List\ndef extract_string(str1: List[str], l: int) -> List[str]:", "requirement_without_examples": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['hello', 'world', 'foo', 'bar', 'baz'], 3], [['a', 'bb', 'ccc', 'dddd', 'eeeee'], 1], [['short', 'medium', 'longer', 'longest'], 10], [[], 5], [['one', 'two', 'three', 'four'], 0], [['single'], 6], [['multiple', 'words', 'with', 'different', 'lengths'], 7]]", "qwen2.5-coder-32b-instruct": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['short', 'longer', 'longest', 'tiny'], 5], [['equal', 'equal', 'equal'], 5], [[], 3], [['a', 'ab', 'abc'], 1], [['one', 'two', 'three'], 4], [['boundary', 'condition', 'test'], 7], [['same', 'size', 'test'], 4]]"}}
{"task_id": "Mbpp/453", "requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"", "entry_point": "sumofFactors", "canonical_solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])", "input_output_examples": "[[[18]], [[26]]]", "starter_code": "def sumofFactors(n: int) -> int:", "requirement_without_examples": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[18], [1], [2], [7], [20], [0], [-12]]", "qwen2.5-coder-32b-instruct": "[[18], [1], [2], [3], [12], [100], [0], [-5], [49], [36]]"}}
{"task_id": "Mbpp/465", "requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "entry_point": "drop_empty", "canonical_solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "input_output_examples": "[[[{'c1': 'Red', 'c2': 'Green', 'c3': None}]], [[{'c1': 'Red', 'c2': 'Green'}]]]", "starter_code": "def drop_empty(dict1: dict) -> dict:", "requirement_without_examples": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{'a': 1, 'b': [], 'c': '', 'd': {}, 'e': 0}], [{'x': 'Hello', 'y': None, 'z': 'World'}], [{'key1': False, 'key2': True, 'key3': None}], [{'name': 'Alice', 'age': 25, 'city': ''}], [{}], [{'a': None, 'b': None, 'c': None}], [{'x': 0, 'y': 0.0, 'z': '0'}]]", "qwen2.5-coder-32b-instruct": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{'a': '', 'b': ' ', 'c': None, 'd': False}], [{'key1': 'value1', 'key2': [], 'key3': {}, 'key4': ()}], [{'key1': 'value1', 'key2': 'value2'}], [{}], [{'empty': None, 'zero': 0, 'blank': ''}]]"}}
{"task_id": "Mbpp/470", "requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "entry_point": "add_pairwise", "canonical_solution": "def add_pairwise(test_tup):\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(6, 12, 15, 18)]]]", "starter_code": "from typing import Tuple\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0)], [(1,)], [(-1, 1, -1, 1)], [(100, 200, 300)], [(3, -3, 3, -3)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(0,)], [(1000000, 2000000, 3000000, 4000000)], [(-100, -200, -300, -400)]]", "qwen2.5-coder-32b-instruct": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0)], [(-1, -2, -3, -4)], [(10, 20)], [(5,)], [(1,)], [()]]"}}
{"task_id": "Mbpp/569", "requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "entry_point": "sort_sublists", "canonical_solution": "def sort_sublists(list1):\n    return list(map(sorted,list1))", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]", "starter_code": "from typing import List\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:", "requirement_without_examples": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry'], ['date', 'elderberry', 'fig']]], [[['zebra', 'apple', 'mango'], ['grape', 'kiwi'], ['banana']]], [[['x', 'y', 'z'], ['a', 'c', 'b'], ['d']]], [[[''], ['a'], ['b', 'a']]], [[[], ['a', 'b'], ['c', 'd', 'e']]], [[['a', 'a', 'b'], ['c', 'c', 'c'], ['d', 'e', 'e']]]]", "qwen2.5-coder-32b-instruct": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cherry', 'date']]], [[['zebra', 'yak'], ['monkey', 'lion']]], [[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]], [[['single']]], [[[]]], [[[], []]], [[['same', 'same'], ['same']]], [[['one', 'two', 'three'], ['four', 'five']]]]"}}
{"task_id": "Mbpp/576", "requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"", "entry_point": "is_Sub_Array", "canonical_solution": "def is_Sub_Array(A,B): \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)", "input_output_examples": "[[[[1, 4, 3, 5], [1, 2]]], [[False]]]", "starter_code": "from typing import List\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [1, 4]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], [3, 5]], [[1, 4, 3, 5], [1, 4, 3, 5]], [[1, 4, 3, 5], []], [[], [1, 2]], [[], []], [[1, 2, 3, 4, 5], [6, 7]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5], [2, 3, 4]], [[1, 2, 3, 4, 5], [5]]]", "qwen2.5-coder-32b-instruct": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], [1, 4, 3, 5]], [[1, 4, 3, 5], [5]], [[1, 4, 3, 5], []], [[], [1]], [[], []], [[1, 2, 3, 4, 5], [3, 4, 5]], [[10, 20, 30, 40, 50], [10, 20, 60]], [[1, 2, 3, 4, 5], [5, 4, 3]]]"}}
{"task_id": "Mbpp/580", "requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "entry_point": "extract_even", "canonical_solution": "def even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\treturn even_ele(test_tuple)", "input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)]], [[(4, (6, (2, 4)), 6, 8)]]]", "starter_code": "def extract_even(test_tuple: tuple) -> tuple:", "requirement_without_examples": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(1, 2, (3, 4, (5, 6)), 7, 8)], [()], [(2, 4, 6, 8)], [(1, 3, 5, 7)], [((1, 2), (3, 4), (5, 6))], [(10, (11, 12, (13, 14)), 15)], [(0, (0, (0, 0)), 0)], [(-2, -4, (-6, -8))], [(2.5, 3.7, (4.0, 5.2))]]", "qwen2.5-coder-32b-instruct": "[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(1, 3, 5, 7)], [((2, 4, 6), (8, 10, 12))], [(11, (13, (15, 17)), 19)], [(2, (4, (6, (8, 10))), 12)], [((),)], [((2,),)], [(2, 4, 6, 8, 10)], [(1, (2, (3, (4, 5))), 6)]]"}}
{"task_id": "Mbpp/590", "requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "entry_point": "polar_rect", "canonical_solution": "import cmath\ndef polar_rect(x,y):\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)", "input_output_examples": "[[[3, 4]], [[((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]", "starter_code": "from typing import Tuple\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0, 0], [1, 0], [0, 1], [1, 1], [-1, -1], [3, 4], [-3, 4], [3, -4], [-3, -4], [10, 10], [-10, 10], [10, -10], [-10, -10], [0.5, 0.5], [-0.5, -0.5], [1000, 1000], [-1000, 1000]]", "qwen2.5-coder-32b-instruct": "[[3, 4], [0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [5, 12], [-3, -4], [1.5, 2.5], [-1.5, -2.5]]"}}
{"task_id": "Mbpp/598", "requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"", "entry_point": "armstrong_number", "canonical_solution": "def armstrong_number(number):\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number", "input_output_examples": "[[[153]], [[True]]]", "starter_code": "def armstrong_number(number: int) -> bool:", "requirement_without_examples": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[153], [370], [9474], [123], [0], [1], [1634], [8208], [54748], [9475], [-153], [9999]]", "qwen2.5-coder-32b-instruct": "[[153], [0], [1], [9474], [9475], [370], [371], [407], [10], [999999]]"}}
{"task_id": "Mbpp/610", "requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "entry_point": "remove_kth_element", "canonical_solution": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[[1, 1, 3, 4, 4, 5, 1]]]]", "starter_code": "from typing import List\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 1], [[7, 8, 9], 3], [[1, 1, 1, 1], 4], [[], 1], [[5, 10, 15], 0], [[2, 4, 6, 8], 5], [[3, 6, 9], -1]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[10, 20, 30, 40, 50], 0], [[10, 20, 30, 40, 50], 4], [[10, 20, 30, 40, 50], 2], [[1, 2, 3], 1], [[1, 2, 3], 2], [[1, 2, 3], 0], [[1], 0], [[1, 1, 1, 1, 1], 2], [[1, 1, 1, 1, 1], 4], [[1, 1, 1, 1, 1], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]"}}
{"task_id": "Mbpp/616", "requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "entry_point": "tuple_modulo", "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res)", "input_output_examples": "[[[(10, 4, 5, 6), (5, 6, 7, 5)]], [[(0, 4, 5, 1)]]]", "starter_code": "from typing import Tuple\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:", "requirement_without_examples": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(15, 20, 25), (3, 4, 5)], [(0, 0, 0), (1, 1, 1)], [(1, 2, 3), (1, 2, 3)], [(7, 14, 21), (7, 7, 7)], [(5, 10, 15), (6, 11, 16)], [(10, 20, 30), (5, 10, 15)], [(1, 1, 1), (2, 2, 2)], [(100, 200, 300), (50, 100, 150)], [(-10, -4, -5), (5, 6, 7)], [(10, 4, 5), (-5, -6, -7)], [(-10, -4, -5), (-5, -6, -7)]]", "qwen2.5-coder-32b-instruct": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(1, 2, 3), (1, 1, 1)], [(0, 0, 0), (1, 2, 3)], [(9, 8, 7), (3, 3, 3)], [(-10, -20, -30), (3, 4, 5)], [(100, 200, 300), (10, 20, 30)], [(1, 1, 1), (2, 2, 2)], [(1, 0, 1), (1, 1, 1)]]"}}
{"task_id": "Mbpp/619", "requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "entry_point": "move_num", "canonical_solution": "def move_num(test_str):\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str", "input_output_examples": "[[['I1love143you55three3000thousand']], [['Iloveyouthreethousand1143553000']]]", "starter_code": "def move_num(test_str: str) -> str:", "requirement_without_examples": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['I1love143you55three3000thousand'], ['Hello123World456'], ['1234567890'], ['NoNumbersHere'], ['1a2b3c4d5e6f7g8h9i0j'], [''], ['Special!Chars@123'], ['123abc!@#']]", "qwen2.5-coder-32b-instruct": "[['I1love143you55three3000thousand'], ['123abc456'], ['abc'], ['123'], ['a1b2c3'], ['noNumbersHere!'], ['9876543210'], ['single9'], ['9single'], ['']]"}}
{"task_id": "Mbpp/733", "requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "entry_point": "find_first_occurrence", "canonical_solution": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "input_output_examples": "[[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5]], [[1]]]", "starter_code": "from typing import List\ndef find_first_occurrence(A: List[int], x: int) -> int:", "requirement_without_examples": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 6], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 5], [[], 1], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 2], [[1, 3, 5, 7, 9], 9]]", "qwen2.5-coder-32b-instruct": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 3, 4, 5], 3], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 6], [[5, 5, 5, 5, 5], 5], [[1, 3, 5, 7, 9], 1], [[1, 3, 5, 7, 9], 9], [[1, 3, 5, 7, 9], 0], [[1, 3, 5, 7, 9], 10], [[1], 1], [[1], 2], [[], 1]]"}}
{"task_id": "Mbpp/755", "requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "entry_point": "second_smallest", "canonical_solution": "def second_smallest(numbers):\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]", "input_output_examples": "[[[[1, 2, -8, -2, 0, -2]]], [[-2]]]", "starter_code": "from typing import List\ndef second_smallest(numbers: List[int]) -> Optional[int]:", "requirement_without_examples": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, -8, -2, 0, -2]], [[5]], [[]], [[1, 1, 1, 1, 1]], [[10, 2, 5, 3, 8]], [[-10, -5, -20, -15]], [[0, 0, 0, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, -8, -2, 0, -2]], [[5, 5, 5, 5]], [[10]], [[]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[0, 0, 0, 0, 0, 1]], [[100, 200]], [[1, 1, 2, 2, 3, 3]]]"}}
{"task_id": "Mbpp/759", "requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"", "entry_point": "is_decimal", "canonical_solution": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None", "input_output_examples": "[[['123.11']], [[True]]]", "starter_code": "def is_decimal(num: str) -> bool:", "requirement_without_examples": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['123.45'], ['0.00'], ['0.0'], ['123'], ['123.456'], ['.12'], ['12.'], ['-123.45'], ['abc.12'], ['12.abc'], [''], ['123.45.67'], ['123,45']]", "qwen2.5-coder-32b-instruct": "[['123.11'], ['0.99'], ['-123.45'], ['123.'], ['.11'], ['123.123'], ['abc.def'], ['123'], ['-0.99'], ['0.00'], ['1000.00'], ['-0.01'], ['123.00'], ['123.01'], ['123.1'], ['123.11a'], ['a123.11']]"}}
{"task_id": "Mbpp/760", "requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"", "entry_point": "unique_Element", "canonical_solution": "def unique_Element(arr):\n    return arr.count(arr[0]) == len(arr)", "input_output_examples": "[[[[1, 1, 1]]], [[True]]]", "starter_code": "from typing import List\ndef unique_Element(arr: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[5]], [[9, 9, 9, 9, 9, 9]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[7, 7, 8, 8]], [[10, 10, 10, 11]], [[]], [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 1]], [[2, 2, 2, 2]], [[3]], [[1, 2, 3]], [[10, 10, 20]], [[]], [[5, 5, 5, 5, 5, 5]], [[7, 8]]]"}}
{"task_id": "Mbpp/780", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "entry_point": "find_combinations", "canonical_solution": "from itertools import combinations \ndef find_combinations(test_list):\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]", "input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:", "requirement_without_examples": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (1, 1)]], [[(0, 0), (0, 0), (0, 0)]], [[(10, 20), (30, 40)]], [[]], [[(3, 5)]], [[(-1, -2), (3, 4)]], [[(1000000, 2000000), (3000000, 4000000)]]]", "qwen2.5-coder-32b-instruct": "[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(1, 1), (2, 2), (3, 3)]], [[]], [[(10, 20)]], [[(-1, -2), (-3, -4)]], [[(0, 0), (0, 1), (1, 0)]]]"}}
{"task_id": "Mbpp/790", "requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"", "entry_point": "even_position", "canonical_solution": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "input_output_examples": "[[[[3, 2, 1]]], [[False]]]", "starter_code": "from typing import List\ndef even_position(nums: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 2, 1]], [[2, 4, 6]], [[1, 3, 5]], [[0, 2, 4, 6]], [[1, 2, 3, 4, 5]], [[]], [[2]], [[1]], [[2, 3, 4, 5, 6]], [[3, 4, 5, 6, 7]]]", "qwen2.5-coder-32b-instruct": "[[[3, 2, 1]], [[0, 2, 4, 6, 8]], [[1, 3, 5, 7, 9]], [[2, 1, 4, 3, 6, 5]], [[0]], [[]], [[2, 3, 4, 5, 6, 7, 8, 9]], [[10, 11, 12, 13, 14, 15, 16, 17]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]"}}
{"task_id": "Mbpp/800", "requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "entry_point": "remove_all_spaces", "canonical_solution": "def remove_all_spaces(text):\n return text.replace(' ', '')", "input_output_examples": "[[['python  program']], [['pythonprogram']]]", "starter_code": "def remove_all_spaces(text: str) -> str:", "requirement_without_examples": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['python  program'], ['   hello   world   '], ['no_spaces_here'], ['   '], [''], ['  spaces   in   between  '], ['leading_spaces'], ['trailing_spaces   '], ['   multiple    spaces   in   between   '], ['tab\\tspace'], ['newline\\nspace'], ['mixed\\tspaces\\nand\\tnewlines']]", "qwen2.5-coder-32b-instruct": "[['python  program'], ['  leading and trailing spaces  '], ['noSpacesHere'], ['   '], [''], ['singleword'], ['multiple    spaces    between'], ['\\tspaces\\tand\\nnewlines\\n']]"}}
{"task_id": "Mbpp/804", "requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"", "entry_point": "is_product_even", "canonical_solution": "def is_product_even(arr): \n    return any(x % 2 == 0 for x in arr)", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]", "starter_code": "from typing import List\ndef is_product_even(arr: List[int]) -> bool:", "requirement_without_examples": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[1, 3, 5, 7]], [[0, 1, 2]], [[]], [[2]], [[1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 3, 5, 7, 9, 11, 13]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[0, 1, 3]], [[1]], [[2]], [[]], [[1, -2, 3]], [[1, 3, -4]], [[-1, -3, -5]]]"}}
{"task_id": "Mbpp/805", "requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"", "entry_point": "max_sum_list", "canonical_solution": "def max_sum_list(lists):\n return max(lists, key=sum)", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], [[[10, 11, 12]]]]", "starter_code": "from typing import List\ndef max_sum_list(lists: List[List[int]]) -> List[int]:", "requirement_without_examples": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[], [1, 2, 3], [4, 5, 6]]], [[[-1, -2, -3], [-4, -5, -6], [-10, -11, -12]]], [[[1], [2], [3]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[100], [1, 2, 3], [4, 5, 6]]], [[[1, 2, 3], [1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]", "qwen2.5-coder-32b-instruct": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[-1, -2, -3], [-4, -5, -6], [-10, -11, -12]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[100], [200], [300]]], [[[]]], [[[], [], []]], [[[1], [2, 3], [4, 5, 6]]]]"}}
{"requirement": "def say_hello(name: str) -> str:\n\"\"\"## Debugging sayHello function\n\nThe starship Enterprise has run into some problem when creating a program to greet everyone as they come aboard. It is your job to fix the code and get the program working again!\n\nExample output: \n```\nHello, Mr. Spock\n```\n\"\"\"", "inputs": [["Mr. Spock"], ["Captain Kirk"], ["Liutenant Uhura"], ["Dr. McCoy"], ["Mr. Scott"]], "outputs": [["Hello, Mr. Spock"], ["Hello, Captain Kirk"], ["Hello, Liutenant Uhura"], ["Hello, Dr. McCoy"], ["Hello, Mr. Scott"]], "starter_code": "def say_hello(name: str) -> str:", "canonical_solution": "def say_hello(name):\n    return f'Hello, {name}'", "entry_point": "say_hello", "task_id": "TACO_lite/118", "input_output_examples": "[[['Mr. Spock']], [['Hello, Mr. Spock']]]", "requirement_without_examples": "def say_hello(name: str) -> str:\n\"\"\"## Debugging sayHello function\n\nThe starship Enterprise has run into some problem when creating a program to greet everyone as they come aboard. It is your job to fix the code and get the program working again!\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['Mr. Spock'], ['Captain Kirk'], ['Dr. McCoy'], ['Lieutenant Uhura'], ['Scotty'], [''], [' '], ['123'], ['!@#'], ['Mr. Spock, Captain Kirk']]", "qwen2.5-coder-32b-instruct": "[['Mr. Spock'], ['Captain Kirk'], [''], ['12345'], ['_!@#$%^&*()'], ['Dr. McCoy'], ['Scotty']]"}}
{"requirement": "def finance(n: int) -> float:\n\"\"\"I need to save some money to buy a gift. I think I can do something like that:\n\nFirst week (W0) I save nothing on Sunday, 1 on Monday, 2 on Tuesday... 6 on Saturday,\nsecond week (W1) 2 on Monday... 7 on Saturday and so on according to the table below where the days are numbered from 0 to 6.\n\nCan you tell me how much I will have for my gift on Saturday evening after I have saved 12? (Your function finance(6) should return 168 which is the sum of the savings in the table). \n\nImagine now that we live on planet XY140Z-n where the days of the week are numbered from 0 to n (integer n > 0) and where\nI save from week number 0 to week number n included (in the table below n = 6).\n\nHow much money would I have at the end of my financing plan on planet XY140Z-n?\n\n\n\n  -- |Su|Mo|Tu|We|Th|Fr|Sa|\n   --|--|--|--|--|--|--|--|\n  W6 |  |  |  |  |  |  |12|\n  W5 |  |  |  |  |  |10|11|\n  W4 |  |  |  |  |8 |9 |10|\n  W3 |  |  |  |6 |7 |8 |9 |\n  W2 |  |  |4 |5 |6 |7 |8 |\n  W1 |  |2 |3 |4 |5 |6 |7 |\n  W0 |0 |1 |2 |3 |4 |5 |6 |\n  \n#Example:\n```\nfinance(5) --> 105\nfinance(6) --> 168\nfinance(7) --> 252\nfinance(5000) --> 62537505000\n```\n#Hint: \ntry to avoid nested loops\n\"\"\"", "inputs": [[5], [6], [8], [15], [100], [365], [730], [999], [2000], [4000], [5000]], "outputs": [[105], [168], [360], [2040], [515100], [24513765], [195308580], [499999500], [4006002000], [32024004000], [62537505000]], "starter_code": "def finance(n: int) -> float:", "canonical_solution": "def finance(n):\n    return n * (n + 1) * (n + 2) / 2", "entry_point": "finance", "task_id": "TACO_lite/185", "input_output_examples": "[[[5], [6], [7], [5000]], [[105], [168], [252], [62537505000]]]", "requirement_without_examples": "def finance(n: int) -> float:\n\"\"\"I need to save some money to buy a gift. I think I can do something like that:\n\nFirst week (W0) I save nothing on Sunday, 1 on Monday, 2 on Tuesday... 6 on Saturday,\nsecond week (W1) 2 on Monday... 7 on Saturday and so on according to the table below where the days are numbered from 0 to 6.\n\nImagine now that we live on planet XY140Z-n where the days of the week are numbered from 0 to n (integer n > 0) and where\nI save from week number 0 to week number n included (in the table below n = 6).\n\nHow much money would I have at the end of my financing plan on planet XY140Z-n?\n\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [5], [6], [7], [10], [100], [5000]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [3], [4], [5], [6], [7], [10], [100], [500], [1000], [5000], [10000], [1], [0], [-1]]"}}
{"requirement": "def solve(s: str) -> int:\n\"\"\"The vowel substrings in the word `codewarriors` are `o,e,a,io`. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.\nVowels are any of `aeiou`. \n\n\n```if:csharp\nDocumentation:\nKata.Solve Method (String)\n\nReturns the length of the greatest continuous vowel substring in a string.\n\nSyntax\n\n\npublic\nstatic\nint Solve(\nstring str\n    )\n  \n\n\nParameters\n\nstr\n\nType: System.String\nThe string to be processed.\n\nReturn Value\n\nType: System.Int32\n  The length of the greatest continuous vowel substring in str, or 0 if str contains no vowels.\n\n\nExceptions\n\n\n\nException\nCondition\n\nArgumentNullException\nstr is null.\n\n\n\n\n```\n\n\nGood luck!\n\nIf you like substring Katas, please try:\n\n[Non-even substrings](https://www.codewars.com/kata/59da47fa27ee00a8b90000b4)\n\n[Vowel-consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\n\"\"\"", "inputs": [["codewarriors"], ["suoidea"], ["ultrarevolutionariees"], ["strengthlessnesses"], ["cuboideonavicuare"], ["chrononhotonthuooaos"], ["iiihoovaeaaaoougjyaw"]], "outputs": [[2], [3], [3], [1], [2], [5], [8]], "starter_code": "def solve(s: str) -> int:", "canonical_solution": "def solve(s):\n    return max(map(len, ''.join((c if c in 'aeiou' else ' ' for c in s)).split()))", "entry_point": "solve", "task_id": "TACO_lite/212", "input_output_examples": "[[['codewarriors']], [[2]]]", "requirement_without_examples": "def solve(s: str) -> int:\n\"\"\"The vowel substrings in the word `codewarriors` are `o,e,a,io`. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.\nVowels are any of `aeiou`. \n\n\n```if:csharp\nDocumentation:\nKata.Solve Method (String)\n\nReturns the length of the greatest continuous vowel substring in a string.\n\nSyntax\n\n\npublic\nstatic\nint Solve(\nstring str\n    )\n  \n\n\nParameters\n\nstr\n\nType: System.String\nThe string to be processed.\n\nReturn Value\n\nType: System.Int32\n  The length of the greatest continuous vowel substring in str, or 0 if str contains no vowels.\n\n\nExceptions\n\n\n\nException\nCondition\n\nArgumentNullException\nstr is null.\n\n\n\n\n```\n\n\nGood luck!\n\nIf you like substring Katas, please try:\n\n[Non-even substrings](https://www.codewars.com/kata/59da47fa27ee00a8b90000b4)\n\n[Vowel-consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['codewarriors'], ['aeiou'], ['bcdfghjklmnpqrstvwxyz'], ['aabbcceeiiouu'], ['uoiea'], ['abcdeiou'], ['aaeeiioouu'], ['xyzabc'], ['aeioubcd'], ['a'], ['e'], ['i'], ['o'], ['u'], ['']]", "qwen2.5-coder-32b-instruct": "[['codewarriors'], ['aeiou'], ['bcdfg'], ['a'], ['z'], ['aaaaa'], ['abcde'], ['uiaeiouaeiou'], ['xyzabc'], ['aeioubcdaeiou']]"}}
{"requirement": "def longer(s: str) -> str:\n\"\"\"Create a function `longer` that accepts a string and sorts the words in it based on their respective lengths in an ascending order. If there are two words of the same lengths, sort them alphabetically. Look at the examples below for more details.\n\n```python\nlonger(\"Another Green World\") => Green World Another\nlonger(\"Darkness on the edge of Town\") => of on the Town edge Darkness\nlonger(\"Have you ever Seen the Rain\") => the you Have Rain Seen ever\n```\n\nAssume that only only Alphabets will be entered as the input.\nUppercase characters have priority over lowercase characters. That is,\n```python\nlonger(\"hello Hello\") => Hello hello\n```\n\nDon't forget to rate this kata and leave your feedback!! \nThanks\n\"\"\"", "inputs": [["Another Green World"], ["Darkness on the edge of Town"], ["Have you ever Seen the Rain"], ["Like a Rolling Stone"], ["This will be our Year"], ["hello Hello"]], "outputs": [["Green World Another"], ["of on the Town edge Darkness"], ["the you Have Rain Seen ever"], ["a Like Stone Rolling"], ["be our This Year will"], ["Hello hello"]], "starter_code": "def longer(s: str) -> str:", "canonical_solution": "def longer(s):\n    return ' '.join(sorted(s.split(), key=lambda w: (len(w), w)))", "entry_point": "longer", "task_id": "TACO_lite/219", "input_output_examples": "[[['Another Green World'], ['Darkness on the edge of Town'], ['Have you ever Seen the Rain'], ['hello Hello']], [['Green World Another'], ['of on the Town edge Darkness'], ['the you Have Rain Seen ever'], ['Hello hello']]]", "requirement_without_examples": "def longer(s: str) -> str:\n\"\"\"Create a function `longer` that accepts a string and sorts the words in it based on their respective lengths in an ascending order. If there are two words of the same lengths, sort them alphabetically.\n\nAssume that only Alphabets will be entered as the input.\nUppercase characters have priority over lowercase characters. \n\nDon't forget to rate this kata and leave your feedback!! \nThanks\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['Another Green World'], ['Darkness on the edge of Town'], ['Have you ever Seen the Rain'], ['hello Hello'], ['a A bb BB ccc CCC'], ['The quick brown fox jumps over the lazy dog'], ['Python is fun'], ['Aa Bb Cc Dd Ee Ff Gg'], ['SingleWord'], ['']]", "qwen2.5-coder-32b-instruct": "[['Another Green World'], ['Darkness on the edge of Town'], ['Have you ever Seen the Rain'], ['hello Hello'], ['a A b B c C'], ['singleword'], ['same same same'], ['UPPER lower Middle'], ['short longer shortest longest'], ['equal equal equal equal']]"}}
{"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef segments(m: int, arr: List[Tuple[int, int]]) -> List[int]:\n\"\"\"You are given a set of `n` segments on the axis `Ox`, each segment has integer endpoints between `0` and `m` inclusive.\n Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers li and ri — coordinates of the left and of the right endpoints.\n\n Consider all integer points between `0` and `m` inclusive. Your task is to print all such points that don't belong to any segment. The point x belongs to the segment `[l;r]` if and only if `l ≤ x ≤ r`.\n\n**Input:**\n `m` — the upper bound for coordinates;\n array of coordinates li and ri `0 ≤ li ≤ ri ≤ m` — the endpoints of the `i`-th segment. Segments may intersect, overlap or even coincide with each other.\n\n**Output:**\n All points from `0` to `m` that don't belong to any segment.\n\n**Examples:**\n```python\nsegments(5, [(2,2),(1,2),(5,5)]) => [0,3,4]\nsegments(7, [(0,7)]) => []\n```\n\"\"\"", "inputs": [[7, [[0, 7]]], [2, []], [0, []], [0, [[0, 0]]]], "outputs": [[[]], [[0, 1, 2]], [[0]], [[]]], "starter_code": "from typing import List\nfrom typing import Tuple\ndef segments(m: int, arr: List[Tuple[int, int]]) -> List[int]:", "canonical_solution": "def segments(m, arr):\n    return [i for i in range(m + 1) if not any((a <= i <= b for a, b in arr))]", "entry_point": "segments", "task_id": "TACO_lite/242", "input_output_examples": "[[[5, [(2, 2), (1, 2), (5, 5)]], [7, [(0, 7)]]], [[[0, 3, 4]], [[]]]]", "requirement_without_examples": "from typing import List\nfrom typing import Tuple\n\n\ndef segments(m: int, arr: List[Tuple[int, int]]) -> List[int]:\n\"\"\"You are given a set of `n` segments on the axis `Ox`, each segment has integer endpoints between `0` and `m` inclusive.\n Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers li and ri — coordinates of the left and of the right endpoints.\n\n Consider all integer points between `0` and `m` inclusive. Your task is to print all such points that don't belong to any segment. The point x belongs to the segment `[l;r]` if and only if `l ≤ x ≤ r`.\n\n**Input:**\n `m` — the upper bound for coordinates;\n array of coordinates li and ri `0 ≤ li ≤ ri ≤ m` — the endpoints of the `i`-th segment. Segments may intersect, overlap or even coincide with each other.\n\n**Output:**\n All points from `0` to `m` that don't belong to any segment.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5, [(2, 2), (1, 2), (5, 5)]], [7, [(0, 7)]], [10, [(1, 3), (7, 9)]], [4, [(0, 2), (3, 4)]], [6, []], [3, [(0, 0), (1, 1), (2, 2), (3, 3)]], [8, [(2, 5), (6, 7)]], [5, [(0, 5)]], [9, [(1, 3), (4, 6), (7, 9)]], [2, [(0, 1), (1, 2)]]]", "qwen2.5-coder-32b-instruct": "[[5, [(2, 2), (1, 2), (5, 5)]], [7, [(0, 7)]], [10, [(1, 3), (6, 8)]], [0, []], [1, [(0, 0)]], [1, [(1, 1)]], [10, [(0, 0), (10, 10)]], [10, [(0, 5), (6, 10)]], [10, [(0, 9), (1, 10)]], [10, [(5, 5), (5, 5)]]]"}}
{"requirement": "def stairs(n: int) -> str:\n\"\"\"Raj was to move up through a pattern of stairs of a given number **(n)**. Help him to get to the    top using the function **stairs**.\n\n##Keep in mind :\n  * If **n<1** then return ' ' .\n  * There are a lot of spaces before the stair starts except for **pattern(1)**\n\n\n##Examples :\n  pattern(1)\n\n          1 1\n\n  pattern(6)\n\n                          1 1\n                      1 2 2 1  \n                  1 2 3 3 2 1\n              1 2 3 4 4 3 2 1\n          1 2 3 4 5 5 4 3 2 1\n      1 2 3 4 5 6 6 5 4 3 2 1\n\npattern(12)\n\n                                                  1 1\n                                              1 2 2 1\n                                          1 2 3 3 2 1\n                                      1 2 3 4 4 3 2 1\n                                  1 2 3 4 5 5 4 3 2 1\n                              1 2 3 4 5 6 6 5 4 3 2 1\n                          1 2 3 4 5 6 7 7 6 5 4 3 2 1\n                      1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                  1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n              1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n          1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n      1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1\n\"\"\"", "inputs": [[3], [7], [10], [16]], "outputs": [["        1 1\n    1 2 2 1\n1 2 3 3 2 1"], ["                        1 1\n                    1 2 2 1\n                1 2 3 3 2 1\n            1 2 3 4 4 3 2 1\n        1 2 3 4 5 5 4 3 2 1\n    1 2 3 4 5 6 6 5 4 3 2 1\n1 2 3 4 5 6 7 7 6 5 4 3 2 1"], ["                                    1 1\n                                1 2 2 1\n                            1 2 3 3 2 1\n                        1 2 3 4 4 3 2 1\n                    1 2 3 4 5 5 4 3 2 1\n                1 2 3 4 5 6 6 5 4 3 2 1\n            1 2 3 4 5 6 7 7 6 5 4 3 2 1\n        1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n    1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1"], ["                                                            1 1\n                                                        1 2 2 1\n                                                    1 2 3 3 2 1\n                                                1 2 3 4 4 3 2 1\n                                            1 2 3 4 5 5 4 3 2 1\n                                        1 2 3 4 5 6 6 5 4 3 2 1\n                                    1 2 3 4 5 6 7 7 6 5 4 3 2 1\n                                1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                            1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n                        1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n                    1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n                1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1\n            1 2 3 4 5 6 7 8 9 0 1 2 3 3 2 1 0 9 8 7 6 5 4 3 2 1\n        1 2 3 4 5 6 7 8 9 0 1 2 3 4 4 3 2 1 0 9 8 7 6 5 4 3 2 1\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1"]], "starter_code": "def stairs(n: int) -> str:", "canonical_solution": "def stairs(n):\n    return '\\n'.join((step(i).rjust(4 * n - 1) for i in range(1, n + 1)))\n\ndef step(n):\n    h = ' '.join((str(i % 10) for i in range(1, n + 1)))\n    return f'{h} {h[::-1]}'", "entry_point": "stairs", "task_id": "TACO_lite/257", "input_output_examples": "[[], []]", "requirement_without_examples": "def stairs(n: int) -> str:\n\"\"\"Raj was to move up through a pattern of stairs of a given number **(n)**. Help him to get to the    top using the function **stairs**.\n\n##Keep in mind :\n  * If **n<1** then return ' ' .\n  * There are a lot of spaces before the stair starts except for **pattern(1)**\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [6], [12], [0], [-1], [2], [3], [10]]", "qwen2.5-coder-32b-instruct": "[[1], [6], [12], [0], [-5], [20]]"}}
{"requirement": "from typing import List\n\n\ndef bar_triang(a: List[float], b: List[float], c: List[float]) -> List[float]:\n\"\"\"The medians of a triangle are the segments that unit the vertices with the midpoint of their opposite sides.\nThe three medians of a triangle intersect at the same point, called the barycenter or the centroid.\nGiven a triangle, defined by the cartesian coordinates of its vertices we need to localize its barycenter or centroid.\n\nThe function ```bar_triang() or barTriang or bar-triang```, receives the coordinates of the three vertices ```A, B and C ``` as three different arguments and outputs the coordinates of the barycenter ```O``` in an array ```[xO, yO]```\n\nThis is how our asked function should work:\nthe result of the coordinates should be expressed up to four decimals, (rounded result).\n\nYou know that the coordinates of the barycenter are given by the following formulas.\n\n\n\nFor additional information about this important point of a triangle see at: (https://en.wikipedia.org/wiki/Centroid)\n\nLet's see some cases:\n```python\nbar_triang([4, 6], [12, 4], [10, 10]) ------> [8.6667, 6.6667]\n\nbar_triang([4, 2], [12, 2], [6, 10] ------> [7.3333, 4.6667]\n```\nThe given points form a real or a degenerate triangle but in each case the above formulas can be used.\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]], [[4, 8], [8, 2], [16, 6]]], "outputs": [[[8.6667, 6.6667]], [[7.3333, 4.6667]], [[9.3333, 5.3333]]], "starter_code": "from typing import List\ndef bar_triang(a: List[float], b: List[float], c: List[float]) -> List[float]:", "canonical_solution": "def bar_triang(a, b, c):\n    return [round(sum(x) / 3.0, 4) for x in zip(a, b, c)]", "entry_point": "bar_triang", "task_id": "TACO_lite/274", "input_output_examples": "[[[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]]], [[[8.6667, 6.6667]], [[7.3333, 4.6667]]]]", "requirement_without_examples": "from typing import List\n\n\ndef bar_triang(a: List[float], b: List[float], c: List[float]) -> List[float]:\n\"\"\"The medians of a triangle are the segments that unit the vertices with the midpoint of their opposite sides.\nThe three medians of a triangle intersect at the same point, called the barycenter or the centroid.\nGiven a triangle, defined by the cartesian coordinates of its vertices we need to localize its barycenter or centroid.\n\nThe function ```bar_triang() or barTriang or bar-triang```, receives the coordinates of the three vertices ```A, B and C ``` as three different arguments and outputs the coordinates of the barycenter ```O``` in an array ```[xO, yO]```\n\nThis is how our asked function should work:\nthe result of the coordinates should be expressed up to four decimals, (rounded result).\n\nYou know that the coordinates of the barycenter are given by the following formulas.\n\n\n\nFor additional information about this important point of a triangle see at: (https://en.wikipedia.org/wiki/Centroid)\n\nThe given points form a real or a degenerate triangle but in each case the above formulas can be used.\n\nEnjoy it and happy coding!!\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]], [[0, 0], [0, 0], [0, 0]], [[1, 1], [2, 2], [3, 3]], [[-1, -1], [1, 1], [0, 0]], [[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]], [[0, 0], [1, 0], [0.5, 0.866]], [[1, 1], [1, 1], [1, 1]], [[-1.5, -2.5], [-3.5, -4.5], [-5.5, -6.5]], [[0, 0], [0, 10], [10, 0]]]", "qwen2.5-coder-32b-instruct": "[[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]], [[0, 0], [1, 0], [0, 1]], [[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]], [[100, 100], [200, 200], [300, 300]], [[-1, -1], [-2, -2], [-3, -3]], [[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]], [[0, 0], [10, 0], [0, 10]], [[10, 0], [0, 10], [5, 5]]]"}}
{"requirement": "from typing import List\n\n\ndef solve(arr: List[int]) -> int:\n\"\"\"In this Kata, you will be given an array of integers and your task is to return the number of arithmetic progressions of size `3` that are possible from that list. In each progression, the differences between the elements must be the same.\n\n```\n[1, 2, 3, 5, 7, 9] ==> 5\n// [1, 2, 3], [1, 3, 5], [1, 5, 9], [3, 5, 7], and [5, 7, 9]\n```\n\nAll inputs will be sorted. More examples in test cases. \n\nGood luck!\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 5, 7, 9]], [[0, 5, 8, 9, 11, 13, 14, 16, 17, 19]], [[0, 1, 2, 3, 5, 6, 7, 11, 13, 15, 17, 19]], [[0, 1, 4, 5, 7, 9, 10, 13, 15, 16, 18, 19]], [[0, 1, 2, 3, 5, 8, 11, 13, 14, 16, 18, 19]]], "outputs": [[4], [5], [10], [17], [15], [13]], "starter_code": "from typing import List\ndef solve(arr: List[int]) -> int:", "canonical_solution": "def solve(arr):\n    return sum((y - x == z - y for i, x in enumerate(arr[:-2]) for j, y in enumerate(arr[i + 1:-1]) for _, z in enumerate(arr[j + 1:])))", "entry_point": "solve", "task_id": "TACO_lite/316", "input_output_examples": "[[[[1, 2, 3, 5, 7, 9]]], [[5]]]", "requirement_without_examples": "from typing import List\n\n\ndef solve(arr: List[int]) -> int:\n\"\"\"In this Kata, you will be given an array of integers and your task is to return the number of arithmetic progressions of size `3` that are possible from that list. In each progression, the differences between the elements must be the same.\n\nAll inputs will be sorted. \n\nGood luck!\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 5, 7, 9]], [[1, 2, 3, 4, 5]], [[10, 20, 30, 40, 50, 60]], [[1, 1, 1, 1, 1]], [[1, 3, 5, 7, 9, 11, 13]], [[5]], [[2, 4, 6, 8, 10, 12, 14, 16]], [[1, 5, 9, 13, 17, 21]], [[0, 0, 0, 0, 0, 0, 0]], [[3, 6, 9, 12, 15, 18, 21]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 5, 7, 9]], [[1, 3, 5, 7, 9]], [[1, 2, 4, 8, 16]], [[5, 7, 9]], [[1, 2, 3]], [[10, 20, 30, 40, 50]], [[1, 2]], [[1]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]"}}
{"requirement": "def poohbear(s: str) -> str:\n\"\"\"Create a function that interprets code in the esoteric language **Poohbear**\n\n## The Language\n\nPoohbear is a stack-based language largely inspired by Brainfuck. It has a maximum integer value of 255, and 30,000 cells. The original intention of Poohbear was to be able to send messages that would, to most, be completely indecipherable: \nPoohbear Wiki\n\n* For the purposes of this kata, you will make a version of Poohbear that has **infinite** memory cells in **both directions** (so you do not need to limit cells to 30,000)\n* Cells have a default value of 0\n* Each cell can hold one byte of data.  Once a cell's value goes above 255, it wraps around to 0.  If a cell's value goes below 0, it wraps to 255.\n* If the result of an operation isn't an int, round the result down to the nearest one.\n* Your interpreter should ignore any non-command characters in the code.\n* If you come to a `W` in the code and the current cell is equal to 0, jump to the corresponding `E`.\n* If you come to an `E` in the code and the current cell is **not** 0, jump back to the corresponding `W`.\n\nHere are the Poohbear commands: \n\n| Command | Definition\n|---| -------------------------\n| + | Add 1 to the current cell\n| - | Subtract 1 from the current cell\n| > | Move the cell pointer 1 space to the right\n| < | Move the cell pointer 1 space to the left\n| c | \"Copy\" the current cell\n| p | Paste the \"copied\" cell into the current cell\n| W | While loop - While the current cell is not equal to 0\n| E | Closing character for loops\n| P | Output the current cell's value as ascii\n| N | Output the current cell's value as an integer\n| T | Multiply the current cell by 2\n| Q | Square the current cell\n| U | Square root the current cell's value\n| L | Add 2 to the current cell\n| I | Subtract 2 from the current cell\n| V | Divide the current cell by 2\n| A | Add the copied value to the current cell's value\n| B | Subtract the copied value from the current cell's value\n| Y | Multiply the current cell's value by the copied value\n| D | Divide the current cell's value by the copied value.\n\"\"\"", "inputs": [["LQTcQAP>pQBBTAI-PA-PPL+P<BVPAL+T+P>PL+PBLPBP<DLLLT+P"], ["LLQT+P >LLLc+QIT-P AAAP P"], ["LLQT>+WN+<P>E"], ["cW>LQQT+P<pE"], ["+W>LQQT+P<-E"], ["+LTQII>+WN<P>+E"], ["+LTQIITTIWP-E"], ["LILcABNBpYDYYYYLLL+P-+W-EQNW-ELLQUTTTT+P"], ["++W-NE"], ["W>UQLIPNPPP45vSDFJLLIPNPqwVMT<E"], ["LLILQQLcYYD"], ["NNN++-NTTTTT+PN"], ["LQQT+P+P+P+P+P+P"], ["+-<>LcIpIL+TQYDABANPAPIIIITUNNQV+++P"], ["+c BANANA BANANA BANANA BANANA BANANA"], ["L       sfdg           ghjk                         kl                                LQTT++++P                        tt                                W                  w                    -                                      E           wewewe                N"]], "outputs": [["Hello World!"], ["!]oo"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 "], [""], ["!"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 "], ["~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#\"! \u001f\u001e\u001d\u001c\u001b\u001a\u0019\u0018\u0017\u0016\u0015\u0014\u0013\u0012\u0011\u0010\u000f\u000e\r\f\u000b\n\t\b\u0007\u0006\u0005\u0004\u0003\u0002\u0001"], ["2'0A"], ["10"], [""], [""], ["0001!33"], ["!\"#$%&"], ["38&(88#"], ["12345678910"], ["D0"]], "starter_code": "def poohbear(s: str) -> str:", "canonical_solution": "from operator import add, mul, floordiv as fdiv, pow\n\ndef poohbear(s):\n\n    def updateMem(func, v):\n        mem[p] = func(mem.get(p, 0), v) % 256\n    braces, stack = ({}, [])\n    for i, c in enumerate(s):\n        if c == 'W':\n            stack.append(i)\n        if c == 'E':\n            braces[i] = stack[-1]\n            braces[stack.pop()] = i\n    mem, copy, output = ({}, 0, [])\n    p, i = (0, 0)\n    while i < len(s):\n        cmd = s[i]\n        if cmd == '>':\n            p += 1\n        elif cmd == '<':\n            p -= 1\n        elif cmd == 'p':\n            mem[p] = copy\n        elif cmd == 'c':\n            copy = mem.get(p, 0)\n        elif cmd == 'W':\n            i = i if bool(mem.get(p, 0)) else braces[i]\n        elif cmd == 'E':\n            i = braces[i] if mem.get(p, 0) else i\n        elif cmd == 'P':\n            output.append(chr(mem.get(p, 0)))\n        elif cmd == 'N':\n            output.append(str(mem.get(p, 0)))\n        elif cmd == '+':\n            updateMem(add, 1)\n        elif cmd == '-':\n            updateMem(add, -1)\n        elif cmd == 'L':\n            updateMem(add, 2)\n        elif cmd == 'I':\n            updateMem(add, -2)\n        elif cmd == 'T':\n            updateMem(mul, 2)\n        elif cmd == 'V':\n            updateMem(fdiv, 2)\n        elif cmd == 'Q':\n            updateMem(pow, 2)\n        elif cmd == 'U':\n            updateMem(lambda a, b: int(pow(a, b)), 0.5)\n        elif cmd == 'A':\n            updateMem(add, copy)\n        elif cmd == 'B':\n            updateMem(add, -copy)\n        elif cmd == 'Y':\n            updateMem(mul, copy)\n        elif cmd == 'D':\n            updateMem(fdiv, copy)\n        i += 1\n    return ''.join(output)", "entry_point": "poohbear", "task_id": "TACO_lite/324", "input_output_examples": "[[], []]", "requirement_without_examples": "def poohbear(s: str) -> str:\n\"\"\"Create a function that interprets code in the esoteric language **Poohbear**\n\n## The Language\n\nPoohbear is a stack-based language largely inspired by Brainfuck. It has a maximum integer value of 255, and 30,000 cells. The original intention of Poohbear was to be able to send messages that would, to most, be completely indecipherable: \nPoohbear Wiki\n\n* For the purposes of this kata, you will make a version of Poohbear that has **infinite** memory cells in **both directions** (so you do not need to limit cells to 30,000)\n* Cells have a default value of 0\n* Each cell can hold one byte of data.  Once a cell's value goes above 255, it wraps around to 0.  If a cell's value goes below 0, it wraps to 255.\n* If the result of an operation isn't an int, round the result down to the nearest one.\n* Your interpreter should ignore any non-command characters in the code.\n* If you come to a `W` in the code and the current cell is equal to 0, jump to the corresponding `E`.\n* If you come to an `E` in the code and the current cell is **not** 0, jump back to the corresponding `W`.\n\nHere are the Poohbear commands: \n\n| Command | Definition\n|---| -------------------------\n| + | Add 1 to the current cell\n| - | Subtract 1 from the current cell\n| > | Move the cell pointer 1 space to the right\n| < | Move the cell pointer 1 space to the left\n| c | \"Copy\" the current cell\n| p | Paste the \"copied\" cell into the current cell\n| W | While loop - While the current cell is not equal to 0\n| E | Closing character for loops\n| P | Output the current cell's value as ascii\n| N | Output the current cell's value as an integer\n| T | Multiply the current cell by 2\n| Q | Square the current cell\n| U | Square root the current cell's value\n| L | Add 2 to the current cell\n| I | Subtract 2 from the current cell\n| V | Divide the current cell by 2\n| A | Add the copied value to the current cell's value\n| B | Subtract the copied value from the current cell's value\n| Y | Multiply the current cell's value by the copied value\n| D | Divide the current cell's value by the copied value.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['+++P'], ['+++N'], ['+>++<P'], ['+c>pP'], ['WT+E'], ['+QPN'], ['+UPN'], ['+LPN'], ['+IPN'], ['+VPN'], ['+cA>pPN'], ['+cB>pPN'], ['+cY>pPN'], ['+cD>pPN'], ['+W+E'], ['Hello+WorldP'], ['+255+P'], ['-1+P']]", "qwen2.5-coder-32b-instruct": "[['+'], ['-'], ['>'], ['<'], ['c'], ['p'], ['P'], ['N'], ['T'], ['Q'], ['U'], ['L'], ['I'], ['V'], ['A'], ['B'], ['Y'], ['D'], ['WEP'], ['WE'], ['WEN'], ['WET'], ['WEQ'], ['WEU'], ['WEL'], ['WEI'], ['WEV'], ['WEA'], ['WEB'], ['WEY'], ['WED'], ['WEEWEP'], ['W+W+W+W+W+W+W+W+W+W+'], ['W-W-W-W-W-W-W-W-W-W-'], ['W>L>L>L>L>L>L>L>L>L>L'], ['W<I<I<I<I<I<I<I<I<I<I'], ['W>T>T>T>T>T>T>T>T>T>T'], ['W<Q<Q<Q<Q<Q<Q<Q<Q<Q<Q'], ['W>U>U>U>U>U>U>U>U>U'], ['W>W>W>W>W>W>W>W>W>W+'], ['W<W<W<W<W<W<W<W<W<W-'], ['W>L>L>L>L>L>L>L>L>L>L'], ['W<I<I<I<I<I<I<I<I<I<I'], ['W>T>T>T>T>T>T>T>T>T>T'], ['W<Q<Q<Q<Q<Q<Q<Q<Q<Q<Q'], ['W>U>U>U>U>U>U>U>U>U'], ['W>A>A>A>A>A>A>A>A>A>A'], ['W>B>B>B>B>B>B>B>B>B>B'], ['W>Y>Y>Y>Y>Y>Y>Y>Y>Y>Y'], ['W>D>D>D>D>D>D>D>D>D>D'], ['WEPWEPWEPWEPWEPWEPWEP']]"}}
{"requirement": "from typing import List\n\n\ndef reverse(lst: List[int]) -> List[int]:\n\"\"\"If this challenge is too easy for you, check out: \nhttps://www.codewars.com/kata/5cc89c182777b00001b3e6a2\n\n___\n\nUpside-Down Pyramid Addition is the process of taking a list of numbers and consecutively adding them together until you reach one number.\n\nWhen given the numbers `2, 1, 1` the following process occurs:\n```\n 2   1   1\n   3   2 \n     5\n```\n\nThis ends in the number `5`.\n\n___\n\n### YOUR TASK\n\nGiven the right side of an Upside-Down Pyramid (Ascending), write a function that will return the original list.\n\n### EXAMPLE\n\n```python\nreverse([5, 2, 1]) == [2, 1, 1]\n```\n\nNOTE: The Upside-Down Pyramid will never be empty and will always consist of positive integers ONLY.\n\"\"\"", "inputs": [[[5, 2, 1]], [[84, 42, 21, 10, 2]], [[83, 47, 28, 16, 7]], [[101, 57, 29, 13, 6]], [[66, 39, 25, 15, 7]], [[45, 25, 14, 8, 6]], [[60, 32, 16, 7, 4]], [[84, 44, 21, 8, 2]], [[51, 26, 13, 6, 2]], [[78, 42, 22, 11, 6]]], "outputs": [[[2, 1, 1]], [[4, 7, 3, 8, 2]], [[6, 4, 3, 9, 7]], [[1, 3, 9, 7, 6]], [[7, 2, 2, 8, 7]], [[3, 1, 4, 2, 6]], [[4, 1, 6, 3, 4]], [[4, 3, 7, 6, 2]], [[3, 3, 3, 4, 2]], [[4, 3, 6, 5, 6]]], "starter_code": "from typing import List\ndef reverse(lst: List[int]) -> List[int]:", "canonical_solution": "def reverse(lst):\n    ret = []\n    while lst:\n        ret.append(lst[-1])\n        lst = [a - b for a, b in zip(lst, lst[1:])]\n    return ret[::-1]", "entry_point": "reverse", "task_id": "TACO_lite/326", "input_output_examples": "[[[[5, 2, 1]]], [[[2, 1, 1]]]]", "requirement_without_examples": "from typing import List\n\n\ndef reverse(lst: List[int]) -> List[int]:\n\"\"\"If this challenge is too easy for you, check out: \nhttps://www.codewars.com/kata/5cc89c182777b00001b3e6a2\n\n___\n\nUpside-Down Pyramid Addition is the process of taking a list of numbers and consecutively adding them together until you reach one number.\n\n___\n\n### YOUR TASK\n\nGiven the right side of an Upside-Down Pyramid (Ascending), write a function that will return the original list.\n\nNOTE: The Upside-Down Pyramid will never be empty and will always consist of positive integers ONLY.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[5, 2, 1]], [[10]], [[15, 7, 3, 1]], [[1, 1, 1, 1, 1]], [[21, 11, 6, 3, 1]]]", "qwen2.5-coder-32b-instruct": "[[[5, 2, 1]], [[1]], [[3, 1]], [[10, 4, 1]], [[15, 7, 3, 1]], [[28, 14, 7, 3, 1]], [[1, 1, 1, 1]], [[4, 2, 1, 1]], [[35, 15, 6, 2, 1]]]"}}
{"requirement": "from typing import List\n\n\ndef find_uniq(arr: List[float]) -> float:\n\"\"\"There is an array with some numbers. All numbers are equal except for one. Try to find it!\n\n```python\nfind_uniq([ 1, 1, 1, 2, 1, 1 ]) == 2\nfind_uniq([ 0, 0, 0.55, 0, 0 ]) == 0.55\n```\n\nIt’s guaranteed that array contains at least 3 numbers.\n\nThe tests contain some very huge arrays, so think about performance.\n\nThis is the first kata in series:\n\n1. Find the unique number (this kata)\n2. [Find the unique string](https://www.codewars.com/kata/585d8c8a28bc7403ea0000c3)\n3. [Find The Unique](https://www.codewars.com/kata/5862e0db4f7ab47bed0000e5)\n\"\"\"", "inputs": [[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]], [[4, 4, 4, 3, 4, 4, 4, 4]], [[5, 5, 5, 5, 4, 5, 5, 5]], [[6, 6, 6, 6, 6, 5, 6, 6]], [[7, 7, 7, 7, 7, 7, 6, 7]], [[8, 8, 8, 8, 8, 8, 8, 7]], [[3, 3, 3, 3, 3, 3, 3, 2]], [[2, 2, 2, 2, 2, 2, 2, 1]], [[0, 1, 1, 1, 1, 1, 1, 1]]], "outputs": [[2], [0.55], [3], [4], [5], [6], [7], [2], [1], [0]], "starter_code": "from typing import List\ndef find_uniq(arr: List[float]) -> float:", "canonical_solution": "def find_uniq(arr):\n    a, b = set(arr)\n    return a if arr.count(a) == 1 else b", "entry_point": "find_uniq", "task_id": "TACO_lite/379", "input_output_examples": "[[[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]]], [[2], [0.55]]]", "requirement_without_examples": "from typing import List\n\n\ndef find_uniq(arr: List[float]) -> float:\n\"\"\"There is an array with some numbers. All numbers are equal except for one. Try to find it!\n\nIt’s guaranteed that array contains at least 3 numbers.\n\nThe tests contain some very huge arrays, so think about performance.\n\nThis is the first kata in series:\n\n1. Find the unique number (this kata)\n2. [Find the unique string](https://www.codewars.com/kata/585d8c8a28bc7403ea0000c3)\n3. [Find The Unique](https://www.codewars.com/kata/5862e0db4f7ab47bed0000e5)\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]], [[3, 3, 3, 3, 4]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 9]], [[1, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [[0.1, 0.1, 0.1, 0.1, 0.2]], [[1000000, 1000000, 1000000, 1000000, 1000001]], [[-1, -1, -1, -1, -2]], [[1.5, 1.5, 1.5, 1.5, 1.5001]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]]]", "qwen2.5-coder-32b-instruct": "[[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]], [[3.14, 3.14, 3.14, 2.71, 3.14]], [[1000, 1000, 1000, 1000, 999]], [[1.1, 1.1, 1.1, 1.1, 1.2]], [[2, 2, 2, 3, 2, 2, 2]], [[0.001, 0.001, 0.002, 0.001, 0.001]], [[1000000000.0, 1000000000.0, 1000000000.0, 2000000000.0, 1000000000.0]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]], [[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41]]]"}}
{"requirement": "def is_letter(s: str) -> bool:\n\"\"\"Complete the code which should return `true` if the given object is a single ASCII letter (lower or upper case), `false` otherwise.\n\"\"\"", "inputs": [[""], ["a"], ["X"], ["7"], ["_"], ["ab"], ["a\n"]], "outputs": [[false], [true], [true], [false], [false], [false], [false]], "starter_code": "def is_letter(s: str) -> bool:", "canonical_solution": "def is_letter(s):\n    return len(s) == 1 and s.isalpha()", "entry_point": "is_letter", "task_id": "TACO_lite/401", "input_output_examples": "[[['a'], ['Z'], ['abc'], ['1'], [' ']], [[True], [True], [False], [False], [False]]]", "requirement_without_examples": "def is_letter(s: str) -> bool:\n\"\"\"Complete the code which should return `true` if the given object is a single ASCII letter (lower or upper case), `false` otherwise.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['a'], ['Z'], ['1'], ['@'], ['ab'], [''], [' '], ['A'], ['z'], ['$'], ['aa'], ['0'], ['9'], ['!'], ['\\n'], ['\\t'], ['é'], ['ß'], ['π'], ['𐍈']]", "qwen2.5-coder-32b-instruct": "[['a'], ['Z'], ['1'], [' '], ['!'], ['ab'], [''], ['abc'], ['\\n'], ['\\t']]"}}
{"requirement": "from typing import List\n\n\ndef per(n: int) -> List[int]:\n\"\"\"*Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ*\n\n---\n\nMultiply all the digits of a nonnegative integer `n` by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the **multiplicative persistence**.\n\nCreate a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.\n\n## Examples\n```\nper(1)  = []\n\nper(10) = [0]\n// 1*0 = 0\n\nper(69) = [54, 20, 0]\n// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0\n\nper(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]\n// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...\n```\n\"\"\"", "inputs": [[1234567890], [123456789], [12345678], [1234567], [123456], [12345], [2379], [777], [25], [277777788888899], [3778888999]], "outputs": [[[0]], [[362880, 0]], [[40320, 0]], [[5040, 0]], [[720, 0]], [[120, 0]], [[378, 168, 48, 32, 6]], [[343, 36, 18, 8]], [[10, 0]], [[4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]], [[438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]]], "starter_code": "from typing import List\ndef per(n: int) -> List[int]:", "canonical_solution": "def per(n):\n    r = []\n    while n >= 10:\n        p = 1\n        for i in str(n):\n            p = p * int(i)\n        r.append(p)\n        n = p\n    return r", "entry_point": "per", "task_id": "TACO_lite/454", "input_output_examples": "[[[1], [10], [69], [277777788888899]], [[[]], [[0]], [[54, 20, 0]], [[4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]]]]", "requirement_without_examples": "from typing import List\n\n\ndef per(n: int) -> List[int]:\n\"\"\"*Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ*\n\n---\n\nMultiply all the digits of a nonnegative integer `n` by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the **multiplicative persistence**.\n\nCreate a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [10], [69], [277777788888899], [0], [999], [1234], [25]]", "qwen2.5-coder-32b-instruct": "[[1], [10], [69], [277777788888899], [0], [9], [111], [3279], [999]]"}}
{"requirement": "def year_days(year: int) -> str:\n\"\"\"A variation of determining leap years, assuming only integers are used and years can be negative and positive.\n\nWrite a function which will return the days in the year and the year entered in a string.  For example 2000, entered as an integer, will return as a string 2000 has 366 days\n\nThere are a few assumptions we will accept the year 0, even though there is no year 0 in the Gregorian Calendar.\n\nAlso the basic rule for validating a leap year are as follows\n\nMost years that can be divided evenly by 4 are leap years. \n\nException: Century years are NOT leap years UNLESS they can be evenly divided by 400.\n\nSo the years 0, -64 and 2016 will return 366 days.\nWhilst 1974, -10 and 666 will return 365 days.\n\"\"\"", "inputs": [[0], [-64], [2016], [1974], [-10], [666], [1857], [2000], [-300], [-1]], "outputs": [["0 has 366 days"], ["-64 has 366 days"], ["2016 has 366 days"], ["1974 has 365 days"], ["-10 has 365 days"], ["666 has 365 days"], ["1857 has 365 days"], ["2000 has 366 days"], ["-300 has 365 days"], ["-1 has 365 days"]], "starter_code": "def year_days(year: int) -> str:", "canonical_solution": "def year_days(year):\n    days = 365\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        days += 1\n    return '%d has %d days' % (year, days)", "entry_point": "year_days", "task_id": "TACO_lite/536", "input_output_examples": "[[[2000], [0], [-64], [2016], [1974], [-10], [666]], [['2000 has 366 days'], ['0 has 366 days'], ['-64 has 366 days'], ['2016 has 366 days'], ['1974 has 365 days'], ['-10 has 365 days'], ['666 has 365 days']]]", "requirement_without_examples": "def year_days(year: int) -> str:\n\"\"\"A variation of determining leap years, assuming only integers are used and years can be negative and positive.\n\nWrite a function which will return the days in the year and the year entered in a string.\n\nThere are a few assumptions we will accept the year 0, even though there is no year 0 in the Gregorian Calendar.\n\nAlso the basic rule for validating a leap year are as follows\n\nMost years that can be divided evenly by 4 are leap years. \n\nException: Century years are NOT leap years UNLESS they can be evenly divided by 400.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[2000], [1900], [2016], [1974], [0], [-64], [-10], [666], [1600], [1700], [1800], [2004], [2020], [2100], [2400]]", "qwen2.5-coder-32b-instruct": "[[2000], [-64], [2016], [1974], [-10], [666], [0], [100], [400], [1800], [2100], [2400]]"}}
{"requirement": "from typing import List\n\n\ndef solve(a: List[int]) -> List[int]:\n\"\"\"Assume we take a number `x` and perform any one of the following operations:\n```Pearl\na) Divide x by 3 (if it is divisible by 3), or\nb) Multiply x by 2\n```\nAfter each operation, we write down the result. If we start with `9`, we can get a sequence such as:\n```\n[9,3,6,12,4,8] -- 9/3=3 -> 3*2=6 -> 6*2=12 -> 12/3=4 -> 4*2=8\n```\nYou will be given a shuffled sequence of integers and your task is to reorder them so that they conform to the above sequence. There will always be an answer. \n```\nFor the above example:\nsolve([12,3,9,4,6,8]) = [9,3,6,12,4,8].\n```\n\nMore examples in the test cases. Good luck!\n\"\"\"", "inputs": [[[1, 3]], [[4, 2]], [[12, 3, 9, 4, 6, 8]], [[4, 8, 6, 3, 12, 9]], [[558, 744, 1488, 279, 2232, 1116]], [[9, 1, 3]], [[3000, 9000]], [[4, 1, 2]], [[10, 5]]], "outputs": [[[3, 1]], [[2, 4]], [[9, 3, 6, 12, 4, 8]], [[9, 3, 6, 12, 4, 8]], [[279, 558, 1116, 2232, 744, 1488]], [[9, 3, 1]], [[9000, 3000]], [[1, 2, 4]], [[5, 10]]], "starter_code": "from typing import List\ndef solve(a: List[int]) -> List[int]:", "canonical_solution": "def solve(a):\n    for i in a:\n        li = [i]\n        while 1:\n            if li[-1] % 3 == 0 and li[-1] // 3 in a:\n                li.append(li[-1] // 3)\n            elif li[-1] * 2 in a:\n                li.append(li[-1] * 2)\n            else:\n                break\n        if len(li) == len(a):\n            return li", "entry_point": "solve", "task_id": "TACO_lite/582", "input_output_examples": "[[[[12, 3, 9, 4, 6, 8]]], [[[9, 3, 6, 12, 4, 8]]]]", "requirement_without_examples": "from typing import List\n\n\ndef solve(a: List[int]) -> List[int]:\n\"\"\"Assume we take a number `x` and perform any one of the following operations:\n```Pearl\na) Divide x by 3 (if it is divisible by 3), or\nb) Multiply x by 2\n```\nAfter each operation, we write down the result. \n\nYou will be given a shuffled sequence of integers and your task is to reorder them so that they conform to the above sequence. There will always be an answer. \n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[12, 3, 9, 4, 6, 8]], [[1]], [[2, 4, 8, 16]], [[9, 3, 1]], [[6, 12, 3, 24, 48, 96]], [[27, 9, 3, 6, 12, 24]], [[4, 8, 16, 32, 64, 128]], [[81, 27, 9, 3, 6, 12]], [[10, 20, 40, 80, 160]], [[15, 5, 10, 20, 40]]]", "qwen2.5-coder-32b-instruct": "[[[12, 3, 9, 4, 6, 8]], [[2, 1, 4]], [[27, 9, 18, 6, 12, 3, 54]], [[108, 36, 12, 4, 8, 24, 72]], [[3, 1, 2]], [[81, 27, 54, 18, 36, 12, 24, 6]], [[9]], [[1]], [[3, 6, 12, 4, 8]], [[243, 81, 54, 162, 27, 108, 36, 72, 12, 24, 48, 16, 32]]]"}}
{"requirement": "from typing import List\n\n\ndef array_plus_array(arr1: List[int], arr2: List[int]) -> int:\n\"\"\"I'm new to coding and now I want to get the sum of two arrays...actually the sum of all their elements. I'll appreciate for your help.\n\nP.S. Each array includes only integer numbers. Output is a number too.\n\"\"\"", "inputs": [[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [-4, -5, -6]], [[0, 0, 0], [4, 5, 6]], [[100, 200, 300], [400, 500, 600]]], "outputs": [[21], [-21], [15], [2100]], "starter_code": "from typing import List\ndef array_plus_array(arr1: List[int], arr2: List[int]) -> int:", "canonical_solution": "def array_plus_array(arr1, arr2):\n    return sum(arr1 + arr2)", "entry_point": "array_plus_array", "task_id": "TACO_lite/588", "input_output_examples": "[[[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [1, 2, 3]], [[0, 0, 0], [4, 5, 6]]], [[21], [0], [15]]]", "requirement_without_examples": "from typing import List\n\n\ndef array_plus_array(arr1: List[int], arr2: List[int]) -> int:\n\"\"\"I'm new to coding and now I want to get the sum of two arrays...actually the sum of all their elements. I'll appreciate for your help.\n\nP.S. Each array includes only integer numbers. Output is a number too.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [-4, -5, -6]], [[0, 0, 0], [0, 0, 0]], [[10], [20]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1000000, 2000000], [3000000, 4000000]], [[-1, 1], [1, -1]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3], [4, 5, 6]], [[0, 0, 0], [0, 0, 0]], [[-1, -2, -3], [-4, -5, -6]], [[100, 200, 300], [400, 500, 600]], [[1], [1]], [[], []], [[10], [-10]], [[1000000], [1000000]]]"}}
{"requirement": "def detect_operator(num: int) -> str:\n\"\"\"When a warrior wants to talk with another one about peace or war he uses a smartphone.  In one distinct  country warriors who spent all time in training kata not always have enough money. So if they call some number they want to know which operator serves  this number. \n\nWrite a function which **accepts number and return name of operator or string \"no info\"**, if operator can't be defined. number always looks like 8yyyxxxxxxx, where yyy corresponds to operator.\n\nHere is short list of operators:\n\n* 039 xxx xx xx - Golden Telecom\n* 050 xxx xx xx - MTS\n* 063 xxx xx xx - Life:)\n* 066 xxx xx xx - MTS\n* 067 xxx xx xx - Kyivstar\n* 068 xxx xx xx - Beeline\n* 093 xxx xx xx - Life:)\n* 095 xxx xx xx - MTS\n* 096 xxx xx xx - Kyivstar\n* 097 xxx xx xx - Kyivstar\n* 098 xxx xx xx - Kyivstar\n* 099 xxx xx xx - MTS Test [Just return \"MTS\"]\n\"\"\"", "inputs": [["80661111841"], ["80671991111"], ["80631551111"], ["80931551111"], ["80111551111"]], "outputs": [["MTS"], ["Kyivstar"], ["Life:)"], ["Life:)"], ["no info"]], "starter_code": "def detect_operator(num: int) -> str:", "canonical_solution": "OPERATORS = {'039': 'Golden Telecom', '050': 'MTS', '063': 'Life:)', '066': 'MTS', '067': 'Kyivstar', '068': 'Beeline', '093': 'Life:)', '095': 'MTS', '096': 'Kyivstar', '097': 'Kyivstar', '098': 'Kyivstar', '099': 'MTS'}\n\ndef detect_operator(num):\n    return OPERATORS.get(str(num)[1:4], 'no info')", "entry_point": "detect_operator", "task_id": "TACO_lite/694", "input_output_examples": "[[[80501234567], [80934567890], [80991234567], [80781234567], [80981234567]], [['MTS'], ['Life:)'], ['MTS'], ['no info'], ['Kyivstar']]]", "requirement_without_examples": "def detect_operator(num: int) -> str:\n\"\"\"When a warrior wants to talk with another one about peace or war he uses a smartphone.  In one distinct  country warriors who spent all time in training kata not always have enough money. So if they call some number they want to know which operator serves  this number.\n\nWrite a function which **accepts number and return name of operator or string \"no info\"**, if operator can't be defined. number always looks like 8yyyxxxxxxx, where yyy corresponds to operator.\n\nHere is short list of operators:\n\n* 039 xxx xx xx - Golden Telecom\n* 050 xxx xx xx - MTS\n* 063 xxx xx xx - Life:)\n* 066 xxx xx xx - MTS\n* 067 xxx xx xx - Kyivstar\n* 068 xxx xx xx - Beeline\n* 093 xxx xx xx - Life:)\n* 095 xxx xx xx - MTS\n* 096 xxx xx xx - Kyivstar\n* 097 xxx xx xx - Kyivstar\n* 098 xxx xx xx - Kyivstar\n* 099 xxx xx xx - MTS Test [Just return \"MTS\"]\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[80391234567], [80501234567], [80631234567], [80661234567], [80671234567], [80681234567], [80931234567], [80951234567], [80961234567], [80971234567], [80981234567], [80991234567], [80001234567], [81001234567], [8], [8039]]", "qwen2.5-coder-32b-instruct": "[[80391234567], [80501234567], [80631234567], [80661234567], [80671234567], [80681234567], [80931234567], [80951234567], [80961234567], [80971234567], [80981234567], [80991234567], [81231234567], [80001234567]]"}}
{"requirement": "def cockroach_speed(s: float) -> int:\n\"\"\"The cockroach is one of the fastest insects. Write a function which takes its speed in km per hour and returns it in cm per second, rounded down to the integer (= floored).\n\nFor example:\n\n```python\ncockroach_speed(1.08) == 30\n```\n\nNote! The input is a Real number (actual type is language dependent) and is >= 0. The result should be an Integer.\n\"\"\"", "inputs": [[1.08], [1.09], [0]], "outputs": [[30], [30], [0]], "starter_code": "def cockroach_speed(s: float) -> int:", "canonical_solution": "def cockroach_speed(s):\n    return s // 0.036", "entry_point": "cockroach_speed", "task_id": "TACO_lite/699", "input_output_examples": "[[[1.08]], [[30]]]", "requirement_without_examples": "def cockroach_speed(s: float) -> int:\n\"\"\"The cockroach is one of the fastest insects. Write a function which takes its speed in km per hour and returns it in cm per second, rounded down to the integer (= floored).\n\nNote! The input is a Real number (actual type is language dependent) and is >= 0. The result should be an Integer.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0.0], [1.08], [2.5], [10.0], [100.0], [0.001], [9999.999]]", "qwen2.5-coder-32b-instruct": "[[1.08], [0.0], [2.5], [100.0], [0.01], [31.4159]]"}}
{"requirement": "def reverse_list(l: list) -> list:\n\"\"\"In this kata you will create a function that takes in a list and returns a list with the reverse order.\n\n### Examples\n\n```python\nreverse_list([1,2,3,4]) == [4,3,2,1]\nreverse_list([3,1,5,4]) == [4,5,1,3]\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4]], [[3, 1, 5, 4]], [[3, 6, 9, 2]], [[1]]], "outputs": [[[4, 3, 2, 1]], [[4, 5, 1, 3]], [[2, 9, 6, 3]], [[1]]], "starter_code": "def reverse_list(l: list) -> list:", "canonical_solution": "def reverse_list(l):\n    return l[::-1]", "entry_point": "reverse_list", "task_id": "TACO_lite/727", "input_output_examples": "[[[[1, 2, 3, 4]], [[3, 1, 5, 4]]], [[[4, 3, 2, 1]], [[4, 5, 1, 3]]]]", "requirement_without_examples": "def reverse_list(l: list) -> list:\n\"\"\"In this kata you will create a function that takes in a list and returns a list with the reverse order.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4]], [[3, 1, 5, 4]], [[]], [[1]], [[1, 1, 1, 1]], [['a', 'b', 'c']], [[True, False, True]], [[[1, 2], [3, 4], [5, 6]]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4]], [[3, 1, 5, 4]], [[]], [[1]], [[1, 2]], [['a', 'b', 'c']], [[True, False, True]], [[None, 1, 'two', 3.0]]]"}}
{"requirement": "def count_subsequences(needle: str, haystack: str) -> int:\n\"\"\"With your birthday coming up soon, your eccentric friend sent you a message to say \"happy birthday\":\n\n    hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu\n    hhapppyyyy biirtttthdaaay too youuu\n    happy birrrthdayy to youuu\n    happpyyyy birrtthdaaay tooooo youu\n\nAt first it looks like a song, but upon closer investigation, you realize that your friend hid the phrase \"happy birthday\" thousands of times inside his message. In fact, it contains it more than 2 million times! To thank him, you'd like to reply with exactly how many times it occurs.\n\nTo count all the occurences, the procedure is as follows: look through the paragraph and find a `'h'`; then find an `'a'` later in the paragraph; then find an `'p'` after that, and so on. Now count the number of ways in which you can choose letters in this way to make the full phrase.\n\nMore precisely, given a text string, you are to determine how many times the search string appears as a sub-sequence of that string.\n\nWrite a function called `countSubsequences` that takes two arguments: `needle`, the string to be search for and `haystack`, the string to search in. In our example, `\"happy birthday\"` is the needle and the birthday message is the haystack. The function should return the number of times `needle` occurs as a sub-sequence of `haystack`.  Spaces are also considered part of the needle.\n\nSince the answers can be very large, return only the last 8 digits of the answer in case it exceeds 8 digits. The answers to the test cases will all be shorter than 8 digits.\n\"\"\"", "inputs": [["happy birthday", "appyh appy birth day"], ["happy birthday", "hhaappyy bbiirrtthhddaayy"], ["happy birthday", "happy holidays"], ["happy birthday", "happy birthday"], ["happy", "hhhappy"], ["happy birthday", "hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu"]], "outputs": [[1], [2048], [0], [1], [3], [7680]], "starter_code": "def count_subsequences(needle: str, haystack: str) -> int:", "canonical_solution": "def count_subsequences(needle, haystack):\n    count = [1] + [0] * len(needle)\n    for a in haystack:\n        count = [1] + [count[i] + count[i - 1] * (a == b) for i, b in enumerate(needle, 1)]\n    return count[-1] % 10 ** 8", "entry_point": "count_subsequences", "task_id": "TACO_lite/775", "input_output_examples": "[[['happy birthday', 'hhhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu hhapppyyyy biirtttthdaaay too youuu happy birrrthdayy to youuu happpyyyy birrtthdaaay tooooo youu'], ['happy birthday', 'happy birthday happy birthday happy birthday']], [[23928345], [3]]]", "requirement_without_examples": "def count_subsequences(needle: str, haystack: str) -> int:\n\"\"\"With your birthday coming up soon, your eccentric friend sent you a message to say \"happy birthday\":\n\nAt first it looks like a song, but upon closer investigation, you realize that your friend hid the phrase \"happy birthday\" thousands of times inside his message. In fact, it contains it more than 2 million times! To thank him, you'd like to reply with exactly how many times it occurs.\n\nTo count all the occurrences, the procedure is as follows: look through the paragraph and find a `'h'`; then find an `'a'` later in the paragraph; then find an `'p'` after that, and so on. Now count the number of ways in which you can choose letters in this way to make the full phrase.\n\nMore precisely, given a text string, you are to determine how many times the search string appears as a sub-sequence of that string.\n\nWrite a function called `countSubsequences` that takes two arguments: `needle`, the string to be search for and `haystack`, the string to search in. The function should return the number of times `needle` occurs as a sub-sequence of `haystack`.  Spaces are also considered part of the needle.\n\nSince the answers can be very large, return only the last 8 digits of the answer in case it exceeds 8 digits. The answers to the test cases will all be shorter than 8 digits.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['happy birthday', 'hhappyyyy biirrrrrthddaaaayyyyyyy to youuuu hhapppyyyy biirtttthdaaay too youuu happy birrrthdayy to youuu happpyyyy birrtthdaaay tooooo youu'], ['abc', 'ababcabc'], ['abc', 'def'], ['a', 'aaaa'], ['', 'any string'], ['any string', ''], ['xyz', 'xyxzyzxyzz'], ['hello', 'hello world hello'], ['spaces', 's p a c e s'], ['longneedle', 'longlonglonglonglonglonglonglonglonglong'], ['repeat', 'rrepeaatt'], ['case', 'CaSeSeNsItIvE'], ['123', '112233'], ['123', '321'], [' ', '  ']]", "qwen2.5-coder-32b-instruct": "[['happy', 'ahpppy'], ['abc', 'abracadabra'], ['a', 'aaaaaa'], ['', 'anything'], ['anything', ''], ['abc', 'xyz'], ['happy birthday', 'hhhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu'], ['happy birthday', 'happpyyyy birrtthdaaay tooooo youu'], [' ', ' a b c '], ['abc def', 'aabbccddeeff']]"}}
{"requirement": "def combs(a: str, b: str) -> int:\n\"\"\"# Task\n Miss X has only two combs in her possession, both of which are old and miss a tooth or two. She also has many purses of different length, in which she carries the combs. The only way they fit is horizontally and without overlapping. Given teeth' positions on both combs, find the minimum length of the purse she needs to take them with her.\n\n It is guaranteed that there is at least one tooth at each end of the comb. \n\n - Note, that the combs can not be rotated/reversed.\n\n# Example\n\n For `comb1 = \"*..*\" and comb2 = \"*.*\"`, the output should be `5`\n\n Although it is possible to place the combs like on the first picture, the best way to do this is either picture 2 or picture 3.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/combs/img/cbs.png?_tm=1484930552851)\n\n# Input/Output\n\n\n - `[input]` string `comb1`\n\n   A comb is represented as a string. If there is an asterisk ('*') in the ith position, there is a tooth there. Otherwise there is a dot ('.'), which means there is a missing tooth on the comb.\n\n   Constraints: 1 ≤ comb1.length ≤ 10.\n   \n   \n\n - `[input]` string `comb2`\n\n   The second comb is represented in the same way as the first one.\n\n   Constraints: 1 ≤ comb2.length ≤ 10.\n   \n\n - `[output]` an integer\n\n   The minimum length of a purse Miss X needs.\n\"\"\"", "inputs": [["*..*", "*.*"], ["*...*", "*.*"], ["*..*.*", "*.***"], ["*.*", "*.*"], ["*.**", "*.*"]], "outputs": [[5], [5], [9], [4], [5]], "starter_code": "def combs(a: str, b: str) -> int:", "canonical_solution": "def combs(a, b):\n    return min(mesh(a, b), mesh(b, a))\n\ndef mesh(a, b):\n    for i in range(len(a)):\n        for j, k in zip(a[i:], b):\n            if j + k == '**':\n                break\n        else:\n            return max(i + len(b), len(a))\n    return len(a) + len(b)", "entry_point": "combs", "task_id": "TACO_lite/788", "input_output_examples": "[[['*..*', '*.*']], [[5]]]", "requirement_without_examples": "def combs(a: str, b: str) -> int:\n\"\"\"# Task\n Miss X has only two combs in her possession, both of which are old and miss a tooth or two. She also has many purses of different length, in which she carries the combs. The only way they fit is horizontally and without overlapping. Given teeth' positions on both combs, find the minimum length of the purse she needs to take them with her.\n\n It is guaranteed that there is at least one tooth at each end of the comb. \n\n - Note, that the combs can not be rotated/reversed.\n\n# Input/Output\n\n - `[input]` string `comb1`\n\n   A comb is represented as a string. If there is an asterisk ('*') in the ith position, there is a tooth there. Otherwise there is a dot ('.'), which means there is a missing tooth on the comb.\n\n   Constraints: 1 ≤ comb1.length ≤ 10.\n   \n   \n\n - `[input]` string `comb2`\n\n   The second comb is represented in the same way as the first one.\n\n   Constraints: 1 ≤ comb2.length ≤ 10.\n   \n\n - `[output]` an integer\n\n   The minimum length of a purse Miss X needs.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['*..*', '*.*'], ['*.*', '*..*'], ['*', '*'], ['*.*.*', '*..*'], ['*.*.*', '*.*.*'], ['*..*..*', '*.*.*'], ['*.*.*.*.*', '*..*..*'], ['*.*.*.*.*', '*.*.*.*.*'], ['*...*', '*.*'], ['*.*', '*...*']]", "qwen2.5-coder-32b-instruct": "[['*..*', '*.*'], ['***', '*'], ['*.*', '***'], ['*....*', '*.*.*'], ['*', '*'], ['*..*..*', '*.*.*'], ['*...*', '*.*'], ['*.*.*', '*.*.*'], ['*.......', '*'], ['*', '*.......'], ['*.*.*.*.*', '*.*.*.*.*']]"}}
{"requirement": "def correct(string: str) -> str:\n\"\"\"Character recognition software is widely used to digitise printed texts. Thus the texts can be edited, searched and stored on a computer.\n\nWhen documents (especially pretty old ones written with a typewriter), are digitised character recognition softwares often make mistakes.\n\nYour task is correct the errors in the digitised text. You only have to handle the following mistakes:\n\n* `S`  is misinterpreted as `5`\n* `O` is misinterpreted as `0`\n* `I` is misinterpreted as `1`\n\nThe test cases contain numbers only by mistake.\n\"\"\"", "inputs": [["1F-RUDYARD K1PL1NG"], ["R0BERT MERLE - THE DAY 0F THE D0LPH1N"], ["R1CHARD P. FEYNMAN - THE FEYNMAN LECTURE5 0N PHY51C5"], ["R1CHARD P. FEYNMAN - 5TAT15T1CAL MECHAN1C5"], ["5TEPHEN HAWK1NG - A BR1EF H15T0RY 0F T1ME"], ["5TEPHEN HAWK1NG - THE UN1VER5E 1N A NUT5HELL"], ["ERNE5T HEM1NGWAY - A FARWELL T0 ARM5"], ["ERNE5T HEM1NGWAY - F0R WH0M THE BELL T0LL5"], ["ERNE5T HEM1NGWAY - THE 0LD MAN AND THE 5EA"], ["J. R. R. T0LK1EN - THE L0RD 0F THE R1NG5"], ["J. D. 5AL1NGER - THE CATCHER 1N THE RYE"], ["J. K. R0WL1NG - HARRY P0TTER AND THE PH1L050PHER'5 5T0NE"], ["J. K. R0WL1NG - HARRY P0TTER AND THE CHAMBER 0F 5ECRET5"], ["J. K. R0WL1NG - HARRY P0TTER AND THE PR150NER 0F Azkaban"], ["J. K. R0WL1NG - HARRY P0TTER AND THE G0BLET 0F F1RE"], ["J. K. R0WL1NG - HARRY P0TTER AND THE 0RDER 0F PH0EN1X"], ["J. K. R0WL1NG - HARRY P0TTER AND THE HALF-BL00D PR1NCE"], ["J. K. R0WL1NG - HARRY P0TTER AND THE DEATHLY HALL0W5"], ["UR5ULA K. LE GU1N - A W1ZARD 0F EARTH5EA"], ["UR5ULA K. LE GU1N - THE T0MB5 0F ATUAN"], ["UR5ULA K. LE GU1N - THE FARTHE5T 5H0RE"], ["UR5ULA K. LE GU1N - TALE5 FR0M EARTH5EA"]], "outputs": [["IF-RUDYARD KIPLING"], ["ROBERT MERLE - THE DAY OF THE DOLPHIN"], ["RICHARD P. FEYNMAN - THE FEYNMAN LECTURES ON PHYSICS"], ["RICHARD P. FEYNMAN - STATISTICAL MECHANICS"], ["STEPHEN HAWKING - A BRIEF HISTORY OF TIME"], ["STEPHEN HAWKING - THE UNIVERSE IN A NUTSHELL"], ["ERNEST HEMINGWAY - A FARWELL TO ARMS"], ["ERNEST HEMINGWAY - FOR WHOM THE BELL TOLLS"], ["ERNEST HEMINGWAY - THE OLD MAN AND THE SEA"], ["J. R. R. TOLKIEN - THE LORD OF THE RINGS"], ["J. D. SALINGER - THE CATCHER IN THE RYE"], ["J. K. ROWLING - HARRY POTTER AND THE PHILOSOPHER'S STONE"], ["J. K. ROWLING - HARRY POTTER AND THE CHAMBER OF SECRETS"], ["J. K. ROWLING - HARRY POTTER AND THE PRISONER OF Azkaban"], ["J. K. ROWLING - HARRY POTTER AND THE GOBLET OF FIRE"], ["J. K. ROWLING - HARRY POTTER AND THE ORDER OF PHOENIX"], ["J. K. ROWLING - HARRY POTTER AND THE HALF-BLOOD PRINCE"], ["J. K. ROWLING - HARRY POTTER AND THE DEATHLY HALLOWS"], ["URSULA K. LE GUIN - A WIZARD OF EARTHSEA"], ["URSULA K. LE GUIN - THE TOMBS OF ATUAN"], ["URSULA K. LE GUIN - THE FARTHEST SHORE"], ["URSULA K. LE GUIN - TALES FROM EARTHSEA"]], "starter_code": "def correct(string: str) -> str:", "canonical_solution": "def correct(string):\n    return string.translate(str.maketrans('501', 'SOI'))", "entry_point": "correct", "task_id": "TACO_lite/809", "input_output_examples": "[[['H3LL0 W0RLD'], ['PR0GRAMM1NG 15 FUN'], ['G00D M0RN1NG']], [['HELLO WORLD'], ['PROGRAMMING IS FUN'], ['GOOD MORNING']]]", "requirement_without_examples": "def correct(string: str) -> str:\n\"\"\"Character recognition software is widely used to digitise printed texts. Thus the texts can be edited, searched and stored on a computer.\n\nWhen documents (especially pretty old ones written with a typewriter), are digitised character recognition softwares often make mistakes.\n\nYour task is correct the errors in the digitised text. You only have to handle the following mistakes:\n\n* `S`  is misinterpreted as `5`\n* `O` is misinterpreted as `0`\n* `I` is misinterpreted as `1`\n\nThe test cases contain numbers only by mistake.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['5'], ['0'], ['1'], ['501'], ['5O1'], ['S0I'], ['5O1S0I'], ['hello'], ['12345'], ['5O1S0I5O1S0I'], ['5O1S0I5O1S0I5O1S0I'], ['SOI'], ['501SOI'], ['5O1SOI'], ['5O1S0ISOI']]", "qwen2.5-coder-32b-instruct": "[['5ome 0ne 1s 2b0ard'], ['5tart 1n 0n3 tw0 3n 405e s1xty s3v3nty 3ight n1ne'], ['NO 5UB5T1TUTES F0R QU4L17Y'], ['51MPL3 T35T'], ['C0RR3CT TH155 M155P3L5'], ['NO M155P3LS H3R3'], ['5555555555'], ['0000000000'], ['1111111111'], ['']]"}}
{"requirement": "def summation(num: int) -> int:\n\"\"\"# Summation\n\nWrite a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.\n\n\n\nFor example:\n```if-not:racket\n~~~\nsummation(2) -> 3\n1 + 2\n\nsummation(8) -> 36\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n~~~\n```\n```if:racket\n~~~racket\n(summation 2) ; 3  (+ 1 2)\n(summation 8) ; 36 (+ 1 2 3 4 5 6 7 8)\n~~~\n```\n\"\"\"", "inputs": [[1], [8], [22], [100], [213]], "outputs": [[1], [36], [253], [5050], [22791]], "starter_code": "def summation(num: int) -> int:", "canonical_solution": "def summation(num):\n    return sum(range(num + 1))", "entry_point": "summation", "task_id": "TACO_lite/814", "input_output_examples": "[[[2], [8]], [[3], [36]]]", "requirement_without_examples": "def summation(num: int) -> int:\n\"\"\"# Summation\n\nWrite a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[1], [2], [5], [10], [100], [0], [-1], [1000]]", "qwen2.5-coder-32b-instruct": "[[1], [2], [8], [100], [500]]"}}
{"requirement": "def spinning_rings(inner_max: int, outer_max: int) -> int:\n\"\"\"This is the performance version of [this kata](https://www.codewars.com/kata/59afff65f1c8274f270020f5).\n\n---\n\nImagine two rings with numbers on them. The inner ring spins clockwise and the outer ring spins anti-clockwise. We start with both rings aligned on 0 at the top, and on each move we spin each ring by 1. How many moves will it take before both rings show the same number at the top again?\n\nThe inner ring has integers from 0 to innerMax and the outer ring has integers from 0 to outerMax, where innerMax and outerMax are integers >= 1.\n\n\n\n```\ne.g. if innerMax is 2 and outerMax is 3 then after\n1 move: inner = 2, outer = 1\n2 moves: inner = 1, outer = 2\n3 moves: inner = 0, outer = 3\n4 moves: inner = 2, outer = 0\n5 moves: inner = 1, outer = 1\nTherefore it takes 5 moves for the two rings to reach the same number\nTherefore spinningRings(2, 3) = 5\n```\n```\ne.g. if innerMax is 3 and outerMax is 2 then after\n1 move: inner = 3, outer = 1\n2 moves: inner = 2, outer = 2\nTherefore it takes 2 moves for the two rings to reach the same number\nspinningRings(3, 2) = 2\n```\n\n---\n\nTest input range:\n\n- `100` tests with `1 <= innerMax, outerMax <= 10000`\n- `400` tests with `1 <= innerMax, outerMax <= 2^48`\n\"\"\"", "inputs": [[5, 5], [2, 10], [10, 2], [7, 9], [1, 1], [16777216, 14348907]], "outputs": [[3], [13], [10], [4], [1], [23951671]], "starter_code": "def spinning_rings(inner_max: int, outer_max: int) -> int:", "canonical_solution": "def spinning_rings(inner_max, outer_max):\n    p = inner_max + 1\n    q = outer_max + 1\n    move = 1\n    while -move % p != move % q:\n        if -move % p >= q:\n            move = move // p * p + p - q + 1\n        elif move % q >= p:\n            move = move // q * q + q\n        elif -move % p > move % q and (-move % p + move % q) % 2 == 0:\n            move += (-move % p - move % q) // 2\n        else:\n            move = min((move - 1) // p * p + p, (move - 1) // q * q + q) + 1\n    return move", "entry_point": "spinning_rings", "task_id": "TACO_lite/890", "input_output_examples": "[[[2, 3], [3, 2]], [[5], [2]]]", "requirement_without_examples": "def spinning_rings(inner_max: int, outer_max: int) -> int:\n\"\"\"This is the performance version of [this kata](https://www.codewars.com/kata/59afff65f1c8274f270020f5).\n\n---\n\nImagine two rings with numbers on them. The inner ring spins clockwise and the outer ring spins anti-clockwise. We start with both rings aligned on 0 at the top, and on each move we spin each ring by 1. How many moves will it take before both rings show the same number at the top again?\n\nThe inner ring has integers from 0 to innerMax and the outer ring has integers from 0 to outerMax, where innerMax and outerMax are integers >= 1.\n\n---\n\nTest input range:\n\n- `100` tests with `1 <= innerMax, outerMax <= 10000`\n- `400` tests with `1 <= innerMax, outerMax <= 2^48`\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[]", "qwen2.5-coder-32b-instruct": "[[2, 3], [3, 2], [1, 1], [10, 10], [100, 100], [1000, 1000], [10000, 10000], [1, 10000], [10000, 1], [2, 4], [4, 2], [5, 5], [7, 11], [11, 7], [13, 17], [17, 13], [10000, 10001], [10001, 10000], [12345, 67890], [67890, 12345], [9999, 10000], [10000, 9999], [2147483647, 2147483647], [2147483647, 1], [1, 2147483647], [1000000000, 1000000000], [1000000000, 1000000001], [1000000001, 1000000000], [999999999, 1000000000], [1000000000, 999999999]]"}}
{"requirement": "def filter_words(st: str) -> str:\n\"\"\"Write a function taking in a string like `WOW this is REALLY          amazing` and returning `Wow this is really amazing`. String should be capitalized and properly spaced. Using `re` and `string` is not allowed.\n\nExamples:\n\n```python\nfilter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me\nfilter_words('now THIS is REALLY interesting') #=> Now this is really interesting\nfilter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!\n```\n\"\"\"", "inputs": [["HELLO world!"], ["This    will    not    pass "], ["NOW THIS is a VERY EXCITING test!"]], "outputs": [["Hello world!"], ["This will not pass"], ["Now this is a very exciting test!"]], "starter_code": "def filter_words(st: str) -> str:", "canonical_solution": "def filter_words(st):\n    return ' '.join(st.capitalize().split())", "entry_point": "filter_words", "task_id": "TACO_lite/926", "input_output_examples": "[[['HELLO CAN YOU HEAR ME'], ['now THIS is REALLY interesting'], ['THAT was EXTRAORDINARY!']], [['Hello can you hear me'], ['Now this is really interesting'], ['That was extraordinary!']]]", "requirement_without_examples": "def filter_words(st: str) -> str:\n\"\"\"Write a function taking in a string like `WOW this is REALLY          amazing` and returning `Wow this is really amazing`. String should be capitalized and properly spaced. Using `re` and `string` is not allowed.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['WOW this is REALLY          amazing'], ['HELLO CAN YOU HEAR ME'], ['now THIS is REALLY interesting'], ['THAT was EXTRAORDINARY!'], ['   too  many   spaces   here   '], ['ALL CAPS'], ['lower case'], ['MiXeD CaSe'], ['   leading spaces'], ['trailing spaces   '], ['   both   leading   and   trailing   '], ['single'], ['   '], ['']]", "qwen2.5-coder-32b-instruct": "[['HELLO CAN YOU HEAR ME'], ['now THIS is REALLY interesting'], ['THAT was EXTRAORDINARY!'], ['WOW this is REALLY          amazing'], ['singleword'], ['   leading and trailing spaces   '], ['MIXED CASE with MULTIPLE    SPACES'], ['!@#$%^&*() with symbols'], [''], [' ']]"}}
{"requirement": "from typing import List\n\n\ndef distribute(nodes: int, workload: int) -> List[List[int]]:\n\"\"\"Bob has a server farm crunching numbers. He has `nodes` servers in his farm. His company has a lot of work to do. \n\nThe work comes as a number `workload` which indicates how many jobs there are. Bob wants his servers to get an equal number of jobs each. If that is impossible, he wants the first servers to receive more jobs. He also wants the jobs sorted, so that the first server receives the first jobs.\n\nThe way this works, Bob wants an array indicating which jobs are going to which servers.\n\nCan you help him distribute all this work as evenly as possible onto his servers?\n\nExample\n-------\n\nBob has `2` servers and `4` jobs. The first server should receive job 0 and 1 while the second should receive 2 and 3.\n\n```\ndistribute(2, 4) # => [[0, 1], [2, 3]]\n```\n\nOn a different occasion Bob has `3` servers and `3` jobs. Each should get just one.\n\n```\ndistribute(3, 3) # => [[0], [1], [2]]\n```\n\nA couple of days go by and Bob sees a spike in jobs. Now there are `10`, but he hasn't got more than `4` servers available. He boots all of them. This time the first and second should get a job more than the third and fourth.\n\n```\ndistribute(4, 10) # => [[0, 1, 2], [3, 4, 5], [6, 7], [8, 9]]\n```\n\nInput\n-----\n\nDon't worry about invalid inputs. That is, `nodes > 0` and `workload > 0` and both will always be integers.\n\"\"\"", "inputs": [[2, 4], [3, 3], [3, 9], [2, 5], [4, 10], [4, 5], [1, 1], [2, 1], [5, 4], [5, 1]], "outputs": [[[[0, 1], [2, 3]]], [[[0], [1], [2]]], [[[0, 1, 2], [3, 4, 5], [6, 7, 8]]], [[[0, 1, 2], [3, 4]]], [[[0, 1, 2], [3, 4, 5], [6, 7], [8, 9]]], [[[0, 1], [2], [3], [4]]], [[[0]]], [[[0], []]], [[[0], [1], [2], [3], []]], [[[0], [], [], [], []]]], "starter_code": "from typing import List\ndef distribute(nodes: int, workload: int) -> List[List[int]]:", "canonical_solution": "def distribute(nodes, workload):\n    w = list(range(workload))[::-1]\n    return [[w.pop() for _ in range(workload // nodes + (workload % nodes > n))] for n in range(nodes)]", "entry_point": "distribute", "task_id": "TACO_lite/947", "input_output_examples": "[[[2, 4], [3, 3], [4, 10]], [[[[0, 1], [2, 3]]], [[[0], [1], [2]]], [[[0, 1, 2], [3, 4, 5], [6, 7], [8, 9]]]]]", "requirement_without_examples": "from typing import List\n\n\ndef distribute(nodes: int, workload: int) -> List[List[int]]:\n\"\"\"Bob has a server farm crunching numbers. He has `nodes` servers in his farm. His company has a lot of work to do. \n\nThe work comes as a number `workload` which indicates how many jobs there are. Bob wants his servers to get an equal number of jobs each. If that is impossible, he wants the first servers to receive more jobs. He also wants the jobs sorted, so that the first server receives the first jobs.\n\nThe way this works, Bob wants an array indicating which jobs are going to which servers.\n\nCan you help him distribute all this work as evenly as possible onto his servers?\n\nInput\n-----\n\nDon't worry about invalid inputs. That is, `nodes > 0` and `workload > 0` and both will always be integers.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[2, 4], [3, 3], [4, 10], [1, 5], [5, 1], [7, 14], [3, 7], [10, 100], [1, 1], [100, 1]]", "qwen2.5-coder-32b-instruct": "[[2, 4], [3, 3], [4, 10], [1, 1], [5, 1], [1, 10], [3, 10], [10, 100], [7, 20], [10, 5]]"}}
{"requirement": "def permutation_average(n: int) -> int:\n\"\"\"A number is simply made up of digits.  \nThe number 1256 is made up of the digits 1, 2, 5, and 6.  \nFor 1256 there are 24 distinct permutations of the digits:  \n1256, 1265, 1625, 1652, 1562, 1526, 2156, 2165, 2615, 2651, 2561, 2516,   \n5126, 5162, 5216, 5261, 5621, 5612, 6125, 6152, 6251, 6215, 6521, 6512.\n  \nYour goal is to write a program that takes a number, n, and returns the average value of all distinct permutations of the digits in n.  Your answer should be rounded to the nearest integer. For the example above the return value would be 3889. * \n  \n  n will never be negative\n  \nA few examples:\n```python\npermutation_average(2)\nreturn 2\n\npermutation_average(25)\n>>> 25 + 52 = 77\n>>> 77 / 2 = 38.5\nreturn 39 *\n\npermutation_average(20)\n>>> 20 + 02 = 22\n>>> 22 / 2 = 11\nreturn 11\n\npermutation_average(737)\n>>> 737 + 377 + 773 = 1887\n>>> 1887 / 3 = 629\nreturn 629\n\n```\n\nNote: Your program should be able to handle numbers up to 6 digits long\n~~~if:python\n\\* Python version 3 and above uses Banker Rounding so the expected values for those tests would be 3888 and 38 respectively\n~~~\n~~~if-not:python\n\\* ignore these marks, they're for Python only\n~~~\n\"\"\"", "inputs": [[2], [25], [737]], "outputs": [[2], [38], [629]], "starter_code": "def permutation_average(n: int) -> int:", "canonical_solution": "from itertools import permutations\n\ndef permutation_average(n):\n    perms = [float(''.join(e)) for e in permutations(str(n))]\n    return int(round(sum(perms) / len(perms)))", "entry_point": "permutation_average", "task_id": "TACO_lite/965", "input_output_examples": "[[[2], [25], [20], [737]], [[2], [39], [11], [629]]]", "requirement_without_examples": "def permutation_average(n: int) -> int:\n\"\"\"A number is simply made up of digits.  \nThe number 1256 is made up of the digits 1, 2, 5, and 6.  \n\nYour goal is to write a program that takes a number, n, and returns the average value of all distinct permutations of the digits in n.  Your answer should be rounded to the nearest integer.  \n\nn will never be negative.  \n\nNote: Your program should be able to handle numbers up to 6 digits long  \n~~~if:python\n\\* Python version 3 and above uses Banker Rounding so the expected values for those tests would be 3888 and 38 respectively\n~~~\n~~~if-not:python\n\\* ignore these marks, they're for Python only\n~~~\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[2], [25], [20], [737], [1234], [11111], [123456], [100000]]", "qwen2.5-coder-32b-instruct": "[[2], [25], [20], [737], [123], [111], [999999], [123456], [1000], [0]]"}}
{"requirement": "def convert_hash_to_array(hash: dict) -> list:\n\"\"\"Convert a hash into an array. Nothing more, Nothing less.\n\n```\n{name: 'Jeremy', age: 24, role: 'Software Engineer'}\n```\nshould be converted into\n\n```\n[[\"name\", \"Jeremy\"], [\"age\", 24], [\"role\", \"Software Engineer\"]]\n```\n\n```if:python,javascript,crystal\n**Note**: The output array should be sorted alphabetically.\n```\n\nGood Luck!\n\"\"\"", "inputs": [[{"name": "Jeremy"}], [{"name": "Jeremy", "age": 24}], [{"name": "Jeremy", "age": 24, "role": "Software Engineer"}], [{"product": "CodeWars", "power_level_over": 9000}], [{}]], "outputs": [[[["name", "Jeremy"]]], [[["age", 24], ["name", "Jeremy"]]], [[["age", 24], ["name", "Jeremy"], ["role", "Software Engineer"]]], [[["power_level_over", 9000], ["product", "CodeWars"]]], [[]]], "starter_code": "def convert_hash_to_array(hash: dict) -> list:", "canonical_solution": "def convert_hash_to_array(hash):\n    return sorted(map(list, hash.items()))", "entry_point": "convert_hash_to_array", "task_id": "TACO_lite/1066", "input_output_examples": "[[[{'name': 'Jeremy', 'age': 24, 'role': 'Software Engineer'}]], [[[['age', 24], ['name', 'Jeremy'], ['role', 'Software Engineer']]]]]", "requirement_without_examples": "def convert_hash_to_array(hash: dict) -> list:\n\"\"\"Convert a hash into an array. Nothing more, Nothing less.\n\n**Note**: The output array should be sorted alphabetically.\n\nGood Luck!\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[{'name': 'Jeremy', 'age': 24, 'role': 'Software Engineer'}], [{'a': 1, 'b': 2, 'c': 3}], [{'z': 26, 'y': 25, 'x': 24}], [{'single_key': 'single_value'}], [{}], [{'name': 'Alice', 'age': 30, 'city': 'Wonderland', 'job': 'Developer'}], [{'a': 'apple', 'b': 'banana', 'c': 'cherry'}], [{'1': 'one', '2': 'two', '3': 'three'}], [{'key_with_empty_value': ''}], [{'empty_key': None}]]", "qwen2.5-coder-32b-instruct": "[[{'name': 'Jeremy', 'age': 24, 'role': 'Software Engineer'}], [{'a': 1, 'b': 2, 'c': 3}], [{'z': 9, 'y': 8, 'x': 7}], [{}], [{'single': 'value'}], [{'numbers': [1, 2, 3], 'nested': {'key': 'value'}}]]"}}
{"requirement": "def find_longest(xs: list) -> int:\n\"\"\"Find the number with the most digits.\n\nIf two numbers in the argument array have the same number of digits, return the first one in the array.\n\"\"\"", "inputs": [[[1, 10, 100]], [[9000, 8, 800]], [[8, 900, 500]], [[3, 40000, 100]], [[1, 200, 100000]]], "outputs": [[100], [9000], [900], [40000], [100000]], "starter_code": "def find_longest(xs: list) -> int:", "canonical_solution": "def find_longest(xs):\n    return max(xs, key=lambda x: len(str(x)))", "entry_point": "find_longest", "task_id": "TACO_lite/1080", "input_output_examples": "[[], []]", "requirement_without_examples": "def find_longest(xs: list) -> int:\n\"\"\"Find the number with the most digits.\n\nIf two numbers in the argument array have the same number of digits, return the first one in the array.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[123, 4567, 89]], [[1, 22, 333, 4444]], [[987654321, 123456789]], [[5, 55, 555, 5555, 55555]], [[1000, 100, 10, 1]], [[9, 99, 999, 9999]], [[123456789, 987654321, 12345678]], [[111, 222, 333, 4444]], [[123, 456, 789, 101112]], [[1]], [[]]]", "qwen2.5-coder-32b-instruct": "[[[1, 22, 333]], [[5678, 90, 12]], [[12345, 6789, 101112]], [[1, 1, 1]], [[0, 0, 0]], [[1000, 100, 10]], [[987654321, 123456789, 9876543210]], [[]], [[12345678901234567890]]]"}}
{"requirement": "from typing import List\n\n\ndef highest_rank(arr: List[int]) -> int:\n\"\"\"Complete the method which returns the number which is most frequent in the given input array. If there is a tie for most frequent number, return the largest number among them.\n\nNote: no empty arrays will be given.\n\n\n## Examples\n\n```\n[12, 10, 8, 12, 7, 6, 4, 10, 12]              -->  12\n[12, 10, 8, 12, 7, 6, 4, 10, 12, 10]          -->  12\n[12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]  -->   3\n```\n\"\"\"", "inputs": [[[12, 10, 8, 12, 7, 6, 4, 10, 12]], [[12, 10, 8, 12, 7, 6, 4, 10, 10]], [[12, 10, 8, 12, 7, 6, 4, 10, 12, 10]], [[12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]], [[1, 2, 3]], [[1, 1, 2, 3]], [[1, 1, 2, 2, 3]]], "outputs": [[12], [10], [12], [3], [3], [1], [2]], "starter_code": "from typing import List\ndef highest_rank(arr: List[int]) -> int:", "canonical_solution": "from collections import Counter\n\ndef highest_rank(arr):\n    if arr:\n        c = Counter(arr)\n        m = max(c.values())\n        return max((k for k, v in c.items() if v == m))", "entry_point": "highest_rank", "task_id": "TACO_lite/1116", "input_output_examples": "[[[[12, 10, 8, 12, 7, 6, 4, 10, 12]], [[12, 10, 8, 12, 7, 6, 4, 10, 12, 10]], [[12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]]], [[12], [12], [3]]]", "requirement_without_examples": "from typing import List\n\n\ndef highest_rank(arr: List[int]) -> int:\n\"\"\"Complete the method which returns the number which is most frequent in the given input array. If there is a tie for most frequent number, return the largest number among them.\n\nNote: no empty arrays will be given.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[12, 10, 8, 12, 7, 6, 4, 10, 12]], [[12, 10, 8, 12, 7, 6, 4, 10, 12, 10]], [[12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]], [[1, 1, 2, 2]], [[5, 5, 5, 5, 5]], [[10, 20, 30, 40, 50]], [[7, 7, 7, 8, 8, 8, 9, 9, 9]], [[1, 2, 3, 4, 5, 5, 4, 3, 2, 1]], [[0, 0, 1, 1, 1, 2, 2, 2, 2]], [[100, 100, 200, 200, 200, 300, 300, 300, 300]]]", "qwen2.5-coder-32b-instruct": "[[[12, 10, 8, 12, 7, 6, 4, 10, 12]], [[12, 10, 8, 12, 7, 6, 4, 10, 12, 10]], [[12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]], [[1, 1, 2, 2, 3, 3]], [[5, 5, 5, 1, 1, 1, 2, 2]], [[7]], [[9, 9, 8, 8, 7, 7, 6, 6, 5, 5]], [[10, 20, 20, 10, 30, 30, 30, 20]], [[100, 200, 300, 300, 200, 100, 300]]]"}}
{"requirement": "from typing import List\n\n\ndef compound_array(a: List[int], b: List[int]) -> List[int]:\n\"\"\"You have to create a method \"compoundArray\" which should take as input two int arrays of different length and return one int array with numbers of both arrays shuffled one by one. \n```Example: \nInput - {1,2,3,4,5,6} and {9,8,7,6} \nOutput - {1,9,2,8,3,7,4,6,5,6}\n```\n\"\"\"", "inputs": [[[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]], "outputs": [[[1, 9, 2, 8, 3, 7, 4, 6, 5, 6]], [[0, 9, 1, 8, 2, 7, 6, 5, 4, 3, 2, 1, 0]], [[11, 21, 12, 22, 23, 24]], [[2147483647, 9, 2147483646, 2147483645, 2147483644, 2147483643]], [[214, 215, 216, 217, 218]], [[214, 215, 219, 217, 218]], [[]]], "starter_code": "from typing import List\ndef compound_array(a: List[int], b: List[int]) -> List[int]:", "canonical_solution": "def compound_array(a, b):\n    x = []\n    while a or b:\n        if a:\n            x.append(a.pop(0))\n        if b:\n            x.append(b.pop(0))\n    return x", "entry_point": "compound_array", "task_id": "TACO_lite/1163", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [9, 8, 7, 6]]], [[[1, 9, 2, 8, 3, 7, 4, 6, 5, 6]]]]", "requirement_without_examples": "from typing import List\n\n\ndef compound_array(a: List[int], b: List[int]) -> List[int]:\n    \"\"\"You have to create a method \"compoundArray\" which should take as input two int arrays of different length and return one int array with numbers of both arrays shuffled one by one.\n\n    \"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5, 6], [9, 8, 7, 6]], [[1, 2, 3], [4, 5]], [[1], [2, 3, 4, 5]], [[], [1, 2, 3]], [[1, 2, 3], []], [[10, 20], [30, 40, 50, 60]], [[5, 10, 15], [20, 25]], [[100, 200, 300, 400], [500]], [[0, 0, 0], [1, 1, 1]], [[-1, -2, -3], [1, 2, 3]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5, 6], [9, 8, 7, 6]], [[1, 3, 5], [2, 4, 6, 8, 10]], [[], [1, 2, 3]], [[1, 2, 3], []], [[1], [9]], [[1, 2], [3]], [[1, 2, 3], [4, 5]]]"}}
{"requirement": "from typing import List\n\n\ndef total(arr: List[int]) -> int:\n\"\"\"In this Kata, you will be given an integer array and your task is to return the sum of elements occupying prime-numbered indices. \n\n~~~if-not:fortran\nThe first element of the array is at index `0`.\n~~~\n\n~~~if:fortran\nThe first element of an array is at index `1`.\n~~~\n\n\nGood luck! \n\nIf you like this Kata, try:\n\n[Dominant primes](https://www.codewars.com/kata/59ce11ea9f0cbc8a390000ed). It takes this idea a step further.\n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\"\"\"", "inputs": [[[]], [[1, 2, 3, 4]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]], "outputs": [[0], [7], [13], [21], [21], [33], [47]], "starter_code": "from typing import List\ndef total(arr: List[int]) -> int:", "canonical_solution": "def is_prime(n):\n    return n >= 2 and all((n % i for i in range(2, 1 + int(n ** 0.5))))\n\ndef total(arr):\n    return sum((n for i, n in enumerate(arr) if is_prime(i)))", "entry_point": "total", "task_id": "TACO_lite/1205", "input_output_examples": "[[], []]", "requirement_without_examples": "from typing import List\n\n\ndef total(arr: List[int]) -> int:\n\"\"\"In this Kata, you will be given an integer array and your task is to return the sum of elements occupying prime-numbered indices. \n\n~~~if-not:fortran\nThe first element of the array is at index `0`.\n~~~\n\n~~~if:fortran\nThe first element of an array is at index `1`.\n~~~\n\nGood luck! \n\nIf you like this Kata, try:\n\n[Dominant primes](https://www.codewars.com/kata/59ce11ea9f0cbc8a390000ed). It takes this idea a step further.\n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[1, 2, 3, 4, 5]], [[]], [[10]], [[7, 8, 9, 10, 11, 12, 13, 14, 15]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]]]", "qwen2.5-coder-32b-instruct": "[[[1, 2, 3, 4, 5]], [[10, 20, 30, 40, 50, 60, 70]], [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1]], [[5]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]"}}
{"requirement": "def count_ways(n: int, k: int) -> int:\n\"\"\"Bob has ladder. He wants to climb this ladder, but being a precocious child, he wonders about exactly how many ways he could to climb this `n` size ladder using jumps of up to distance `k`.\n\nConsider this example...\n\nn = 5\\\nk = 3\n\nHere, Bob has ladder of length 5, and with each jump, he can ascend up to 3 steps (he can either jump step 1 or 2 or 3). This gives the below possibilities\n\n```\n1 1 1 1 1\n1 1 1 2\n1 1 2 1 \n1 2 1 1\n2 1 1 1\n1 2 2\n2 2 1\n2 1 2\n1 1 3\n1 3 1\n3 1 1\n2 3\n3 2\n```\n\nYour task to calculate number of ways to climb ladder of length `n` with upto `k` steps for Bob. (13 in above case)\n\nConstraints:\n\n```python\n1<=n<=50\n1<=k<=15\n```\n\n_Tip: try fibonacci._\n\"\"\"", "inputs": [[1, 3], [3, 3], [2, 3], [5, 3], [4, 3], [10, 6], [14, 7]], "outputs": [[1], [4], [2], [13], [7], [492], [7936]], "starter_code": "def count_ways(n: int, k: int) -> int:", "canonical_solution": "from collections import deque\n\ndef count_ways(n, k):\n    s, d = (1, deque([0] * k))\n    for i in range(n):\n        d.append(s)\n        s = 2 * s - d.popleft()\n    return s - d.pop()", "entry_point": "count_ways", "task_id": "TACO_lite/1219", "input_output_examples": "[[[5, 3]], [[13]]]", "requirement_without_examples": "def count_ways(n: int, k: int) -> int:\n\"\"\"Bob has ladder. He wants to climb this ladder, but being a precocious child, he wonders about exactly how many ways he could to climb this `n` size ladder using jumps of up to distance `k`.\n\nYour task to calculate number of ways to climb ladder of length `n` with upto `k` steps for Bob.\n\nConstraints:\n\n```python\n1<=n<=50\n1<=k<=15\n```\n\n_Tip: try fibonacci._\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[5, 3], [1, 1], [2, 1], [3, 2], [10, 2], [15, 5], [20, 10], [50, 15], [1, 15], [50, 1], [10, 10], [25, 3], [30, 7], [40, 12], [5, 5]]", "qwen2.5-coder-32b-instruct": "[[1, 1], [2, 2], [3, 2], [4, 3], [5, 3], [10, 10], [15, 5], [20, 15], [50, 15], [50, 1], [50, 50], [1, 15], [3, 1], [0, 0], [5, 0]]"}}
{"requirement": "def sum_of_squares(n: int) -> int:\n\"\"\"The task is simply stated. Given an integer n (3 < n < 10^(9)), find the length of the smallest list of [*perfect squares*](https://en.wikipedia.org/wiki/Square_number) which add up to n. Come up with the best algorithm you can; you'll need it!\n\nExamples:\n\nsum_of_squares(17) = 2  17 = 16 + 1 (4 and 1 are perfect squares).\nsum_of_squares(15) = 4  15 = 9 + 4 + 1 + 1. There is no way to represent 15 as the sum of three perfect squares.\nsum_of_squares(16) = 1  16 itself is a perfect square.\n\nTime constraints:\n\n5 easy (sample) test cases: n < 20\n\n5 harder test cases: 1000 < n < 15000\n\n5 maximally hard test cases: 5 * 1e8 < n < 1e9\n\n```if:java\n300 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:c#\n350 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:python\n15 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:ruby\n25  random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:javascript\n100 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:crystal\n250 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:cpp\nRandom maximally hard test cases: 1e8 < n < 1e9\n```\n\"\"\"", "inputs": [[15], [16], [17], [18], [19], [2017], [1008], [3456], [4000], [12321], [661915703], [999887641], [999950886], [999951173], [999998999]], "outputs": [[4], [1], [2], [2], [3], [2], [4], [3], [2], [1], [4], [1], [3], [2], [4]], "starter_code": "def sum_of_squares(n: int) -> int:", "canonical_solution": "def one_square(n):\n    return round(n ** 0.5) ** 2 == n\n\ndef two_squares(n):\n    while n % 2 == 0:\n        n //= 2\n    p = 3\n    while p * p <= n:\n        while n % (p * p) == 0:\n            n //= p * p\n        while n % p == 0:\n            if p % 4 == 3:\n                return False\n            n //= p\n        p += 2\n    return n % 4 == 1\n\ndef three_squares(n):\n    while n % 4 == 0:\n        n //= 4\n    return n % 8 != 7\n\ndef sum_of_squares(n):\n    if one_square(n):\n        return 1\n    if two_squares(n):\n        return 2\n    if three_squares(n):\n        return 3\n    return 4", "entry_point": "sum_of_squares", "task_id": "TACO_lite/1235", "input_output_examples": "[[[17], [15], [16]], [[2], [4], [1]]]", "requirement_without_examples": "def sum_of_squares(n: int) -> int:\n\"\"\"The task is simply stated. Given an integer n (3 < n < 10^(9)), find the length of the smallest list of [*perfect squares*](https://en.wikipedia.org/wiki/Square_number) which add up to n. Come up with the best algorithm you can; you'll need it!\n\nTime constraints:\n\n5 easy (sample) test cases: n < 20\n\n5 harder test cases: 1000 < n < 15000\n\n5 maximally hard test cases: 5 * 1e8 < n < 1e9\n\n```if:java\n300 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:c#\n350 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:python\n15 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:ruby\n25  random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:javascript\n100 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:crystal\n250 random maximally hard test cases: 1e8 < n < 1e9\n```\n```if:cpp\nRandom maximally hard test cases: 1e8 < n < 1e9\n```\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[]", "qwen2.5-coder-32b-instruct": "[[17], [15], [16], [1000], [14999], [500000000], [999999999], [100000000], [123456789], [111111111], [200000000], [300000000], [400000000], [500000001], [999999998]]"}}
{"requirement": "def solve(n: int) -> int:\n\"\"\"Consider an array that has no prime numbers, and none of its elements has any prime digit. It would start with: `[1,4,6,8,9,10,14,16,18,..]`. \n\n`12` and `15` are not in the list because `2` and `5` are primes.\n\nYou will be given an integer `n` and your task will be return the number at that index in the array. \nFor example:\n```\nsolve(0) = 1\nsolve(2) = 6\n``` \n\nMore examples in the test cases.\n\nGood luck!\n\nIf you like Prime Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"", "inputs": [[10], [50], [100], [150], [200], [300], [400], [500], [1000], [2000], [3000]], "outputs": [[44], [169], [644], [896], [1060], [1668], [4084], [4681], [9110], [18118], [46166]], "starter_code": "def solve(n: int) -> int:", "canonical_solution": "n, forbid = (100000, set('2357'))\nsieve, notPrimes = ([0] * (n + 1), [1])\nfor i in range(2, n + 1):\n    if sieve[i]:\n        if not forbid & set(str(i)):\n            notPrimes.append(i)\n    else:\n        for j in range(i ** 2, n + 1, i):\n            sieve[j] = 1\n\ndef solve(n):\n    return notPrimes[n]", "entry_point": "solve", "task_id": "TACO_lite/1317", "input_output_examples": "[[[0], [2]], [[1], [6]]]", "requirement_without_examples": "def solve(n: int) -> int:\n\"\"\"Consider an array that has no prime numbers, and none of its elements has any prime digit. It would start with: `[1,4,6,8,9,10,14,16,18,..]`. \n\n`12` and `15` are not in the list because `2` and `5` are primes.\n\nYou will be given an integer `n` and your task will be return the number at that index in the array. \n\nMore examples in the test cases.\n\nGood luck!\n\nIf you like Prime Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[0], [1], [2], [3], [4], [5], [10], [20], [50], [100]]", "qwen2.5-coder-32b-instruct": "[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [50], [100], [1000]]"}}
{"requirement": "def check_root(string: str) -> str:\n\"\"\"While surfing in web I found interesting math problem called \"Always perfect\". That means if you add 1 to the product of four consecutive numbers the answer is ALWAYS a perfect square.\nFor example we have: 1,2,3,4 and the product will be 1X2X3X4=24. If we add 1 to the product that would become 25, since the result number is a perfect square the square root of 25 would be 5.\n\nSo now lets write a function which takes numbers separated by commas in string format and returns the number which is a perfect square and the square root of that number.\n\nIf string contains other characters than number or it has more or less than 4 numbers separated by comma function returns \"incorrect input\".\n\nIf string contains 4 numbers but not consecutive it returns \"not consecutive\".\n\"\"\"", "inputs": [["4,5,6,7"], ["3,s,5,6"], ["11,13,14,15"], ["10,11,12,13,15"], ["10,11,12,13"], ["ad,d,q,tt,v"], ["//,;;,/,..,"], ["1,2,3,4"], ["1015,1016,1017,1018"], ["555,777,444,111"], ["20,21,22,24"], ["9,10,10,11"], ["11254,11255,11256,11258"], ["25000,25001,25002,25003"], ["2000000,2000001,2000002,2000003"], ["4,5,6,q"], ["5,6,7"], ["3,5,6,7"], ["-4,-3,-2,-1"], ["-1,0,1,2"]], "outputs": [["841, 29"], ["incorrect input"], ["not consecutive"], ["incorrect input"], ["17161, 131"], ["incorrect input"], ["incorrect input"], ["25, 5"], ["1067648959441, 1033271"], ["not consecutive"], ["not consecutive"], ["not consecutive"], ["not consecutive"], ["390718756875150001, 625075001"], ["16000048000044000012000001, 4000006000001"], ["incorrect input"], ["incorrect input"], ["not consecutive"], ["25, 5"], ["1, 1"]], "starter_code": "def check_root(string: str) -> str:", "canonical_solution": "def check_root(string):\n    try:\n        a, b, c, d = [int(i) for i in string.split(',')]\n        if not (a == b - 1 and a == c - 2 and (a == d - 3)):\n            return 'not consecutive'\n        s = a * b * c * d + 1\n        return str(s) + ', ' + str(int(s ** 0.5))\n    except:\n        return 'incorrect input'", "entry_point": "check_root", "task_id": "TACO_lite/1669", "input_output_examples": "[[['1,2,3,4'], ['2,3,4,5'], ['1,2,3'], ['1-2-3-4'], ['1,2,3,6']], [['25, 5'], ['121, 11'], ['incorrect input'], ['incorrect input'], ['not consecutive']]]", "requirement_without_examples": "def check_root(string: str) -> str:\n\"\"\"While surfing in web I found interesting math problem called \"Always perfect\". That means if you add 1 to the product of four consecutive numbers the answer is ALWAYS a perfect square.\n\nSo now lets write a function which takes numbers separated by commas in string format and returns the number which is a perfect square and the square root of that number.\n\nIf string contains other characters than number or it has more or less than 4 numbers separated by comma function returns \"incorrect input\".\n\nIf string contains 4 numbers but not consecutive it returns \"not consecutive\".\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['1,2,3,4'], ['5,6,7,8'], ['2,3,4,5'], ['1,2,3,5'], ['1,2,3'], ['1,2,3,4,5'], ['a,b,c,d'], ['1.2,3,4,5'], ['1,2,3,-4'], ['0,1,2,3'], ['10,11,12,13'], ['1,1,1,1'], ['999999999,1000000000,1000000001,1000000002']]", "qwen2.5-coder-32b-instruct": "[['1,2,3,4'], ['2,3,4,5'], ['-2,-1,0,1'], ['0,1,2,3'], ['1,1,2,3'], ['1,2,4,5'], ['1,2,3,5'], ['1,2,3,4,5'], ['1,2,3'], ['1,2,3,a'], ['1,2,3,4a'], ['a,b,c,d'], ['1,2,3,4,5,6'], ['10,11,12,13'], ['100,101,102,103'], ['-3,-2,-1,0']]"}}
{"requirement": "from typing import List\n\n\ndef chess_bishop_dream(b: List[int], p: List[int], d: List[int], k: int) -> List[int]:\n\"\"\"# Task\n In ChessLand there is a small but proud chess bishop with a recurring dream. \n \n In the dream the bishop finds itself on an `n × m` chessboard with mirrors along each edge, and it is not a bishop but a ray of light. This ray of light moves only along diagonals (the bishop can't imagine any other types of moves even in its dreams), it never stops, and once it reaches an edge or a corner of the chessboard it reflects from it and moves on.\n\n Given the initial position and the direction of the ray, find its position after `k` steps where a step means either moving from one cell to the neighboring one or reflecting from a corner of the board.\n\n# Example\n\n For `boardSize = [3, 7], initPosition = [1, 2], initDirection = [-1, 1] and k = 13,` the output should be `[0, 1]`.\n\n Here is the bishop's path:\n```\n[1, 2] -> [0, 3] -(reflection from the top edge)\n         -> [0, 4] -> [1, 5] -> [2, 6] -(reflection from the bottom right corner)\n         -> [2, 6] ->[1, 5] -> [0, 4] -(reflection from the top edge)\n         -> [0, 3] ->[1, 2] -> [2, 1] -(reflection from the bottom edge)\n         -> [2, 0] -(reflection from the left edge)\n         -> [1, 0] -> [0, 1]```\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessBishopDream/img/example.png?_tm=1472324389202)\n\n# Input/Output\n\n\n - `[input]` integer array `boardSize`\n\n    An array of two integers, the number of `rows` and `columns`, respectively. Rows are numbered by integers from `0 to boardSize[0] - 1`, columns are numbered by integers from `0 to boardSize[1] - 1` (both inclusive).\n\n    Constraints: `1 ≤ boardSize[i] ≤ 20.`\n\n\n - `[input]` integer array `initPosition`\n\n    An array of two integers, indices of the `row` and the `column` where the bishop initially stands, respectively.\n\n    Constraints:  `0 ≤ initPosition[i] < boardSize[i]`.\n\n\n - `[input]` integer array `initDirection`\n\n    An array of two integers representing the initial direction of the bishop. \n    \n    If it stands in `(a, b)`, the next cell he'll move to is `(a + initDirection[0], b + initDirection[1])` or whichever it'll reflect to in case it runs into a mirror immediately.\n\n    Constraints: `initDirection[i] ∈ {-1, 1}`.\n\n\n - `[input]` integer `k`\n\n    Constraints: `1 ≤ k ≤ 1000000000`.\n\n\n - `[output]` an integer array\n\n    The position of the bishop after `k` steps.\n\"\"\"", "inputs": [[[3, 7], [1, 2], [-1, 1], 13], [[1, 2], [0, 0], [1, 1], 6], [[2, 2], [1, 0], [1, 1], 12], [[1, 1], [0, 0], [1, -1], 1000000000], [[2, 3], [1, 2], [-1, -1], 41], [[17, 19], [14, 8], [1, -1], 239239], [[17, 19], [16, 18], [1, 1], 239239239]], "outputs": [[[0, 1]], [[0, 1]], [[1, 0]], [[0, 0]], [[0, 2]], [[4, 17]], [[10, 2]]], "starter_code": "from typing import List\ndef chess_bishop_dream(b: List[int], p: List[int], d: List[int], k: int) -> List[int]:", "canonical_solution": "def chess_bishop_dream(b, p, d, k):\n    yq, yr = divmod(p[0] + k * d[0], 2 * b[0])\n    xq, xr = divmod(p[1] + k * d[1], 2 * b[1])\n    return [min(yr, 2 * b[0] - yr - 1), min(xr, 2 * b[1] - xr - 1)]", "entry_point": "chess_bishop_dream", "task_id": "TACO_lite/1716", "input_output_examples": "[[[[3, 7], [1, 2], [-1, 1], 13]], [[[0, 1]]]]", "requirement_without_examples": "from typing import List\n\n\ndef chess_bishop_dream(b: List[int], p: List[int], d: List[int], k: int) -> List[int]:\n\"\"\"# Task\n In ChessLand there is a small but proud chess bishop with a recurring dream. \n \n In the dream the bishop finds itself on an `n × m` chessboard with mirrors along each edge, and it is not a bishop but a ray of light. This ray of light moves only along diagonals (the bishop can't imagine any other types of moves even in its dreams), it never stops, and once it reaches an edge or a corner of the chessboard it reflects from it and moves on.\n\n Given the initial position and the direction of the ray, find its position after `k` steps where a step means either moving from one cell to the neighboring one or reflecting from a corner of the board.\n\n# Input/Output\n\n\n - `[input]` integer array `boardSize`\n\n    An array of two integers, the number of `rows` and `columns`, respectively. Rows are numbered by integers from `0 to boardSize[0] - 1`, columns are numbered by integers from `0 to boardSize[1] - 1` (both inclusive).\n\n    Constraints: `1 ≤ boardSize[i] ≤ 20.`\n\n\n - `[input]` integer array `initPosition`\n\n    An array of two integers, indices of the `row` and the `column` where the bishop initially stands, respectively.\n\n    Constraints:  `0 ≤ initPosition[i] < boardSize[i]`.\n\n\n - `[input]` integer array `initDirection`\n\n    An array of two integers representing the initial direction of the bishop. \n    \n    If it stands in `(a, b)`, the next cell he'll move to is `(a + initDirection[0], b + initDirection[1])` or whichever it'll reflect to in case it runs into a mirror immediately.\n\n    Constraints: `initDirection[i] ∈ {-1, 1}`.\n\n\n - `[input]` integer `k`\n\n    Constraints: `1 ≤ k ≤ 1000000000`.\n\n\n - `[output]` an integer array\n\n    The position of the bishop after `k` steps.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[3, 7], [1, 2], [-1, 1], 13], [[5, 5], [0, 0], [1, 1], 1], [[5, 5], [0, 0], [1, 1], 10], [[1, 1], [0, 0], [1, 1], 1000000000], [[2, 2], [0, 0], [1, 1], 4], [[4, 4], [2, 2], [-1, -1], 0], [[3, 3], [1, 1], [1, -1], 3], [[10, 10], [5, 5], [-1, 1], 100], [[20, 20], [10, 10], [1, 1], 1000000000], [[1, 20], [0, 10], [1, 1], 19]]", "qwen2.5-coder-32b-instruct": "[[[3, 7], [1, 2], [-1, 1], 13], [[1, 1], [0, 0], [-1, -1], 1], [[2, 2], [0, 0], [1, 1], 4], [[5, 5], [2, 2], [1, -1], 10], [[20, 20], [10, 10], [-1, 1], 1000000000], [[10, 1], [5, 0], [0, 1], 10], [[1, 10], [0, 5], [1, 0], 10], [[2, 3], [1, 1], [-1, -1], 7], [[3, 2], [1, 1], [1, 1], 5], [[4, 4], [0, 0], [1, 1], 16]]"}}
{"requirement": "from typing import List\n\n\ndef closest(lst: List[int]) -> Optional[int]:\n\"\"\"Simply find the closest value to zero from the list. Notice that there are negatives in the list.\n\nList is always not empty and contains only integers. Return ```None``` if it is not possible to define only one of such values. And of course, we are expecting 0 as closest value to zero.\n\nExamples:\n```code\n[2, 4, -1, -3]  => -1\n[5, 2, -2]      => None\n[5, 2, 2]       => 2\n[13, 0, -6]     => 0\n```\n\"\"\"", "inputs": [[[10, 3, 9, 1]], [[2, 4, -1, -3]], [[5, 2, -2]], [[5, 2, 2]], [[13, 0, -6]], [[1]], [[5, 1, -1, 2, -10]], [[5, -5, -2, 5, -3]], [[27, 37, 48, -18, 42, 16, 5, 34, 35, 26, -34, 3, -43, 35, 0, -45, -7, 45, 34, -18, 44, 12, 6, -45, 33, 27, -2, 28, 12, 9]], [[11, -30, -18, 4, -13, 43, 12, -5, -6, -3, 48, 24, -35, 13, -14, 16, 40, -5, 33, -39, -29, 19, -19, -36, 17, 26, 43, 11, 28, -32]], [[28, -36, 49, 39, -33, 22, -5, 23, -24, 47, -47, -30, -20, -18, 40, -21, -45, 10, -48, -26, -12, -21, 48, 16, 26, 21, -9, 33, 8, -49]], [[32, -26, 15, 17, -11, -14, 17, 44, 16, 49, 14, 11, 40, 27, -32, 6, 18, 38, 48, -28, -29, -28, 21, -38, 26, -37, -43, 16, 13, -6]], [[36, 43, 44, -15, 37, 38, -11, 37, 21, 8, 20, -13, -32, -15, 31, -6, -33, -6, -47, 0, 0, 33, 42, 0, -47, -29, -38, 18, -32, -33]], [[20, 26, 13, -47, -35, 39, 24, 46, -16, 5, 46, -30, -33, -38, -47, 23, 10, -39, -36, 41, 5, -24, 28, -30, 40, -24, -28, -17, -36, 41]]], "outputs": [[1], [-1], [null], [2], [0], [1], [null], [-2], [0], [-3], [-5], [null], [0], [5]], "starter_code": "from typing import List\ndef closest(lst: List[int]) -> Optional[int]:", "canonical_solution": "def closest(lst):\n    m = min(lst, key=abs)\n    return m if m == 0 or -m not in lst else None", "entry_point": "closest", "task_id": "TACO_lite/1749", "input_output_examples": "[[[[2, 4, -1, -3]], [[5, 2, -2]], [[5, 2, 2]], [[13, 0, -6]]], [[-1], [None], [2], [0]]]", "requirement_without_examples": "from typing import List\n\n\ndef closest(lst: List[int]) -> Optional[int]:\n\"\"\"Simply find the closest value to zero from the list. Notice that there are negatives in the list.\n\nList is always not empty and contains only integers. Return ```None``` if it is not possible to define only one of such values. And of course, we are expecting 0 as closest value to zero.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[[2, 4, -1, -3]], [[5, 2, -2]], [[5, 2, 2]], [[13, 0, -6]], [[-5, -3, -1, 1, 3]], [[1, 1, 1, 1]], [[-1, -1, -1, -1]], [[0, 0, 0, 0]], [[100, -100]], [[-7, 8, 9, -6]]]", "qwen2.5-coder-32b-instruct": "[[[2, 4, -1, -3]], [[5, 2, -2]], [[5, 2, 2]], [[13, 0, -6]], [[0]], [[1, -1]], [[100, 99, -100]], [[-1, -2, -3, 3, 2, 1]], [[1]], [[-1]]]"}}
{"requirement": "def solve(s: str) -> str:\n\"\"\"If we alternate the vowels and consonants in the string `\"have\"`, we get the following list, arranged alphabetically:\n`['ahev', 'aveh', 'ehav', 'evah', 'vahe', 'veha']`. These are the only possibilities in which vowels and consonants are alternated. The first element, `ahev`, is alphabetically lowest. \n\nGiven a string:\n* alternate the vowels and consonants and return the lexicographically lowest element in the list\n* If any two or more vowels or consonants must follow each other, return `\"failed\"`\n* if the number of vowels and consonants are equal, the first letter of the result must be a vowel.\n\nExamples: \n\n```Haskell\nsolve(\"codewars\") = \"failed\". However you alternate vowels and consonants, two consonants must follow each other\nsolve(\"oruder\") = \"edorur\"\nsolve(\"orudere\") = \"ederoru\". This is the only option that allows you to alternate vowels & consonants.\n```\n\n```if c:\nIn C, return an allocated string even if the response is \"failed\".\n```\n\nVowels will be any of \"aeiou\". Input will be a lowercase string, no spaces. See test cases for more examples. \n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\"\"\"", "inputs": [["java"], ["oruder"], ["zodiac"], ["apple"], ["acidity"], ["codewars"], ["orudere"]], "outputs": [["ajav"], ["edorur"], ["acidoz"], ["lapep"], ["caditiy"], ["failed"], ["ederoru"]], "starter_code": "def solve(s: str) -> str:", "canonical_solution": "def solve(s):\n    vowels = sorted((c for c in s if c in 'aeiou'))\n    consonants = sorted((c for c in s if c not in 'aeiou'))\n    part1, part2 = sorted((vowels, consonants), key=len, reverse=True)\n    part2.append('')\n    if len(part1) > len(part2):\n        return 'failed'\n    return ''.join((a + b for a, b in zip(part1, part2)))", "entry_point": "solve", "task_id": "TACO_lite/1877", "input_output_examples": "[[['codewars'], ['oruder'], ['orudere']], [['failed'], ['edorur'], ['ederoru']]]", "requirement_without_examples": "def solve(s: str) -> str:\n\"\"\"\nGiven a string:\n* alternate the vowels and consonants and return the lexicographically lowest element in the list\n* If any two or more vowels or consonants must follow each other, return `\"failed\"`\n* if the number of vowels and consonants are equal, the first letter of the result must be a vowel.\n\nVowels will be any of \"aeiou\". Input will be a lowercase string, no spaces. \n\nGood luck!\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[['have'], ['codewars'], ['oruder'], ['orudere'], ['a'], ['b'], ['ae'], ['bc'], ['aeiou'], ['bcdfg'], ['aeioub'], ['aeioubc'], ['aeioubcdf'], ['aeioubcdfg'], ['aeioubcdfgh'], ['aeioubcdfghj'], ['aeioubcdfghjk'], ['aeioubcdfghjkl'], ['aeioubcdfghjklm'], ['aeioubcdfghjklmn'], ['aeioubcdfghjklmno'], ['aeioubcdfghjklmnop'], ['aeioubcdfghjklmnopq'], ['aeioubcdfghjklmnopqr'], ['aeioubcdfghjklmnopqrs'], ['aeioubcdfghjklmnopqrst'], ['aeioubcdfghjklmnopqrstu'], ['aeioubcdfghjklmnopqrstuv'], ['aeioubcdfghjklmnopqrstuvw'], ['aeioubcdfghjklmnopqrstuvwx'], ['aeioubcdfghjklmnopqrstuvwxy'], ['aeioubcdfghjklmnopqrstuvwxyz']]", "qwen2.5-coder-32b-instruct": "[['have'], ['codewars'], ['oruder'], ['orudere'], ['aeiou'], ['bcdfg'], ['a'], ['b'], ['ab'], ['ba'], ['abc'], ['acb'], ['bac'], ['bca'], ['cab'], ['cba'], ['ae'], ['ea'], ['aei'], ['aie'], ['eai'], ['eia'], ['ia'], ['iea'], ['ei'], ['ie'], ['bcd'], ['bdc'], ['cbd'], ['cdb'], ['dbc'], ['dcb'], ['aabbcc'], ['abcde'], ['edcba']]"}}
{"requirement": "from typing import List\n\n\ndef shortest_arrang(n: int) -> List[int]:\n\"\"\"Mrs Jefferson is a great teacher. One of her strategies that helped her to reach astonishing results in the learning process is to have some fun with her students. At school, she wants to make an arrangement of her class to play a certain game with her pupils. For that, she needs to create the arrangement with **the minimum amount of groups that have consecutive sizes**.\n\nLet's see. She has      ```14``` students. After trying a bit she could do the needed arrangement:\n        ```[5, 4, 3, 2]```\n- one group of  ```5``` students\n- another group of      ```4``` students\n- then, another one of  ```3``` \n- and finally, the smallest group of    ```2``` students.\n\nAs the game was a success, she was asked to help to the other classes to teach and show the game. That's why she desperately needs some help to make this required arrangements that make her spend a lot of time. \n\nTo make things worse, she found out that there are some classes with some special number of students that is impossible to get that arrangement.\n\nPlease, help this teacher!\n\nYour code will receive the number of students of the class. It should output the arrangement as an array with the consecutive sizes of the groups in decreasing order.\n\nFor the special case that no arrangement of the required feature is possible the code should output     ```[-1] ```\n\nThe value of n is unknown and may be pretty high because some classes joined to to have fun with the game.\n\nYou may see more example tests in the Example Tests Cases Box.\n\"\"\"", "inputs": [[10], [14], [16], [22], [65]], "outputs": [[[4, 3, 2, 1]], [[5, 4, 3, 2]], [[-1]], [[7, 6, 5, 4]], [[33, 32]]], "starter_code": "from typing import List\ndef shortest_arrang(n: int) -> List[int]:", "canonical_solution": "def shortest_arrang(n):\n    if n % 2 == 1:\n        return [n // 2 + 1, n // 2]\n    for i in range(3, n // 2):\n        if i % 2 == 1 and n % i == 0:\n            return list(range(n // i + i // 2, n // i - i // 2 - 1, -1))\n        elif i % 2 == 0 and n % i == i // 2:\n            return list(range(n // i + i // 2, n // i - i // 2, -1))\n    return [-1]", "entry_point": "shortest_arrang", "task_id": "TACO_lite/1888", "input_output_examples": "[[[14], ['some special number']], [[[5, 4, 3, 2]], [[-1]]]]", "requirement_without_examples": "from typing import List\n\n\ndef shortest_arrang(n: int) -> List[int]:\n\"\"\"Mrs Jefferson is a great teacher. One of her strategies that helped her to reach astonishing results in the learning process is to have some fun with her students. At school, she wants to make an arrangement of her class to play a certain game with her pupils. For that, she needs to create the arrangement with **the minimum amount of groups that have consecutive sizes**.\n\nAs the game was a success, she was asked to help to the other classes to teach and show the game. That's why she desperately needs some help to make this required arrangements that make her spend a lot of time. \n\nTo make things worse, she found out that there are some classes with some special number of students that is impossible to get that arrangement.\n\nPlease, help this teacher!\n\nYour code will receive the number of students of the class. It should output the arrangement as an array with the consecutive sizes of the groups in decreasing order.\n\nFor the special case that no arrangement of the required feature is possible the code should output     ```[-1] ```\n\nThe value of n is unknown and may be pretty high because some classes joined to to have fun with the game.\n\nYou may see more example tests in the Example Tests Cases Box.\n\"\"\"", "llm_generated_inputs": {"deepseek-v3": "[[14], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [15], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [100], [101], [102], [103], [104], [105], [1000], [1001], [1002], [1003], [1004], [1005], [1000000]]", "qwen2.5-coder-32b-instruct": "[[14], [10], [15], [1], [0], [3], [6], [8], [21], [28], [999999]]"}}
