{"HumanEval/0": ""}
{"HumanEval/1": "The output strings should not include whitespaces."}
{"HumanEval/2": "The decimal part is computed as the original number minus its integer part"}
{"HumanEval/3": ""}
{"HumanEval/4": ""}
{"HumanEval/5": ""}
{"HumanEval/6": ""}
{"HumanEval/7": ""}
{"HumanEval/8": ""}
{"HumanEval/9": "Until given moment in the sequence means all the elements up to the given index inclusive"}
{"HumanEval/10": ""}
{"HumanEval/11": ""}
{"HumanEval/12": ""}
{"HumanEval/13": ""}
{"HumanEval/14": "Return only non-empty prefixes. The string itself is its own prefix"}
{"HumanEval/15": ""}
{"HumanEval/16": ""}
{"HumanEval/17": "The notes in the string are separated by spaces"}
{"HumanEval/18": ""}
{"HumanEval/19": ""}
{"HumanEval/20": ""}
{"HumanEval/21": ""}
{"HumanEval/22": ""}
{"HumanEval/23": ""}
{"HumanEval/24": ""}
{"HumanEval/25": ""}
{"HumanEval/26": "All occurences of a repeating element must be removed."}
{"HumanEval/27": ""}
{"HumanEval/28": ""}
{"HumanEval/29": ""}
{"HumanEval/30": ""}
{"HumanEval/31": ""}
{"HumanEval/32": ""}
{"HumanEval/33": "Zero is divisible by three. Sort in non-decsending order"}
{"HumanEval/34": "Sort in non-decsending order. Single occurences of elements that repeat in the input list must be included in the output."}
{"HumanEval/35": ""}
{"HumanEval/36": ""}
{"HumanEval/37": "Sort in non-decsending order"}
{"HumanEval/38": ""}
{"HumanEval/39": ""}
{"HumanEval/40": "Distinct elements are elements at different indexes in the list"}
{"HumanEval/41": ""}
{"HumanEval/42": ""}
{"HumanEval/43": "Distinct elements are elements at different indexes in the list"}
{"HumanEval/44": ""}
{"HumanEval/45": ""}
{"HumanEval/46": ""}
{"HumanEval/47": ""}
{"HumanEval/48": ""}
{"HumanEval/49": ""}
{"HumanEval/50": ""}
{"HumanEval/51": ""}
{"HumanEval/52": ""}
{"HumanEval/53": ""}
{"HumanEval/54": "Return true of the sets of characters used in both words are identical"}
{"HumanEval/55": "The first Fibonacci number is 1."}
{"HumanEval/56": "The corresponding closing bracket should appear later in the string"}
{"HumanEval/57": ""}
{"HumanEval/58": "Sort in non-decsending order. Elements need to appear uniquely in the resulting list, but may not be unique in the input lists"}
{"HumanEval/59": ""}
{"HumanEval/60": ""}
{"HumanEval/61": "The corresponding closing bracket should appear later in the string"}
{"HumanEval/62": ""}
{"HumanEval/63": ""}
{"HumanEval/64": "Capital vowels should also be counted"}
{"HumanEval/65": ""}
{"HumanEval/66": ""}
{"HumanEval/67": "The input string has the format \"X apples and Y oranges\", where X is the number of applies and Y is the number of oranges"}
{"HumanEval/68": ""}
{"HumanEval/69": ""}
{"HumanEval/70": ""}
{"HumanEval/71": ""}
{"HumanEval/72": ""}
{"HumanEval/73": ""}
{"HumanEval/74": ""}
{"HumanEval/75": ""}
{"HumanEval/76": ""}
{"HumanEval/77": ""}
{"HumanEval/78": ""}
{"HumanEval/79": ""}
{"HumanEval/80": ""}
{"HumanEval/81": ""}
{"HumanEval/82": ""}
{"HumanEval/83": ""}
{"HumanEval/84": ""}
{"HumanEval/85": "Use zero-based indexing (the first index is 0)."}
{"HumanEval/86": ""}
{"HumanEval/87": ""}
{"HumanEval/88": ""}
{"HumanEval/89": "Two multiplied to two means four."}
{"HumanEval/90": ""}
{"HumanEval/91": "A sentence does not have to end with a delimiter if it is the last sentence."}
{"HumanEval/92": ""}
{"HumanEval/93": "Spaces are allowed too and should be ignored."}
{"HumanEval/94": ""}
{"HumanEval/95": ""}
{"HumanEval/96": ""}
{"HumanEval/97": "A unit digit is the digit in the ones place."}
{"HumanEval/98": ""}
{"HumanEval/99": ""}
{"HumanEval/100": ""}
{"HumanEval/101": ""}
{"HumanEval/102": "If x is greater than y, then the range is empty and the function should return -1."}
{"HumanEval/103": "The result should be a String starting with 0b or -1."}
{"HumanEval/104": ""}
{"HumanEval/105": "The sorting step should be in ascending order (and after the reversal, the array should be in descending order). If the arrayange numbers, ignore them in the string output. If the array is empty, return an empty array. Otherwise make sure to return the resulting array."}
{"HumanEval/106": ""}
{"HumanEval/107": "1 <= n <= 10^3. The tuple is in the format (number_of_even, number_of_odd). Single digits count as palindromes."}
{"HumanEval/108": "If the given array is empty, return 0."}
{"HumanEval/109": ""}
{"HumanEval/110": ""}
{"HumanEval/111": "If there are no letters, return an empty dictionary."}
{"HumanEval/112": ""}
{"HumanEval/113": ""}
{"HumanEval/114": ""}
{"HumanEval/115": "All wells have the same length. grid[i][j] is either 0 or 1. The bucket capacity is between 1 and 10 inclusive."}
{"HumanEval/116": ""}
{"HumanEval/117": ""}
{"HumanEval/118": "Instances where there are two vowels inbetween consonants (e.g. baab) do not count."}
{"HumanEval/119": ""}
{"HumanEval/120": "The array is sorted in ascending order."}
{"HumanEval/121": ""}
{"HumanEval/122": ""}
{"HumanEval/123": ""}
{"HumanEval/124": ""}
{"HumanEval/125": ""}
{"HumanEval/126": ""}
{"HumanEval/127": ""}
{"HumanEval/128": ""}
{"HumanEval/129": ""}
{"HumanEval/130": ""}
{"HumanEval/131": "If there is only 1 odd digit, return that digit."}
{"HumanEval/132": ""}
{"HumanEval/133": ""}
{"HumanEval/134": ""}
{"HumanEval/135": ""}
{"HumanEval/136": "0 is neither positive or negative."}
{"HumanEval/137": ""}
{"HumanEval/138": ""}
{"HumanEval/139": ""}
{"HumanEval/140": "Each space should be considered separately-that is, if there is both a single space and a consecutive space, the single space should be replaced with _ and the consecutive space should be replaced with -."}
{"HumanEval/141": ""}
{"HumanEval/142": "If the list is empty, return 0."}
{"HumanEval/143": ""}
{"HumanEval/144": ""}
{"HumanEval/145": "Return the list after sorting the list. If the list is empty, return an empty list."}
{"HumanEval/146": ""}
{"HumanEval/147": ""}
{"HumanEval/148": ""}
{"HumanEval/149": ""}
{"HumanEval/150": ""}
{"HumanEval/151": ""}
{"HumanEval/152": ""}
{"HumanEval/153": ""}
{"HumanEval/154": "A rotation of a string moves characters from the beginning to the end."}
{"HumanEval/155": ""}
{"HumanEval/156": ""}
{"HumanEval/157": ""}
{"HumanEval/158": ""}
{"HumanEval/159": ""}
{"HumanEval/160": ""}
{"HumanEval/161": "When the string has some letters and some non-letter characters, do nothing with the non letter characters and only reverse the letters. Keep the non letter characters in the result."}
{"HumanEval/162": ""}
{"HumanEval/163": "The returned digits are inclusive of a and b. If the numbers in between are not digits (a and b are >9), return an empty list."}
